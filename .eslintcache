[{"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\index.js":"1","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\reportWebVitals.js":"2","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\App.js":"3","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\PaymentProcessStore.js":"4","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\UserStore.js":"5","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\LanguageContext.js":"6","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\translationHelpers.js":"7","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\ScrollToTop.js":"8","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\PlayerState.js":"9","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\PrivateRoute.js":"10","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Challenges.js":"11","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\HowItWork.js":"12","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Trainers.js":"13","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Nutrition.js":"14","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Pricing.js":"15","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Signup.js":"16","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Magazine.js":"17","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\AllChallenges.js":"18","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Login.js":"19","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ForgotPassword.js":"20","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\RecipeProfile.js":"21","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\TrainerProfile.js":"22","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ChallengeProfile.js":"23","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\MagazineArticle.js":"24","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ChallengePlayer.js":"25","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\HelpCenter.js":"26","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\NewWelcome.js":"27","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserProfile.js":"28","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\TermsAndCondition.js":"29","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\EmailVerificationRedirect.js":"30","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\PrivacyPolicy.js":"31","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\CookiePolicy.js":"32","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ResetNewPassword.js":"33","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\AdminDashboard.js":"34","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\authentication.js":"35","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserDashboard.js":"36","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Home.js":"37","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\users.js":"38","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\ChallengeCreator.js":"39","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserUpdate.js":"40","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\AdminDashboard.js":"41","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserSetting.js":"42","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\MollieRedirectPage.js":"43","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\CreatePayment.js":"44","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\ChoosePlan.js":"45","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Translate.js":"46","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\payment.js":"47","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Footer.js":"48","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Navbar.js":"49","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\trainers.js":"50","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\customer.js":"51","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\LoggedinNavbar.js":"52","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Cards\\ChallengeCard.js":"53","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\PackageSelector.js":"54","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\coupons.js":"55","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\VerifyUser.js":"56","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\MediaManager\\MediaManager.js":"57","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Trainer\\CreateGoalsModal.js":"58","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\mediaManager.js":"59","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\useWindowDimensions.js":"60","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Community.js":"61","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\blogs.js":"62","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Feed.js":"63","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Challenges.js":"64","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\setAuthToken.js":"65","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Nutrient.js":"66","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\VideoCreator.js":"67","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Home\\Hero.js":"68","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\LanguageSelector\\LanguageSelector.js":"69","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\BasicInformation.js":"70","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\NewFaq.js":"71","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\AllFaqs.js":"72","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RequestManager\\AllRequests.js":"73","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\NewPost.js":"74","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js":"75","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\NewCoupon.js":"76","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\AllCoupons.js":"77","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MembershipManager\\NewMembership.js":"78","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MembershipManager\\AllMemberships.js":"79","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\AllPosts.js":"80","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\AllBlogs.js":"81","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\NewBlog.js":"82","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\AllRecipes.js":"83","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\NewRecipe.js":"84","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\AllUsers.js":"85","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\AllProducts.js":"86","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\NewProduct.js":"87","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\NewUser.js":"88","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\NewExercise.js":"89","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\AllExercises.js":"90","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js":"91","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js":"92","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\MediaManager.js":"93","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\faqs.js":"94","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\EditTypeName.js":"95","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\main.js":"96","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\WorkoutCompleteModal.js":"97","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\HelpPopupPlayer.js":"98","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\Player.js":"99","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\PlayerVideoBrowser.js":"100","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\communityPosts.js":"101","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\posts.js":"102","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\recipes.js":"103","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\TextEditor.js":"104","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\EditCategoryName.js":"105","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js":"106","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\UpdatePost.js":"107","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\UpdateBlog.js":"108","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\products.js":"109","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\UpdateCoupon.js":"110","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\bodyFocus.js":"111","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\equipments.js":"112","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\tags.js":"113","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js":"114","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\goals.js":"115","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js":"116","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\EditTypeName.js":"117","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\UpdateExercise.js":"118","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\shop.js":"119","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeMusicTab.js":"120","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js":"121","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js":"122","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\MediaFileUploader.js":"123","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js":"124","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\UpdateUser.js":"125","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\UpdateProduct.js":"126","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\RenderedVideoPlayer.js":"127","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\NonRenderedVideoPlayer.js":"128","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\adminRequests.js":"129","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\EditTypeName.js":"130","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\UpdateFaq.js":"131","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\AddNewButton.js":"132","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeReviewModal.js":"133","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js":"134","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\PopupPlayer\\PopupPlayer.js":"135","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeCompleteModal.js":"136","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\EditTypeName.js":"137","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\PlayerControls.js":"138","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeCompleteNextModal.js":"139","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\MusicPlayer.js":"140","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js":"141","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\BreakTimer.js":"142","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWeekPanel.js":"143","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js":"144","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\CommentSection.js":"145","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js":"146","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Common\\ReviewsModal.js":"147","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\New\\Wizard.js":"148","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Nutrition\\SearchNutrition.js":"149","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Workout.js":"150","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Attachment\\Attachment.js":"151","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\EquipmentModal\\EquipmentModal.js":"152","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Exercise\\Exercises.js":"153","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\ChallengeCreatorV2.js":"154","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\useBrowserEvents.js":"155","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\ExerciseChooseModal\\ExerciseChooseModal.js":"156","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\MusicChooseModal\\MusicChooseModal.js":"157","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\DndWrapper.jsx":"158","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Common\\ModalForEditList.js":"159","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\ExerciseCreatorPopup.js":"160","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\WorkoutStudio.js":"161","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\MediaManagerContext.js":"162"},{"size":1428,"mtime":1755200198755,"results":"163","hashOfConfig":"164"},{"size":362,"mtime":1728505456000,"results":"165","hashOfConfig":"164"},{"size":8027,"mtime":1753539685880,"results":"166","hashOfConfig":"164"},{"size":457,"mtime":1728505456000,"results":"167","hashOfConfig":"164"},{"size":742,"mtime":1728505456000,"results":"168","hashOfConfig":"164"},{"size":1311,"mtime":1728505456000,"results":"169","hashOfConfig":"164"},{"size":382,"mtime":1728505456000,"results":"170","hashOfConfig":"164"},{"size":339,"mtime":1728505456000,"results":"171","hashOfConfig":"164"},{"size":1552,"mtime":1728505456000,"results":"172","hashOfConfig":"164"},{"size":1165,"mtime":1746110643324,"results":"173","hashOfConfig":"164"},{"size":13688,"mtime":1752008345382,"results":"174","hashOfConfig":"164"},{"size":10876,"mtime":1728984582000,"results":"175","hashOfConfig":"164"},{"size":6924,"mtime":1752008345905,"results":"176","hashOfConfig":"164"},{"size":7994,"mtime":1728505456000,"results":"177","hashOfConfig":"164"},{"size":12893,"mtime":1728984574000,"results":"178","hashOfConfig":"164"},{"size":13367,"mtime":1728982784000,"results":"179","hashOfConfig":"164"},{"size":6469,"mtime":1752008345938,"results":"180","hashOfConfig":"164"},{"size":11807,"mtime":1752008345461,"results":"181","hashOfConfig":"164"},{"size":8638,"mtime":1728982758000,"results":"182","hashOfConfig":"164"},{"size":2347,"mtime":1728505456000,"results":"183","hashOfConfig":"164"},{"size":16158,"mtime":1728987664000,"results":"184","hashOfConfig":"164"},{"size":12502,"mtime":1752008345982,"results":"185","hashOfConfig":"164"},{"size":39400,"mtime":1753553427836,"results":"186","hashOfConfig":"164"},{"size":10349,"mtime":1752008345880,"results":"187","hashOfConfig":"164"},{"size":16909,"mtime":1752008345552,"results":"188","hashOfConfig":"164"},{"size":3500,"mtime":1728505456000,"results":"189","hashOfConfig":"164"},{"size":11851,"mtime":1728505456000,"results":"190","hashOfConfig":"164"},{"size":3822,"mtime":1728984588000,"results":"191","hashOfConfig":"164"},{"size":1765,"mtime":1728982834000,"results":"192","hashOfConfig":"164"},{"size":1901,"mtime":1728505456000,"results":"193","hashOfConfig":"164"},{"size":1854,"mtime":1728982864000,"results":"194","hashOfConfig":"164"},{"size":1846,"mtime":1728982946000,"results":"195","hashOfConfig":"164"},{"size":3685,"mtime":1728505456000,"results":"196","hashOfConfig":"164"},{"size":23363,"mtime":1754760065645,"results":"197","hashOfConfig":"164"},{"size":5509,"mtime":1746109880661,"results":"198","hashOfConfig":"164"},{"size":7945,"mtime":1731775722000,"results":"199","hashOfConfig":"164"},{"size":20087,"mtime":1752008345834,"results":"200","hashOfConfig":"164"},{"size":5644,"mtime":1744391219923,"results":"201","hashOfConfig":"164"},{"size":870,"mtime":1753539695507,"results":"202","hashOfConfig":"164"},{"size":24882,"mtime":1754754086276,"results":"203","hashOfConfig":"164"},{"size":14112,"mtime":1753293017482,"results":"204","hashOfConfig":"164"},{"size":12402,"mtime":1731776992000,"results":"205","hashOfConfig":"164"},{"size":2043,"mtime":1728505456000,"results":"206","hashOfConfig":"164"},{"size":30142,"mtime":1728505456000,"results":"207","hashOfConfig":"164"},{"size":1252,"mtime":1728505456000,"results":"208","hashOfConfig":"164"},{"size":318,"mtime":1728505456000,"results":"209","hashOfConfig":"164"},{"size":10596,"mtime":1741464499781,"results":"210","hashOfConfig":"164"},{"size":4498,"mtime":1728505456000,"results":"211","hashOfConfig":"164"},{"size":9634,"mtime":1728505456000,"results":"212","hashOfConfig":"164"},{"size":2719,"mtime":1745155464458,"results":"213","hashOfConfig":"164"},{"size":1233,"mtime":1753550773684,"results":"214","hashOfConfig":"164"},{"size":4083,"mtime":1731775626000,"results":"215","hashOfConfig":"164"},{"size":2036,"mtime":1728505456000,"results":"216","hashOfConfig":"164"},{"size":5680,"mtime":1728505456000,"results":"217","hashOfConfig":"164"},{"size":2485,"mtime":1728505456000,"results":"218","hashOfConfig":"164"},{"size":4127,"mtime":1728505456000,"results":"219","hashOfConfig":"164"},{"size":421,"mtime":1754760051182,"results":"220","hashOfConfig":"164"},{"size":3616,"mtime":1732370932000,"results":"221","hashOfConfig":"164"},{"size":5471,"mtime":1755798878231,"results":"222","hashOfConfig":"164"},{"size":591,"mtime":1728505456000,"results":"223","hashOfConfig":"164"},{"size":7037,"mtime":1752008346433,"results":"224","hashOfConfig":"164"},{"size":4312,"mtime":1728505456000,"results":"225","hashOfConfig":"164"},{"size":6914,"mtime":1752008346392,"results":"226","hashOfConfig":"164"},{"size":17116,"mtime":1752008346524,"results":"227","hashOfConfig":"164"},{"size":255,"mtime":1728505456000,"results":"228","hashOfConfig":"164"},{"size":39256,"mtime":1752008346341,"results":"229","hashOfConfig":"164"},{"size":1012,"mtime":1751995263216,"results":"230","hashOfConfig":"164"},{"size":2559,"mtime":1728505456000,"results":"231","hashOfConfig":"164"},{"size":1126,"mtime":1728505456000,"results":"232","hashOfConfig":"164"},{"size":74823,"mtime":1753539737633,"results":"233","hashOfConfig":"164"},{"size":7166,"mtime":1728505456000,"results":"234","hashOfConfig":"164"},{"size":3314,"mtime":1728505456000,"results":"235","hashOfConfig":"164"},{"size":6208,"mtime":1728505456000,"results":"236","hashOfConfig":"164"},{"size":3616,"mtime":1728505456000,"results":"237","hashOfConfig":"164"},{"size":22991,"mtime":1728505456000,"results":"238","hashOfConfig":"164"},{"size":5773,"mtime":1728505456000,"results":"239","hashOfConfig":"164"},{"size":4642,"mtime":1728505456000,"results":"240","hashOfConfig":"164"},{"size":2429,"mtime":1728505456000,"results":"241","hashOfConfig":"164"},{"size":3198,"mtime":1728505456000,"results":"242","hashOfConfig":"164"},{"size":3798,"mtime":1728505456000,"results":"243","hashOfConfig":"164"},{"size":3959,"mtime":1728505456000,"results":"244","hashOfConfig":"164"},{"size":13755,"mtime":1752008347090,"results":"245","hashOfConfig":"164"},{"size":3914,"mtime":1728505456000,"results":"246","hashOfConfig":"164"},{"size":36568,"mtime":1752008347541,"results":"247","hashOfConfig":"164"},{"size":5804,"mtime":1728505456000,"results":"248","hashOfConfig":"164"},{"size":3623,"mtime":1752008347110,"results":"249","hashOfConfig":"164"},{"size":9957,"mtime":1752008346995,"results":"250","hashOfConfig":"164"},{"size":22672,"mtime":1752008347416,"results":"251","hashOfConfig":"164"},{"size":5769,"mtime":1728505456000,"results":"252","hashOfConfig":"164"},{"size":5879,"mtime":1751186453612,"results":"253","hashOfConfig":"164"},{"size":18235,"mtime":1728505456000,"results":"254","hashOfConfig":"164"},{"size":6759,"mtime":1728505456000,"results":"255","hashOfConfig":"164"},{"size":28539,"mtime":1755798320944,"results":"256","hashOfConfig":"164"},{"size":3258,"mtime":1728505456000,"results":"257","hashOfConfig":"164"},{"size":1535,"mtime":1728505456000,"results":"258","hashOfConfig":"164"},{"size":8052,"mtime":1753542401579,"results":"259","hashOfConfig":"164"},{"size":2229,"mtime":1728505456000,"results":"260","hashOfConfig":"164"},{"size":6294,"mtime":1753545726021,"results":"261","hashOfConfig":"164"},{"size":1820,"mtime":1746359703517,"results":"262","hashOfConfig":"164"},{"size":8183,"mtime":1752008346630,"results":"263","hashOfConfig":"164"},{"size":3013,"mtime":1728505456000,"results":"264","hashOfConfig":"164"},{"size":2860,"mtime":1728505456000,"results":"265","hashOfConfig":"164"},{"size":16609,"mtime":1728505456000,"results":"266","hashOfConfig":"164"},{"size":366,"mtime":1728505456000,"results":"267","hashOfConfig":"164"},{"size":1493,"mtime":1728505456000,"results":"268","hashOfConfig":"164"},{"size":681,"mtime":1754760073156,"results":"269","hashOfConfig":"164"},{"size":4174,"mtime":1752008347693,"results":"270","hashOfConfig":"164"},{"size":14259,"mtime":1752008347044,"results":"271","hashOfConfig":"164"},{"size":488,"mtime":1728505456000,"results":"272","hashOfConfig":"164"},{"size":5699,"mtime":1728505456000,"results":"273","hashOfConfig":"164"},{"size":1605,"mtime":1745155447492,"results":"274","hashOfConfig":"164"},{"size":1619,"mtime":1744469780414,"results":"275","hashOfConfig":"164"},{"size":1204,"mtime":1728505456000,"results":"276","hashOfConfig":"164"},{"size":39760,"mtime":1752008347670,"results":"277","hashOfConfig":"164"},{"size":1253,"mtime":1728505456000,"results":"278","hashOfConfig":"164"},{"size":7937,"mtime":1752008347759,"results":"279","hashOfConfig":"164"},{"size":2241,"mtime":1728505456000,"results":"280","hashOfConfig":"164"},{"size":5260,"mtime":1728505456000,"results":"281","hashOfConfig":"164"},{"size":2916,"mtime":1728505456000,"results":"282","hashOfConfig":"164"},{"size":4459,"mtime":1728505456000,"results":"283","hashOfConfig":"164"},{"size":42245,"mtime":1728505456000,"results":"284","hashOfConfig":"164"},{"size":3318,"mtime":1728505456000,"results":"285","hashOfConfig":"164"},{"size":4628,"mtime":1754754048251,"results":"286","hashOfConfig":"164"},{"size":28900,"mtime":1729567762000,"results":"287","hashOfConfig":"164"},{"size":17006,"mtime":1752008347159,"results":"288","hashOfConfig":"164"},{"size":8710,"mtime":1752008347202,"results":"289","hashOfConfig":"164"},{"size":5960,"mtime":1752008346683,"results":"290","hashOfConfig":"164"},{"size":3987,"mtime":1752008346555,"results":"291","hashOfConfig":"164"},{"size":712,"mtime":1728505456000,"results":"292","hashOfConfig":"164"},{"size":1527,"mtime":1728505456000,"results":"293","hashOfConfig":"164"},{"size":7421,"mtime":1728505456000,"results":"294","hashOfConfig":"164"},{"size":677,"mtime":1739096578000,"results":"295","hashOfConfig":"164"},{"size":3257,"mtime":1728505456000,"results":"296","hashOfConfig":"164"},{"size":1362,"mtime":1728505456000,"results":"297","hashOfConfig":"164"},{"size":2374,"mtime":1752008346585,"results":"298","hashOfConfig":"164"},{"size":5960,"mtime":1744390765928,"results":"299","hashOfConfig":"164"},{"size":2004,"mtime":1728505456000,"results":"300","hashOfConfig":"164"},{"size":16851,"mtime":1751194434786,"results":"301","hashOfConfig":"164"},{"size":2235,"mtime":1752008346902,"results":"302","hashOfConfig":"164"},{"size":6122,"mtime":1753550037330,"results":"303","hashOfConfig":"164"},{"size":1144,"mtime":1728505456000,"results":"304","hashOfConfig":"164"},{"size":3021,"mtime":1746358298277,"results":"305","hashOfConfig":"164"},{"size":6147,"mtime":1728505456000,"results":"306","hashOfConfig":"164"},{"size":6778,"mtime":1728505456000,"results":"307","hashOfConfig":"164"},{"size":6487,"mtime":1752008346400,"results":"308","hashOfConfig":"164"},{"size":3760,"mtime":1728505456000,"results":"309","hashOfConfig":"164"},{"size":8106,"mtime":1728982620000,"results":"310","hashOfConfig":"164"},{"size":22668,"mtime":1728505456000,"results":"311","hashOfConfig":"164"},{"size":16523,"mtime":1728505456000,"results":"312","hashOfConfig":"164"},{"size":18874,"mtime":1753478113696,"results":"313","hashOfConfig":"164"},{"size":1636,"mtime":1744472871780,"results":"314","hashOfConfig":"164"},{"size":3885,"mtime":1745764302643,"results":"315","hashOfConfig":"164"},{"size":21955,"mtime":1753534986067,"results":"316","hashOfConfig":"164"},{"size":7817,"mtime":1753522004377,"results":"317","hashOfConfig":"164"},{"size":3687,"mtime":1751995788281,"results":"318","hashOfConfig":"164"},{"size":5489,"mtime":1753545229168,"results":"319","hashOfConfig":"164"},{"size":4001,"mtime":1752008348542,"results":"320","hashOfConfig":"164"},{"size":3016,"mtime":1752170237498,"results":"321","hashOfConfig":"164"},{"size":2936,"mtime":1753200328589,"results":"322","hashOfConfig":"164"},{"size":10218,"mtime":1753292919176,"results":"323","hashOfConfig":"164"},{"size":926,"mtime":1753539558076,"results":"324","hashOfConfig":"164"},{"size":10949,"mtime":1755799013970,"results":"325","hashOfConfig":"164"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"329"},"1dl081e",{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"329"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"329"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"329"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"329"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"329"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"329"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"329"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"329"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"329"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"329"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"329"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"329"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"329"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"329"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"329"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"393","usedDeprecatedRules":"329"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"329"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"329"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"329"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"329"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"329"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"329"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"329"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"329"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"329"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"329"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"329"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"329"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"329"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"329"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"329"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"329"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"329"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"329"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"329"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"329"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"329"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"329"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"329"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"329"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"329"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"329"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"329"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"329"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"329"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"329"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"329"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"329"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"329"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"329"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"329"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"329"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"329"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"329"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"329"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"329"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"329"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"329"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"329"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"329"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"329"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"329"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"329"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"329"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"329"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"329"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"329"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"329"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"329"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"329"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"633","usedDeprecatedRules":"329"},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"329"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"329"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"329"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"329"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"329"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"329"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"329"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"329"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"329"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"329"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"329"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"329"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"329"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"695","usedDeprecatedRules":"329"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"329"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"329"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"329"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713","usedDeprecatedRules":"329"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"329"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"329"},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"329"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"329"},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"329"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"329"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"329"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"329"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749"},"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\index.js",["750"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport \"./index.css\";\nimport App from \"./App\";\nimport UserStore from \"./contexts/UserStore\";\nimport LanguageStore, { LanguageProvider } from \"./contexts/LanguageContext\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./App.css\";\nimport { setChonkyDefaults } from \"chonky\";\nimport { ChonkyIconFA } from \"chonky-icon-fontawesome\";\n// import \"react-modal-video/scss/modal-video.scss\";\nimport PaymentProcessStore from \"./contexts/PaymentProcessStore\";\nimport { fetchTranslations } from \"./helpers/translationHelpers\";\nimport { MediaManagerProvider } from \"./contexts/MediaManagerContext\";\n\n// Somewhere in your `index.ts`:\nsetChonkyDefaults({ iconComponent: ChonkyIconFA, disableDragAndDrop: false });\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserStore>\n      <PaymentProcessStore>\n        <LanguageProvider fetchTranslations={fetchTranslations}>\n          <MediaManagerProvider>\n            <App />\n          </MediaManagerProvider>\n        </LanguageProvider>\n      </PaymentProcessStore>\n    </UserStore>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["751","752"],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\reportWebVitals.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\App.js",["753","754"],"import React, { useEffect, useContext } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport ScrollToTop from \"./helpers/ScrollToTop\";\nimport Home from \"./pages/Home\";\nimport Trainers from \"./pages/Trainers\";\nimport Challenges from \"./pages/Challenges\";\nimport Nutrition from \"./pages/Nutrition\";\nimport Pricing from \"./pages/Pricing\";\nimport HowItWorks from \"./pages/HowItWork\";\nimport Magazine from \"./pages/Magazine\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport ForgotPassword from \"./pages/ForgotPassword\";\nimport AllChallenges from \"./pages/AllChallenges\";\nimport TrainerProfile from \"./pages/TrainerProfile\";\nimport ChallengeProfile from \"./pages/ChallengeProfile\";\nimport RecipeProfile from \"./pages/RecipeProfile\";\nimport UserDashboard from \"./pages/UserDashboard\";\nimport MagazineArticle from \"./pages/MagazineArticle\";\nimport UserUpdate from \"./pages/UserUpdate\";\nimport UserSetting from \"./pages/UserSetting\";\nimport UserProfile from \"./pages/UserProfile\";\nimport AdminDashboard from \"./pages/AdminDashboard\";\nimport AdminDashboardV2 from \"./pages/v2/AdminDashboard\";\nimport ChallengePlayer from \"./pages/ChallengePlayer\";\nimport NewWelcome from \"./pages/NewWelcome\";\nimport \"./assets/override.css\";\n\n// player state\nimport PlayerState from \"./contexts/PlayerState\";\nimport HelpCenter from \"./pages/HelpCenter\";\nimport TermsAndCondition from \"./pages/TermsAndCondition\";\nimport PrivacyPolicy from \"./pages/PrivacyPolicy\";\nimport CookiePolicy from \"./pages/CookiePolicy\";\n\nimport { userInfoContext, userPointsContext } from \"./contexts/UserStore\";\nimport { checkUser } from \"./services/authentication\";\n\nimport PrivateRoute from \"./helpers/PrivateRoute\";\nimport ResetNewPassword from \"./pages/ResetNewPassword\";\nimport CreatePayment from \"./components/Payment/CreatePayment\";\nimport EmailVerificationRedirect from \"./pages/EmailVerificationRedirect\";\nimport MollieRedirectPage from \"./components/Payment/MollieRedirectPage\";\nimport ChoosePlan from \"./components/Payment/ChoosePlan\";\nimport { getUserPoints } from \"./services/users\";\nimport ChallengeCreator from \"./pages/v2/ChallengeCreator\";\nimport Workout from \"./components/Admin/V2/Workout/Workout\";\n\nfunction App() {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    checkUserInfo();\n  }, []);\n\n  const checkUserInfo = async () => {\n    checkUser(userInfo, setUserInfo, localStorage.getItem(\"jwtToken\"), history);\n    if (localStorage.getItem(\"jwtToken\")) {\n      await getUserPoints(userPoints, setUserPoints);\n    }\n  };\n  return (\n    <Router>\n      <ScrollToTop>\n        <Route component={Home} path=\"/\" exact />\n        <Route component={Trainers} path=\"/trainers\" exact />\n        <Route component={Challenges} path=\"/challenges\" exact />\n        <Route component={Nutrition} path=\"/nutrition\" exact />\n        <Route component={Pricing} path=\"/pricing\" exact />\n        <Route component={HowItWorks} path=\"/how-it-works\" exact />\n        <Route component={Magazine} path=\"/magazine\" exact />\n        <Route component={Login} path=\"/login\" exact />\n        <Route component={Signup} path=\"/new\" exact />\n        <Route component={ForgotPassword} path=\"/forgot-password\" exact />\n        <Route\n          component={ResetNewPassword}\n          path=\"/reset-password/:token\"\n          exact\n        />\n        <Route component={AllChallenges} path=\"/all-challenges\" exact />\n        <Route\n          component={TrainerProfile}\n          path=\"/trainer/:trainerName/:id\"\n          exact\n        />\n        <Route path=\"/challenge/:challengeName/:id\" exact>\n          {/* <ChallengeProfileFigma /> */}\n          <ChallengeProfile />\n        </Route>\n        <Route component={RecipeProfile} path=\"/recipe/:recipeName/:id\" exact />\n        <Route\n          component={MagazineArticle}\n          path=\"/magazine/:magazineName/:id\"\n          exact\n        />\n        <Switch>\n          {\" \"}\n          {/*We use switch so when our PrivateRoute does redirect it wont to propblems* This will also solve the problem so that if our user loggst our of the component where they are authenticated such as dashboard they will quiclky get taken from there to login*/}\n          <PrivateRoute\n            exact\n            role=\"customer\"\n            path=\"/user/dashboard\"\n            component={UserDashboard}\n            userInfo={userInfo}\n          />\n        </Switch>\n        {/* <Route component={UserDashboard}  path=\"/user/dashboard\" exact /> */}\n        <Switch>\n          {\" \"}\n          {/*We use switch so when our PrivateRoute does redirect it wont to propblems* This will also solve the problem so that if our user loggst our of the component where they are authenticated such as dashboard they will quiclky get taken from there to login*/}\n          <PrivateRoute\n            exact\n            role=\"customer\"\n            path=\"/user/update\"\n            component={UserUpdate}\n            userInfo={userInfo}\n          />\n        </Switch>\n        {/* <Route component={UserUpdate} path=\"/user/update\" exact /> */}\n        <Switch>\n          {\" \"}\n          <PrivateRoute\n            exact\n            role=\"customer\"\n            path=\"/user/settings\"\n            component={UserSetting}\n            userInfo={userInfo}\n          />\n        </Switch>\n        {/* <Route component={UserSetting} path=\"/user/settings\" exact /> */}\n        <Switch>\n          {\" \"}\n          <PrivateRoute\n            exact\n            role=\"customer\"\n            path=\"/user/profile\"\n            component={UserProfile}\n            userInfo={userInfo}\n          />\n        </Switch>\n        {/* <Route component={UserProfile} path=\"/user/profile\" exact /> */}\n        <Switch>\n          {\" \"}\n          <PrivateRoute\n            exact\n            role=\"admin shopmanager trainer nutrist blogger\"\n            path=\"/admin/dashboard\"\n            component={AdminDashboard}\n            userInfo={userInfo}\n          />\n        </Switch>\n        <Switch>\n          <PrivateRoute\n            exact\n            role=\"admin shopmanager trainer nutrist blogger\"\n            path=\"/admin/v2/dashboard\"\n            component={AdminDashboardV2}\n            userInfo={userInfo}\n          />\n        </Switch>\n        <Switch>\n          <PrivateRoute\n            exact\n            role=\"admin trainer\"\n            path=\"/admin/v2/challenge-studio\"\n            component={ChallengeCreator}\n            userInfo={userInfo}\n          />\n        </Switch>\n        <Switch>\n          <PrivateRoute\n            exact\n            role=\"admin trainer\"\n            path=\"/admin/v2/challenge-studio/:challengeId\"\n            component={ChallengeCreator}\n            userInfo={userInfo}\n          />\n        </Switch>\n        {/* <Route component={AdminDashboard} path=\"/admin/dashboard\" exact /> */}\n        <Route component={HelpCenter} path=\"/help-center\" exact />\n        <Route component={TermsAndCondition} path=\"/terms-condition\" exact />\n        <Route component={PrivacyPolicy} path=\"/privacy-policy\" exact />\n        <Route component={CookiePolicy} path=\"/cookie-policy\" exact />\n        <Route component={NewWelcome} path=\"/new/welcome\" exact />\n        <Route component={CreatePayment} path=\"/create-payment\" exact />\n        <Route component={ChoosePlan} path=\"/choose-plan\" exact />\n        <Route\n          component={MollieRedirectPage}\n          path=\"/mollie/create-subscribtion/redirect\"\n          exact\n        />\n        <Route\n          component={EmailVerificationRedirect}\n          path=\"/email-verification/:token\"\n          exact\n        />\n        <Route\n          path=\"/play-challenge/:challengeName/:challengeId/:workoutId\"\n          exact\n        >\n          <PlayerState>\n            <ChallengePlayer />\n          </PlayerState>\n        </Route>\n      </ScrollToTop>\n    </Router>\n  );\n}\n\nexport default App;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\PaymentProcessStore.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\UserStore.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\LanguageContext.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\translationHelpers.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\ScrollToTop.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\PlayerState.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\PrivateRoute.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Challenges.js",["755"],"import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport \"../assets/challenge.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport {\n  ArrowRightOutlined,\n  CaretLeftOutlined,\n  CaretRightOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport { Carousel } from \"antd\";\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\nimport forward from \"../assets/icons/forward-white.png\";\nimport { getAllChallenges } from \"../services/createChallenge/main\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\nfunction Challenges() {\n  // eslint-disable-next-line\n  const [loading, setLoading] = useState(false);\n  const { language } = useContext(LanguageContext);\n  const [challenges, setChallenges] = useState([]);\n  const ref = useRef(null);\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const scroll = (scrollOffset) => {\n    ref.current.scrollLeft += scrollOffset;\n  };\n\n  const fetchData = async () => {\n    setLoading(true);\n    const data = await getAllChallenges(language);\n    setLoading(false);\n    const chal = data.challenges;\n    console.log(chal);\n    setChallenges(chal ? chal.reverse().slice(0, 8) : []);\n  };\n  return (\n    <div>\n      <Navbar />\n      {/* <Hero /> */}\n      <div className=\"page-header challenge-background\">\n        <div className=\"page-header-textbox\" style={{ padding: \"50px\" }}>\n          <h1 className=\"font-heading-white\">\n            <T>challenges.your_goals</T> <br /> <T>challenges.your_cha</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.regard</T>\n          </p>\n          <Link className=\"home-button\" to=\"/new\">\n            <span className=\"home-button-text font-paragraph-white\">\n              <T>challenges.start</T> <ArrowRightOutlined />\n            </span>\n          </Link>\n        </div>\n      </div>\n      {/* 2rd row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"challenges-2-row\">\n          <Carousel autoplay>\n            {loading ? (\n              <LoadingOutlined\n                style={{\n                  color: \"#ff7700 !important\",\n                  fontSize: \"30px !important\",\n                  margin: \"0 auto\",\n                }}\n              />\n            ) : (\n              challenges.map((challenge) => (\n                <Link\n                  key={challenge._id}\n                  to={`challenge/${slug(challenge.challengeName)}/${\n                    challenge._id\n                  }`}\n                >\n                  <div\n                    className=\"challenge-carousel-body\"\n                    style={{\n                      zIndex: 1000000,\n                      background: `url(${\n                        process.env.REACT_APP_SERVER\n                      }/uploads/${\n                        challenge.thumbnailLink\n                          ? challenge.thumbnailLink.replaceAll(\" \", \"%20\")\n                          : \"\"\n                      })`,\n                      backgroundSize: \"cover\",\n                      backgroundPosition: \"50% 50%\",\n                    }}\n                  >\n                    <div className=\"challenge-carousel-body-overcolor\"></div>\n                    <div className=\"challenge-carousel-body-abstext for-650px-screen-nodisplay\">\n                      <h1\n                        className=\"font-subheading-white\"\n                        style={{ fontSize: \"4rem\" }}\n                      >\n                        <T>challenges.new_cha</T>\n                      </h1>\n                      <p className=\"challenge-carousel-body-abstext-paragraph font-subheading-white\">\n                        <T>challenges.tp</T>\n                      </p>\n                    </div>\n                    <div\n                      className=\"challenge-carousel-body-textbox font-subheading-white\"\n                      style={{ fontSize: \"3rem\" }}\n                    >\n                      <h1>{challenge.challengeName}</h1>\n                      <p className=\"challenge-carousel-body-abstext-paragraph  font-paragraph-white\">\n                        {challenge.description}\n                      </p>\n                      <div>\n                        <img\n                          src={forward}\n                          alt=\"\"\n                          style={{\n                            height: \"20px\",\n                            margin: \"5px 0\",\n                          }}\n                        />\n                      </div>\n\n                      <div>\n                        {new Array(challenge.rating ? challenge.rating : 1)\n                          .fill(0)\n                          .map((e, index) => (\n                            <svg\n                              width=\"18\"\n                              height=\"18\"\n                              viewBox=\"0 0 18 18\"\n                              fill=\"none\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              key={index}\n                            >\n                              <path\n                                d=\"M11.3925 6.71722L9.77427 1.43049C9.45503 0.3928 7.97995 0.3928 7.67173 1.43049L6.04253 6.71722H1.14394C0.0761601 6.71722 -0.364163 8.0826 0.505475 8.69429L4.51241 11.5343L2.93826 16.5698C2.61902 17.5856 3.8079 18.4048 4.65552 17.7604L8.71749 14.7019L12.7795 17.7713C13.6271 18.4158 14.816 17.5965 14.4967 16.5807L12.9226 11.5452L16.9295 8.70521C17.7991 8.0826 17.3588 6.72814 16.291 6.72814H11.3925V6.71722Z\"\n                                fill=\"#FDA136\"\n                              />\n                            </svg>\n                          ))}\n                      </div>\n                    </div>\n                  </div>\n                </Link>\n              ))\n            )}\n          </Carousel>\n        </div>\n      </div>\n      {/* 2rd row */}\n      {/* 3rd row */}\n\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"trainers-3-row challenge-3-background\">\n          <h1\n            style={{ fontSize: \"3rem\", paddingLeft: \"20px\" }}\n            className=\"font-subheading-white\"\n          >\n            <T>challenges.lt</T>\n          </h1>\n          <p className=\"font-paragraph-white\" style={{ paddingLeft: \"20px\" }}>\n            <T>challenges.basic_challenge</T>\n          </p>\n          <div\n            className=\"trainers-3-row-cards\"\n            ref={ref}\n            style={{\n              overflow: \"hidden\",\n              flexWrap: \"nowrap\",\n            }}\n          >\n            {loading ? (\n              <LoadingOutlined\n                style={{ color: \"#ff7700\", fontSize: \"30px\", margin: \"0 auto\" }}\n              />\n            ) : (\n              challenges.map((challenge) => (\n                <Link\n                  to={`/challenge/${slug(challenge.challengeName)}/${\n                    challenge._id\n                  }`}\n                >\n                  <ChallengeCard\n                    picture={`${\n                      challenge.thumbnailLink\n                        ? challenge.thumbnailLink.replaceAll(\" \", \"%20\")\n                        : \"\"\n                    }`}\n                    rating={challenge.rating}\n                    name={challenge.challengeName}\n                    newc={true}\n                    key={challenge._id}\n                  />\n                </Link>\n              ))\n            )}\n          </div>\n          <div style={{ paddingTop: \"10px\" }}>\n            <Link\n              className=\"view-all-button\"\n              to=\"/all-challenges\"\n              style={{\n                marginLeft: \"20px\",\n                width: \"150px\",\n              }}\n            >\n              <span className=\"font-paragraph-white\">\n                <T>challenges.view_all</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n          <div style={{ float: \"right\", marginTop: \"-25px\" }}>\n            <span\n              className=\"font-paragraph-white view-all-button\"\n              style={{\n                fontSize: \"20px\",\n                padding: \"8px 8px\",\n                marginRight: \"5px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => scroll(-150)}\n            >\n              <CaretLeftOutlined />\n            </span>\n\n            <span\n              className=\"font-paragraph-white  view-all-button\"\n              style={{\n                fontSize: \"20px\",\n                padding: \"8px 8px\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => scroll(350)}\n            >\n              <CaretRightOutlined />\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* 3th row */}\n      {/* 4th row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"challenge-row-4 color-grey\">\n          <h1 className=\"font-heading-white\">\n            <T>challenges.healthy</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.basic</T>\n          </p>\n          <div style={{ paddingTop: \"10px\" }}>\n            <Link\n              className=\"view-all-button\"\n              to=\"/all-challenges\"\n              style={{\n                marginLeft: \"20px\",\n                width: \"150px\",\n              }}\n            >\n              <span className=\"font-paragraph-white\">\n                <T>challenges.view_all</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 4th row */}\n      {/* 5th row */}\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"challenge-row-4 color-grey-dark\">\n          <h1 className=\"font-heading-white\">\n            <T>challenges.tk</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.challenge_yourself</T>\n          </p>\n          <div style={{ paddingTop: \"10px\" }}>\n            <Link\n              className=\"view-all-button\"\n              to=\"/all-challenges\"\n              style={{\n                marginLeft: \"20px\",\n                width: \"150px\",\n              }}\n            >\n              <span className=\"font-paragraph-white\">\n                <T>challenges.view_all</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 5th row */}\n      {/* 6th row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"challenge-row-4 color-grey\">\n          <h1 className=\"font-heading-white\">\n            <T>challenges.mindset</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.think_fit</T>\n          </p>\n          <div style={{ paddingTop: \"10px\" }}>\n            <Link\n              className=\"view-all-button\"\n              to=\"/all-challenges\"\n              style={{\n                marginLeft: \"20px\",\n                width: \"150px\",\n              }}\n            >\n              <span className=\"font-paragraph-white\">\n                <T>challenges.view_all</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 6th row */}\n      {/* 7th row */}\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"challenge-row-4 color-grey-dark\">\n          <h1 className=\"font-heading-white\">\n            <T>challenges.gain_muscle</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.let_the_gains</T>\n          </p>\n          <div style={{ paddingTop: \"10px\" }}>\n            <Link\n              className=\"view-all-button\"\n              to=\"/all-challenges\"\n              style={{\n                marginLeft: \"20px\",\n                width: \"150px\",\n              }}\n            >\n              <span className=\"font-paragraph-white\">\n                <T>challenges.view_all</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n      {/* 8th row */}\n      <div className=\"challenge-row-8 color-grey\" style={{ height: \"300px\" }}>\n        <h1 className=\"font-heading-white\">\n          <T>challenges.want</T>\n        </h1>\n        <Link className=\"home-button\" to=\"/all-challenges\">\n          <span className=\"home-button-text font-paragraph-white\">\n            <T>challenges.our</T> <ArrowRightOutlined />\n          </span>\n        </Link>\n      </div>\n      {/* 8th row */}\n      <div className=\"home-row-7 background-challenge\">\n        <div className=\"home-row-7-container\">\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              <T>challenges.start_today</T>\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>challenges.optimal</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>challenges.a_personal</T>\n            </p>\n            <Link className=\"home-button\" to=\"/new\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>common.start_now</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n\n      {/* 4th row */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default Challenges;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\HowItWork.js",["756","757"],"import React, { useState } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport \"../assets/challenge.css\";\nimport \"../assets/howitworks.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowRightOutlined, PlayCircleOutlined } from \"@ant-design/icons\";\n// import ModalVideo from \"react-modal-video\";\n// import \"react-modal-video/scss/modal-video.scss\";\nimport { T } from \"../components/Translate\";\n\nfunction HowItWork() {\n  const [link, setLink] = useState(\"\");\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <div>\n      <Navbar />\n      {/* modal video */}\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"youtube\"\n        autoplay\n        isOpen={isOpen}\n        videoId={link}\n        onClose={() => setOpen(false)}\n      /> */}\n      {/* <Hero /> */}\n      <div className=\"page-header howitworks-background\">\n        <div className=\"page-header-textbox\" style={{ padding: \"50px\" }}>\n          <h1 className=\"font-heading-white\">\n            <T>how_it_works.workout</T> <br /> <T>how_it_works.start</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>how_it_works.month</T>\n          </p>\n          <Link className=\"home-button\" to=\"/new\">\n            <span className=\"home-button-text font-paragraph-white\">\n              <T>how_it_works.start_d</T> <ArrowRightOutlined />\n            </span>\n          </Link>\n        </div>\n      </div>\n      {/* pick your first goal starts */}\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"home-row-2\" style={{ backgroundColor: \"#171e27\" }}>\n          <div className=\"home-row-2-col-1\">\n            <h3 className=\"home-row-2-col-1-heading font-subheading-white\">\n              <T>how_it_works.all</T>\n            </h3>\n            <h2 className=\"home-row-2-col-1-subheading font-heading-white\">\n              <T>how_it_works.all_tools</T>\n            </h2>\n            <p className=\"home-text font-paragraph-white\">\n              <T>how_it_works.rc</T>\n            </p>\n            <Link className=\"home-button\" to=\"/new\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>how_it_works.accept</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n          <div className=\"home-row-2-col-2\">\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.we</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.choose</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.gt</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.ad</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.start_over</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.start_first</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.update_your</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.track_your</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.fc</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span\n                className=\"home-text font-heading-white\"\n                style={{ lineHeight: \"20px\" }}\n              >\n                <T>how_it_works.psm</T>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* pick your first goa ends */}\n      {/* 6th row */}\n      <div className=\"home-row-6\" style={{ padding: \"30px 50px\" }}>\n        <h1 className=\"home-row-6-heading font-heading-black\">\n          <T>how_it_works.we_share_exp</T>\n        </h1>\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\n          <T>how_it_works.this_is</T>\n        </p>\n        <div\n          className=\"home-row-6-video-container\"\n          style={{ justifyItems: \"center\" }}\n        >\n          <div\n            className=\"home-row-6-video-container-box home-6-box-1\"\n            onClick={() => {\n              setLink(\"https://www.youtube.com/embed/jVfuTFgUQEo\");\n              setOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div\n              className=\"home-row-6-text font-paragraph-white\"\n              style={{ textAlign: \"left\" }}\n            >\n              <PlayCircleOutlined className=\"play-icon\" />\n              <T>how_it_works.find_the</T>\n            </div>\n          </div>\n          <div\n            className=\"home-row-6-video-container-box home-6-box-2\"\n            onClick={() => {\n              setLink(\"https://youtu.be/dakFOeZGbO4\");\n              setOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div\n              className=\"home-row-6-text font-paragraph-white\"\n              style={{ textAlign: \"left\" }}\n            >\n              <PlayCircleOutlined className=\"play-icon\" />\n              <T>how_it_works.cnp</T>\n              <br />\n            </div>\n          </div>\n          <div\n            className=\"home-row-6-video-container-box home-6-box-3\"\n            onClick={() => {\n              setLink(\"https://youtu.be/0e_0sSkH_dQ\");\n              setOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div\n              className=\"home-row-6-text font-paragraph-white\"\n              style={{ textAlign: \"left\" }}\n            >\n              <PlayCircleOutlined className=\"play-icon\" />\n              <T>how_it_works.exercise_when_and</T>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* 6th row */}\n      {/* 8th row */}\n      <div className=\"home-row-7 howitworks-challenge-background\">\n        <div className=\"home-row-7-container\">\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              <T>how_it_works.start_today</T>\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>how_it_works.optimal</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>how_it_works.a_personal</T>\n            </p>\n            <Link className=\"home-button\" to=\"/new\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>how_it_works.start_now</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n            <p style={{ paddingTop: \"10px\" }} className=\"font-paragraph-black\">\n              <T>how_it_works.less</T>{\" \"}\n              <Link to=\"/pricing\" style={{ color: \"#ff7700\" }}>\n                <T>how_it_works.see_all</T>\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default HowItWork;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Trainers.js",["758","759","760","761"],"import React, { useState, useEffect } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport { Input, Collapse } from \"antd\";\nimport { ArrowRightOutlined, SearchOutlined } from \"@ant-design/icons\";\n\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\nimport { getAllTrainers } from \"../services/trainers\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../components/Translate\";\n\nconst { Panel } = Collapse;\n\nconst filterTextStyle = {\n  margin: 0,\n  padding: 0,\n  cursor: \"pointer\",\n  fontSize: \"16px\",\n  padding: \"5px 12px\",\n  marginRight: \"10px\",\n};\n\nfunction Trainers() {\n  const [name, setName] = useState(\"\");\n\n  // eslint-disable-next-line\n  const [allTrainers, setAllTrainers] = useState([]);\n  const [filterTrainers, setFilterTrainers] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  const [filterGender, setFilterGender] = useState(\"\");\n\n  useEffect(() => {\n    // setFilterTrainers(allTrainers);\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    const g = allTrainers.filter((trainer) => trainer.gender === filterGender);\n    setFilterTrainers(g.length ? g : allTrainers);\n  }, [filterGender]);\n\n  const fetchData = async () => {\n    const data = await getAllTrainers();\n    // console.log(data);\n    setAllTrainers(data.trainers);\n    setFilterTrainers(data.trainers);\n    // setRecommandedChallenges(data.challenges);\n  };\n\n  return (\n    <div>\n      <Navbar />\n      {/* <Hero /> */}\n      <div className=\"page-header\">\n        <div className=\"page-header-textbox\">\n          <h1 className=\"font-heading-white\">\n            {\" \"}\n            <T>trainers.skill</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            {\" \"}\n            <T>trainers.let_us</T>\n          </p>\n        </div>\n      </div>\n      {/* 2nd row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"trainers-2-row\">\n          <p className=\"font-paragraph-white\">\n            <T>trainers.real_challenge_coach</T>\n          </p>\n        </div>\n      </div>\n      {/* trainers */}\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"trainers-3-row\">\n          <Input\n            size=\"large\"\n            placeholder=\"Search Trainers By Name\"\n            style={{\n              // backgroundColor: \"transparent\",\n              padding: \"20px\",\n              color: \"#fff\",\n              fontSize: \"2rem\",\n              opacity: \"0.8\",\n            }}\n            value={searchText}\n            onChange={(e) => {\n              setSearchText(e.target.value);\n              setFilterTrainers(\n                allTrainers.filter((trainer) =>\n                  trainer.username\n                    .toUpperCase()\n                    .includes(e.target.value.toUpperCase())\n                )\n              );\n            }}\n            prefix={<SearchOutlined />}\n          />\n          <Collapse ghost>\n            <Panel\n              showArrow={false}\n              header={\n                <p\n                  className=\"font-paragraph-white\"\n                  style={{\n                    margin: 0,\n                    padding: 0,\n                    fontSize: \"18px\",\n                  }}\n                >\n                  <T>trainers.filter_trainer</T>\n                </p>\n              }\n              key=\"1\"\n            >\n              <p className=\"font-paragraph-white\">\n                <T>trainers.filter_gender</T>\n              </p>\n              <div style={{ display: \"flex\" }}>\n                <p\n                  className=\"font-paragraph-white\"\n                  onClick={() =>\n                    filterGender === \"male\"\n                      ? setFilterGender(\"\")\n                      : setFilterGender(\"male\")\n                  }\n                  style={{\n                    ...filterTextStyle,\n                    backgroundColor:\n                      filterGender === \"male\" ? \"#ff7700\" : \"#454b52\",\n                  }}\n                >\n                  <T>trainers.male</T>\n                </p>\n                <p\n                  className=\"font-paragraph-white\"\n                  onClick={() =>\n                    filterGender === \"female\"\n                      ? setFilterGender(\"\")\n                      : setFilterGender(\"female\")\n                  }\n                  style={{\n                    ...filterTextStyle,\n                    backgroundColor:\n                      filterGender === \"female\" ? \"#ff7700\" : \"#454b52\",\n                  }}\n                >\n                  <T>trainers.female</T>\n                </p>\n                <p\n                  className=\"font-paragraph-white\"\n                  onClick={() =>\n                    filterGender === \"other\"\n                      ? setFilterGender(\"\")\n                      : setFilterGender(\"other\")\n                  }\n                  style={{\n                    ...filterTextStyle,\n                    backgroundColor:\n                      filterGender === \"other\" ? \"#ff7700\" : \"#454b52\",\n                  }}\n                >\n                  <T>trainers.other</T>\n                </p>\n              </div>\n            </Panel>\n          </Collapse>\n          <div className=\"trainers-3-row-cards\">\n            {filterTrainers.map((trainer) => (\n              <Link to={`/trainer/${slug(trainer.username)}/${trainer._id}`}>\n                <ChallengeCard\n                  picture={trainer.avatarLink ? `${trainer.avatarLink}` : \"\"}\n                  // rating={5}\n                  name={trainer.username}\n                  // location={trainer.location}\n                  newc={false}\n                />\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* 3th row */}\n      <div className=\"home-row-7 background-trainers\">\n        <div className=\"home-row-7-container\" style={{ minHeight: \"350px\" }}>\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              <T>trainers.need_more</T>\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>trainers.feel_better</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>trainers.become</T>\n            </p>\n            <Link className=\"home-button\" to=\"/how-it-works\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>trainers.inspire</T>\n                <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default Trainers;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Nutrition.js",["762"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport {\n  ArrowRightOutlined,\n  CheckOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport \"../assets/nutrition.css\";\nimport SearchNutrition from \"../components/Nutrition/SearchNutrition\";\n\nimport {\n  getAllDietTypes,\n  getAllIngredients,\n  getAllMealTypes,\n  getAllRecipes,\n} from \"../services/recipes\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\nfunction Nutrition() {\n  const { language } = useContext(LanguageContext);\n  const [loading, setLoading] = useState(false);\n  const [recipes, setRecipes] = useState([]);\n  const [allMealTypes, setAllMealTypes] = useState([]);\n  const [allIngredients, setAllIngredients] = useState([]);\n  const [allDiets, setAllDiets] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const fetchData = async () => {\n    setLoading(true);\n    const res = await getAllRecipes(language);\n    const allMealT = await getAllMealTypes(language);\n    const allIngre = await getAllIngredients(language);\n    const allDiet = await getAllDietTypes(language);\n    setLoading(false);\n    console.log(allMealT);\n    console.log(allIngre);\n    console.log(allDiet);\n    if (res.recipes) {\n      setRecipes(res.recipes);\n      console.log(\"first recipe\", res.recipes);\n    }\n    if (allMealT.mealTypes) {\n      setAllMealTypes(allMealT.mealTypes);\n    }\n    if (allIngre.ingredients) {\n      setAllIngredients(allIngre.ingredients);\n    }\n    if (allDiet.diets) {\n      setAllDiets(allDiet.diets);\n    }\n  };\n\n  return (\n    <div>\n      <Navbar />\n      {/* <Hero /> */}\n      <div className=\"page-header nutrition-header background-nutrition\">\n        <div className=\"page-header-textbox\">\n          <h1 className=\"font-heading-white\">\n            <T>nutrition.skill</T>\n          </h1>\n          <p style={{ width: \"50vw\" }} className=\"font-paragraph-white\">\n            <T>nutrition.select</T>\n          </p>\n        </div>\n      </div>\n      <div>\n        {loading ? (\n          <div\n            style={{\n              backgroundColor: \"#171e27\",\n              padding: \"50px\",\n              height: \"200px\",\n              textAlign: \"center\",\n            }}\n          >\n            <LoadingOutlined\n              style={{ color: \"#ff7700\", fontSize: \"30px\", margin: \"0 auto\" }}\n            />\n          </div>\n        ) : (\n          <SearchNutrition\n            allRecipies={recipes}\n            allDiets={allDiets}\n            allIngredients={allIngredients}\n            allMealTypes={allMealTypes}\n          />\n        )}\n      </div>\n      {/* 3nd row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"nutrition-3-row\">\n          <h1\n            style={{ fontSize: \"5rem\", color: \"#fff\" }}\n            className=\"font-heading-white\"\n          >\n            <T>nutrition.let_us</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>nutrition.your_personal</T>\n          </p>\n        </div>\n      </div>\n      {/* 4th row */}\n      <div className=\"home-row-7 background-nutrition\">\n        <div className=\"home-row-7-container\" style={{ padding: \"50px\" }}>\n          <div className=\"home-row-7-container-text\">\n            {/* <h2 style={{ fontSize: \"2rem\" }}>Need more inspiration?</h2> */}\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>nutrition.1_week</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>nutrition.start_now</T>\n            </p>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.nutrition_plan</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.no_calories</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.choose</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.keep</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.change_goal</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.swap</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.weekly</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.order_online</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                <T>nutrition.add_fav</T>\n              </span>\n            </div>\n\n            <Link\n              className=\"home-button\"\n              to=\"/new\"\n              style={{ marginTop: \"20px\" }}\n            >\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>nutrition.start_7</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n      {/* 8th row */}\n\n      {/* 4th row */}\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default Nutrition;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Pricing.js",["763"],"import React, { useState } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport \"../assets/pricing.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n// import { Link } from \"react-router-dom\";\n// import {\n//   ArrowRightOutlined,\n//   CheckOutlined,\n//   EuroOutlined,\n//   DoubleRightOutlined,\n//   PlayCircleOutlined,\n// } from \"@ant-design/icons\";\n// import ModalVideo from \"react-modal-video\";\n\nimport NewWelcome from \"./NewWelcome\";\n// import \"react-modal-video/scss/modal-video.scss\";\nfunction Pricing() {\n  // const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Navbar />\n      <NewWelcome onPricingPage={true} />\n      {/* video modal */}\n      {/* <ModalVideo\n        channel=\"youtube\"\n        autoplay\n        isOpen={isOpen}\n        videoId=\"https://youtu.be/HMApf8yWUtg\"\n        onClose={() => setIsOpen(false)}\n      />\n      <div className=\"pricing-row-1\">\n        <h1 className=\"font-heading-white\">{t(\"pricing.great\")}</h1>\n        <h2 className=\"font-subheading-white\">{t(\"pricing.p\")}</h2>\n        <div className=\"pricing-row-1-cards-containers\"> */}\n      {/* card 1 */}\n      {/* <div className=\"two-cards\">\n            <div className=\"pricing-row-1-card\">\n              <h1 className=\"font-subheading-black\"> {t(\"pricing.c3\")}</h1>\n              <div className=\"home-row-2-col-2-box\">\n                <CheckOutlined\n                  style={{\n                    color: \"#ff7700\",\n                    fontSize: \"2.5rem\",\n                    paddingRight: \"0.5rem\",\n                  }}\n                />\n                <span className=\"home-text font-paragraph-black\">\n                  {t(\"pricing.c3_months\")}\n                </span>\n              </div>\n              <div className=\"home-row-2-col-2-box\">\n                <CheckOutlined\n                  style={{\n                    color: \"#ff7700\",\n                    fontSize: \"2.5rem\",\n                    paddingRight: \"0.5rem\",\n                  }}\n                />\n                <span className=\"home-text font-paragraph-black\">\n                  {t(\"pricing.save\")} 20%\n                </span>\n              </div>\n              <div className=\"pricing-card-price \">\n                <h1 className=\"font-heading-black\">€6 / {t(\"pricing.week\")}</h1>\n                <p className=\"font-subheading-black\">\n                  {t(\"pricing.c3_billed\")}\n                </p>\n              </div>\n            </div> */}\n      {/* card 2 */}\n      {/* <div className=\"pricing-row-1-card most-popular-card\">\n              <div className=\"most-popular-tag\">{t(\"pricing.most\")}</div>\n              <h1 className=\"font-subheading-black\">{t(\"pricing.c12\")}</h1>\n              <div className=\"home-row-2-col-2-box\">\n                <CheckOutlined\n                  style={{\n                    color: \"#ff7700\",\n                    fontSize: \"2.5rem\",\n                    paddingRight: \"0.5rem\",\n                  }}\n                />\n                <span className=\"home-text font-paragraph-black\">\n                  {t(\"pricing.c12_months\")}\n                </span>\n              </div>\n              <div className=\"home-row-2-col-2-box\">\n                <CheckOutlined\n                  style={{\n                    color: \"#ff7700\",\n                    fontSize: \"2.5rem\",\n                    paddingRight: \"0.5rem\",\n                  }}\n                />\n                <span className=\"home-text font-paragraph-black\">\n                  {t(\"pricing.save\")} 40%\n                </span>\n              </div>\n              <div className=\"pricing-card-price\">\n                <h1 className=\"font-heading-black\">\n                  €4.5 / {t(\"pricing.week\")}\n                </h1>\n                <p className=\"font-subheading-black\">\n                  {t(\"pricing.c12_billed\")}\n                </p>\n              </div>\n            </div>\n          </div> */}\n      {/* card 3 */}\n      {/* <div className=\"pricing-row-1-card\">\n            <h1 className=\"font-subheading-black\">{t(\"pricing.c1\")}</h1>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-black\">\n                {t(\"pricing.c1_months\")}\n              </span>\n            </div>\n            <div className=\"pricing-card-price\">\n              <h1 className=\"font-heading-black\">€7.5 / {t(\"pricing.week\")}</h1>\n              <p className=\"font-subheading-black\">{t(\"pricing.c1_billed\")}</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"money-back-guarantee font-paragraph-white\">\n          <EuroOutlined /> {t(\"pricing.money_back\")}\n        </div>\n        <div style={{ marginTop: \"50px\" }}>\n          {localStorage.getItem(\"jwtToken\") ? (\n            <Link className=\"home-button\" to=\"/choose-plan\">\n              <span className=\"home-button-text font-paragraph-white\">\n                Choose Plan <ArrowRightOutlined />\n              </span>\n            </Link>\n          ) : (\n            <Link className=\"home-button\" to=\"/new\">\n              <span className=\"home-button-text font-paragraph-white\">\n                {t(\"pricing.start_now\")} <ArrowRightOutlined />\n              </span>\n            </Link>\n          )}\n        </div>\n      </div> */}\n      {/* row 3 */}\n      {/* <div className=\"pricing-row-3-container\">\n        <div className=\"pricing-row-3\">\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.free\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.free_week\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.keep_track\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.choose\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.adapts\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.for_starters\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.motivating\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.choose_right\")}\n          </div>\n          <div className=\"pricing-row-3-box font-paragraph-white\">\n            <DoubleRightOutlined\n              style={{ fontSize: \"2.5rem\", color: \"#ff7700\" }}\n            />{\" \"}\n            {t(\"pricing.earn_points\")}\n          </div>\n        </div>\n      </div> */}\n      {/* row 3 ends */}\n      {/* 6th row */}\n      {/* <div className=\"home-row-6\">\n        <h1 className=\"home-row-6-heading font-heading-black\">\n          {t(\"pricing.get_motivated\")}\n        </h1>\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\n          {t(\"pricing.start_today_with\")}\n        </p>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <div\n            className=\"home-row-6-video-container-box pricing-video-box\"\n            onClick={() => {\n              setIsOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div\n              className=\"home-row-6-text font-paragraph-white\"\n              style={{ textAlign: \"left\" }}\n            >\n              <PlayCircleOutlined className=\"play-icon\" /> Waarom werkt Real\n              Challenge zo goed voor Remko?\n            </div>\n          </div>\n        </div>\n      </div> */}\n      {/* 6th row */}\n      {/* 7th row */}\n      {/* <div className=\"home-row-7 pricing-background\">\n        <div className=\"home-row-7-container\">\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              {t(\"pricing.start_today\")}\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              {t(\"pricing.your_set\")}\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              {t(\"pricing.where_and_whenever_you\")}\n            </p>\n            <Link className=\"home-button\" to=\"/new\">\n              <span className=\"home-button-text font-paragraph-white\">\n                {t(\"pricing.set_your_goal\")}\n                <ArrowRightOutlined />\n              </span>\n            </Link>\n            <p style={{ paddingTop: \"10px\" }} className=\"font-paragraph-black\">\n              {t(\"pricing.less_than\")}{\" \"}\n              <Link to=\"/all-challenges\" style={{ color: \"#ff7700\" }}>\n                {t(\"pricing.see_all\")}\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div> */}\n      {/* 7th row */}\n      {/* <div className=\"pricing-faqs\">\n        <h1 className=\"pricing-faqs-heading font-subheading-white\">FAQS</h1>\n        <div className=\"pricing-faqs-container\">\n          <div className=\"pricing-faqs-box\">\n            <h1 className=\"font-paragraph-white\">\n              Excepteur sint occaecat cupidatat non proident\n            </h1>\n            <p className=\"font-paragraph-white\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur.\n            </p>\n          </div>\n          <div className=\"pricing-faqs-box\">\n            <h1 className=\"font-paragraph-white\">\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco\n            </h1>\n            <p className=\"font-paragraph-white\">\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur. Excepteur sint occaecat cupidatat non proident,\n              sunt in culpa qui officia deserunt mollit anim id est laborum.\n            </p>\n          </div>\n          <div className=\"pricing-faqs-box\">\n            <h1 className=\"font-paragraph-white\">\n              Duis aute irure dolor in reprehenderit\n            </h1>\n            <p className=\"font-paragraph-white\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut\n              enim ad minim veniam, quis nostrud exercitation ullamco laboris\n              nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n              reprehenderit in voluptate velit esse cillum dolore eu fugiat\n              nulla pariatur.\n            </p>\n          </div>\n          <div className=\"pricing-faqs-box\">\n            <h1 className=\"font-paragraph-white\">\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\n            </h1>\n            <p className=\"font-paragraph-white\">\n              Duis aute irure dolor in reprehenderit in voluptate velit esse\n              cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n              cupidatat non proident, sunt in culpa qui officia deserunt mollit\n              anim id est laborum.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      9th row */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default Pricing;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Signup.js",["764","765","766","767","768"],"import React, { useState, useContext, useEffect } from \"react\";\nimport Wizard from \"../components/New/Wizard\";\nimport \"../assets/signup.css\";\nimport \"../assets/login.css\";\n// import FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\nimport GoogleLogin from \"react-google-login\";\nimport { Input, Form } from \"antd\";\nimport { LoadingOutlined, ArrowLeftOutlined } from \"@ant-design/icons\";\nimport { withRouter } from \"react-router-dom\";\n\nimport {\n  registerUser,\n  signupUserWithGoogle,\n  signupUserWithFacebook,\n} from \"../services/authentication\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { createCustomerDetails } from \"../services/customer\";\nimport setAuthToken from \"../helpers/setAuthToken\";\nimport { T } from \"../components/Translate\";\n\nfunction Signup(props) {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [wizCompleted, setWizCompleted] = useState(false);\n  const [wizardValues, setWizardValues] = useState({});\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"jwtToken\")) {\n      props.history.push(\"/user/dashboard\");\n    }\n  }, []);\n\n  function setWizardCompleted(d) {\n    setWizardValues(d);\n    setWizCompleted(true);\n  }\n  // TODO only possible when app goes live\n  const responseFacebook = async (response) => {\n    // delete value.confirm;\n    response[\"gender\"] = wizardValues.gender;\n    setLoading(true);\n    // console.log(wizardValues);\n    // console.log(value);\n    // // return;\n    const res = await signupUserWithFacebook(response);\n    if (res.success) {\n      setUserInfo({\n        ...userInfo,\n        username: res.data.username,\n        role: res.data.role,\n        id: res.data._id,\n        authenticated: true,\n      });\n      setLoading(false);\n      localStorage.setItem(\"jwtToken\", res.data.token);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      const r = await createCustomerDetails(wizardValues, res.data._id);\n      props.history.push(\"/new/welcome\");\n    } else {\n      console.log(\"error 1\", res);\n      res.data.response && typeof res.data.response.data === \"string\"\n        ? setError(res.data.response.data)\n        : setError(\"Unable to create account. Please try again.\");\n      setLoading(false);\n    }\n  };\n\n  const responseGoogle = async (response) => {\n    // delete value.confirm;\n    response[\"gender\"] = wizardValues.gender;\n    // setLoading(true);\n    // console.log(wizardValues);\n    // console.log(value);\n    // // return;\n    const res = await signupUserWithGoogle(response);\n    if (res.success) {\n      setUserInfo({\n        ...userInfo,\n        username: res.data.username,\n        role: res.data.role,\n        id: res.data._id,\n        authenticated: true,\n      });\n      // setLoading(false);\n      localStorage.setItem(\"jwtToken\", res.data.token);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      const r = await createCustomerDetails(wizardValues, res.data._id);\n      props.history.push(\"/new/welcome\");\n    } else {\n      console.log(\"error 2\", res);\n      res.data.response && typeof res.data.response.data === \"string\"\n        ? setError(res.data.response.data)\n        : setError(\"Unable to create account. Please try again.\");\n      setLoading(false);\n    }\n  };\n  const onFinish = async (value) => {\n    delete value.confirm;\n    value[\"gender\"] = wizardValues.gender;\n    setLoading(true);\n    // console.log(wizardValues);\n    // console.log(value);\n    // // return;\n    const res = await registerUser(value);\n    if (res.success) {\n      setUserInfo({\n        ...userInfo,\n        username: res.data.username,\n        role: res.data.role,\n        email: res.data.email,\n        id: res.data._id,\n        authenticated: true,\n      });\n      setLoading(false);\n      localStorage.setItem(\"jwtToken\", res.data.token);\n      localStorage.setItem(\"userRecentlySignedUp\", true);\n      localStorage.setItem(\"isActive\", false);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      const r = await createCustomerDetails(wizardValues, res.data._id);\n      if (\n        localStorage.getItem(\"package-type\") &&\n        localStorage.getItem(\"package-type\").length > 0\n      ) {\n        props.history.push(\"/create-payment\");\n      } else {\n        props.history.push(\"/new/welcome\");\n      }\n    } else {\n      console.log(\"error 3\", res);\n      res.data.response && typeof res.data.response.data === \"string\"\n        ? setError(res.data.response.data)\n        : setError(\"Unable to create account. Please try again.\");\n      setLoading(false);\n    }\n  };\n  const onFinishFailed = (value) => {\n    console.log(\"fnish failed\", value);\n  };\n  return wizCompleted ? (\n    <div className=\"signup-background\">\n      <button\n        onClick={() => setWizCompleted(false)}\n        className=\"font-paragraph-white\"\n        style={{\n          color: \"#fff\",\n          fontSize: \"18px\",\n          backgroundColor: \"var(--mirage)\",\n          padding: \"10px \",\n          float: \"left\",\n          margin: \"10px 0 0 50px\",\n          position: \"absolute\",\n          top: \"10px\",\n          border: \"none\",\n          cursor: \"pointer\",\n        }}\n      >\n        <ArrowLeftOutlined />\n        <T>signup.back</T>\n      </button>\n      <div className=\"signup-container\">\n        <h1 className=\"font-heading-white\">\n          <T>signup.join</T>\n        </h1>\n        <p\n          style={{\n            color: \"#00ffff\",\n            fontWeight: \"400\",\n            fontSize: \"1.8rem\",\n            padding: \"10px\",\n            textAlign: \"left\",\n          }}\n        >\n          <T>signup.weHaveDeveloped</T>\n        </p>\n        <div className=\"signup-container-columns\">\n          <div\n            className=\"signup-container-column1\"\n            style={{ textAlign: \"left\" }}\n          >\n            <p className=\"font-subheading-white\" style={{ paddingTop: \"12px\" }}>\n              <T>signup.social</T>\n            </p>\n            {/* todo do later */}\n            {/* <FacebookLogin\n              appId={process.env.REACT_APP_FACEBOOK_APP_ID}\n              // autoLoad={true}\n              fields=\"name,email,picture\"\n              callback={responseFacebook}\n              render={(renderProps) => (\n                <button\n                  class=\"loginBtn loginBtn--facebook\"\n                  style={{ width: \"90%\" }}\n                  onClick={renderProps.onClick}\n                >\n                  <T>signup.signFacebook</T>\n                </button>\n              )}\n            /> */}\n            <GoogleLogin\n              clientId={process.env.REACT_APP_GOOGLE_APP_ID}\n              render={(renderProps) => (\n                <button\n                  class=\"loginBtn loginBtn--google\"\n                  onClick={renderProps.onClick}\n                  style={{ width: \"90%\" }}\n                  disabled={renderProps.disabled}\n                >\n                  <T>signup.signGoogle</T>\n                </button>\n              )}\n              buttonText=\"Login\"\n              onSuccess={responseGoogle}\n              onFailure={responseGoogle}\n            />\n          </div>\n          <div className=\"signup-container-column2\">\n            <Form\n              layout=\"vertical\"\n              name=\"basic\"\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n            >\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <p className=\"font-subheading-white\">\n                  <T>signup.or_with_email</T>\n                </p>\n                <Form.Item\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      {\" \"}\n                      <T>signup.username</T>\n                    </div>\n                  }\n                  name=\"username\"\n                  rules={[\n                    { required: true, message: \"Please input your username!\" },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </div>\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <Form.Item\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      <T>signup.firstName</T>\n                    </div>\n                  }\n                  name=\"firstName\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your first name.\",\n                    },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </div>\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <Form.Item\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      <T>signup.lastName</T>\n                    </div>\n                  }\n                  name=\"lastName\"\n                  rules={[\n                    { required: true, message: \"Please input your last name.\" },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </div>\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <Form.Item\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      <T>signup.email</T>\n                    </div>\n                  }\n                  name=\"email\"\n                  rules={[\n                    { required: true, message: \"Please input your email!\" },\n                    { type: \"email\", message: \"Please input correct email\" },\n                  ]}\n                >\n                  <Input />\n                </Form.Item>\n              </div>\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <Form.Item\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      <T>signup.password</T>\n                    </div>\n                  }\n                  name=\"password\"\n                  rules={[\n                    { required: true, message: \"Please input your password!\" },\n                  ]}\n                  hasFeedback\n                >\n                  <Input.Password />\n                </Form.Item>\n              </div>\n              <div\n                className=\"login-textfield-box\"\n                style={{ textAlign: \"left\" }}\n              >\n                <Form.Item\n                  name=\"confirm\"\n                  label={\n                    <div className=\"font-paragraph-white\">\n                      <T>signup.confirm_password</T>\n                    </div>\n                  }\n                  dependencies={[\"password\"]}\n                  hasFeedback\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please confirm your password!\",\n                    },\n                    ({ getFieldValue }) => ({\n                      validator(_, value) {\n                        if (!value || getFieldValue(\"password\") === value) {\n                          return Promise.resolve();\n                        }\n                        return Promise.reject(\n                          new Error(\n                            \"The two passwords that you entered do not match!\"\n                          )\n                        );\n                      },\n                    }),\n                  ]}\n                >\n                  <Input.Password />\n                </Form.Item>\n                <span\n                  style={{ color: \"#72777B\" }}\n                  className=\"font-paragraph-white\"\n                >\n                  <T>signup.by_creating</T>\n                </span>\n              </div>\n              {loading ? (\n                <LoadingOutlined style={{ color: \"#ff7700\" }} />\n              ) : (\n                <button\n                  className=\"create-payment-check-out poppins-medium-white-20px\"\n                  style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    cursor: \"pointer\",\n                    marginTop: \"2px\",\n                  }}\n                  to=\"/challenges\"\n                  htmlType=\"submit\"\n                >\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{ textTransform: \"uppercase\", fontWeight: \"600\" }}\n                  >\n                    <T>signup.create_account</T>\n                  </span>\n                </button>\n              )}\n              <div\n                className=\"font-paragraph-white\"\n                style={{ color: \"#ff4d4f\", margin: \"10px 0\" }}\n              >\n                {error}\n              </div>\n            </Form>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <Wizard setWizardCompleted={setWizardCompleted} />\n  );\n}\n\nexport default withRouter(Signup);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Magazine.js",["769"],"import React, { useContext, useEffect, useState } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport \"../assets/challenge.css\";\nimport \"../assets/howitworks.css\";\nimport \"../assets/magazine.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { ArrowRightOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { getAllBlogs } from \"../services/blogs\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n// import ReactHTMLParser from \"react-html-parser\";\n\nfunction Magazine() {\n  const { language } = useContext(LanguageContext);\n  const [allBlogs, setAllBlogs] = useState([]);\n\n  const fetchBlogs = async () => {\n    const res = await getAllBlogs(language);\n    if (res.blogs) {\n      const blogs = res.blogs.reverse();\n      console.log(blogs);\n      setAllBlogs(blogs);\n    }\n  };\n  useEffect(() => {\n    fetchBlogs();\n  }, [language]);\n  return (\n    <div>\n      <Navbar color=\"dark\" />\n      <div\n        className=\"magazine-row-1\"\n        style={{ backgroundColor: \"#e1e9f2\" }}\n      ></div>\n      <div style={{ backgroundColor: \"#e1e9f2\" }}>\n        <div className=\"magazine-row-2\">\n          <div className=\"magazine-row-2-box\">\n            <div\n              className=\"home-row-8-blog-container-box home-8-box-1\"\n              style={{\n                background: `url(${\n                  allBlogs[0] ? allBlogs[0].featuredImage : \"\"\n                }) no-repeat center center / cover`,\n                width: \"100%\",\n                height: \"100%\",\n              }}\n            ></div>\n          </div>\n          <div className=\"magazine-row-2-textbox\">\n            <div\n              style={{\n                textAlign: \"right\",\n                color: \"#ff7700\",\n                fontWeight: \"300\",\n              }}\n            >\n              {allBlogs[0] ? allBlogs[0].category.name : \"\"}\n            </div>\n\n            <h1 className=\"font-heading-black\">\n              <Link\n                to={`/magazine/${slug(allBlogs[0] ? allBlogs[0].title : \"\")}/${\n                  allBlogs[0] ? allBlogs[0]._id : \"\"\n                }`}\n                className=\"font-heading-black hover-orange\"\n                style={{ textDecoration: \"none\" }}\n              >\n                {allBlogs[0] ? allBlogs[0].title : \"\"}\n              </Link>\n            </h1>\n\n            <p\n              className=\"font-paragraph-black\"\n              style={{ height: \"100px\", overflow: \"hidden\" }}\n            >\n              {/* {allBlogs[0] ? ReactHTMLParser(allBlogs[0].paragraph) : \"\"} */}\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* 3rd row */}\n      <div style={{ backgroundColor: \"#222932\" }}>\n        <div className=\"magazine-row-3\">\n          <p className=\"font-paragraph-white\">\n            <T>magazine.as</T>\n          </p>\n          <Link className=\"home-button\" to=\"/new\">\n            <span className=\"home-button-text font-paragraph-white\">\n              <T>magazine.start_challenge</T>\n              <ArrowRightOutlined />\n            </span>\n          </Link>\n        </div>\n      </div>\n      {/* 3rd row */}\n      {/* 8th row */}\n      <div className=\"home-row-6\" style={{ backgroundColor: \"#fff\" }}>\n        <h1 className=\"home-row-6-heading font-heading-black\">\n          <T>magazine.recent</T>\n        </h1>\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\n          <T>magazine.be_sure</T>\n        </p>\n        <div className=\"home-row-6-video-container\">\n          <Link\n            to={`/magazine/${slug(allBlogs[1] ? allBlogs[1].title : \"\")}/${\n              allBlogs[1] ? allBlogs[1]._id : \"\"\n            }`}\n            style={{\n              textAlign: \"left\",\n              cursor: \"pointer\",\n              color: \"#171e27\",\n              padding: \"10px\",\n            }}\n          >\n            <div className=\"magazine-row-2-box\" style={{ height: \"300px\" }}>\n              <div\n                className=\"home-row-8-blog-container-box home-8-box-1\"\n                style={{\n                  background: `url(${\n                    allBlogs[1] ? allBlogs[1].featuredImage : \"\"\n                  }) no-repeat center center / cover`,\n                  width: \"100%\",\n                  height: \"100%\",\n                }}\n              ></div>\n            </div>\n\n            <div style={{ color: \"#ff7700\", textAlign: \"right\" }}>\n              {\" \"}\n              {allBlogs[1] ? allBlogs[1].category.name : \"\"}\n            </div>\n            <h2 style={{ fontWeight: \"600\" }} className=\"font-heading-black\">\n              {allBlogs[1] ? allBlogs[1].title : \"\"}\n            </h2>\n            <p\n              className=\"font-heading-paragraph\"\n              style={{ height: \"20px\", overflow: \"hidden\" }}\n            >\n              {\" \"}\n              {allBlogs[1] ? allBlogs[1].paragraph : \"\"}\n            </p>\n          </Link>\n          <Link\n            to={`/magazine/${slug(allBlogs[1] ? allBlogs[1].title : \"\")}/${\n              allBlogs[2] ? allBlogs[2]._id : \"\"\n            }`}\n            style={{\n              textAlign: \"left\",\n              cursor: \"pointer\",\n              color: \"#171e27\",\n              padding: \"10px\",\n            }}\n          >\n            <div className=\"magazine-row-2-box\" style={{ height: \"300px\" }}>\n              <div\n                className=\"home-row-8-blog-container-box home-8-box-2\"\n                style={{\n                  background: `url(${\n                    allBlogs[2] ? allBlogs[2].featuredImage : \"\"\n                  }) no-repeat center center / cover`,\n                  width: \"100%\",\n                  height: \"100%\",\n                }}\n              ></div>\n            </div>\n\n            <div style={{ color: \"#ff7700\", textAlign: \"right\" }}>\n              {allBlogs[2] ? allBlogs[2].category.name : \"\"}\n            </div>\n            <h2 style={{ fontWeight: \"600\" }} className=\"font-heading-black\">\n              {allBlogs[2] ? allBlogs[2].title : \"\"}\n            </h2>\n            <p\n              className=\"font-paragraph-black\"\n              style={{ height: \"20px\", overflow: \"hidden\" }}\n            >\n              {\" \"}\n              {allBlogs[2] ? allBlogs[2].paragraph : \"\"}\n            </p>\n          </Link>\n        </div>\n      </div>\n      {/* 8th row */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default Magazine;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\AllChallenges.js",["770","771","772","773","774"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/home.css\";\nimport \"../assets/trainers.css\";\nimport \"../assets/challenge.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowRightOutlined, SearchOutlined } from \"@ant-design/icons\";\nimport { Input, Collapse } from \"antd\";\n\nimport { getAllChallenges } from \"../services/createChallenge/main\";\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\nimport { getAllChallengeGoals } from \"../services/createChallenge/goals\";\nimport { getAllBodyFocus } from \"../services/createChallenge/bodyFocus\";\nimport { getAllChallengeEquipments } from \"../services/createChallenge/equipments\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nconst { Panel } = Collapse;\n\nconst filterTextStyle = {\n  margin: 0,\n  padding: 0,\n  cursor: \"pointer\",\n  fontSize: \"16px\",\n  padding: \"5px 12px\",\n  marginRight: \"10px\",\n  margin: \"2px\",\n};\n\nfunction AllChallenges() {\n  const [loading, setLoading] = useState(false);\n  const { language } = useContext(LanguageContext);\n  const [name, setName] = useState(\"\");\n  const [filterChallenges, setFilterChallenges] = useState([]);\n  // eslint-disable-next-line\n  const [challanges, setChallenges] = useState([]);\n  const [filterByGoal, setFilterByGoal] = useState(\"\");\n  const [filterByIntensity, setFilterByIntensity] = useState(\"\");\n  const [filterByBodyFocus, setFilterByBodyFocus] = useState(\"\");\n  const [filterByEquipments, setFilterbYEquipments] = useState(\"\");\n  // ALL GOALS\n  const [allGoals, setAllGoals] = useState([]);\n  const [allBodyFocus, setAllBodyFocus] = useState([]);\n  const [allEquipments, setAllEquipments] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const getAllEquipmentsFromWeeks = (weeks) => {\n    const workouts = weeks.map((w) => w.workouts);\n    const eq = workouts.map((wo) => (wo[0] ? wo[0].relatedEquipments : []));\n    const eqs = eq.flat().map((e) => e.name);\n    return eqs;\n  };\n\n  const fetchData = async () => {\n    setLoading(true);\n    const data = await getAllChallenges(language);\n    const goals = await getAllChallengeGoals(language);\n    const bodyFocus = await getAllBodyFocus(language);\n    const equipments = await getAllChallengeEquipments(language);\n    setLoading(false);\n    const chal = data.challenges.map((c) => ({\n      ...c,\n      difficulty: c.difficulty ? [c.difficulty] : \"\",\n      body: c.body ? c.body.map((b) => b.name) : [],\n      challengeGoals: c.challengeGoals\n        ? c.challengeGoals.map((g) => g.name)\n        : [],\n      equipment: getAllEquipmentsFromWeeks(c.weeks),\n    }));\n\n    bodyFocus && setAllBodyFocus(bodyFocus.body);\n    goals && setAllGoals(goals.challengeGoals);\n    equipments && setAllEquipments(equipments.equipments);\n    setChallenges(chal ? chal.reverse() : []);\n    setFilterChallenges(chal ? chal.reverse() : []);\n  };\n\n  useEffect(() => {\n    const challenges = challanges.map((f) => {\n      var c = [];\n      if (filterByBodyFocus && f.body.includes(filterByBodyFocus)) {\n        c = [...c, f];\n      }\n      if (filterByEquipments && f.equipment.includes(filterByEquipments)) {\n        c = [...c, f];\n      }\n      if (filterByGoal && f.challengeGoals.includes(filterByGoal)) {\n        c = [...c, f];\n      }\n      if (filterByIntensity && f.difficulty.includes(filterByIntensity)) {\n        c = [...c, f];\n      }\n      return c;\n    });\n    console.log(\"popopopop\", challenges.flat());\n    challenges.flat().length > 0\n      ? setFilterChallenges(challenges.flat())\n      : setFilterChallenges(challanges);\n    // setFilterChallenges(challenges);\n  }, [filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]);\n  return (\n    <div>\n      <Navbar />\n      {/* <Hero /> */}\n      <div className=\"page-header challenge-background\">\n        <div\n          className=\"page-header-textbox\"\n          style={{ padding: \"50px\", width: \"600px\" }}\n        >\n          <h1 className=\"font-heading-white\">\n            <T>challenges.find_the</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>challenges.our_real</T>\n          </p>\n        </div>\n      </div>\n      {/* challanges */}\n      <div className=\"trainers-3-row\">\n        <Input\n          size=\"large\"\n          placeholder=\"Search Challenges\"\n          style={{\n            padding: \"20px\",\n            color: \"#fff\",\n            fontSize: \"2rem\",\n            opacity: \"0.8\",\n          }}\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n            setFilterChallenges(\n              challanges.filter((challenge) =>\n                challenge.challengeName\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            );\n          }}\n          prefix={<SearchOutlined />}\n        />\n\n        <Collapse ghost>\n          <Panel\n            showArrow={false}\n            header={\n              <p\n                className=\"font-paragraph-white\"\n                style={{\n                  margin: 0,\n                  padding: 0,\n                  fontSize: \"18px\",\n                }}\n              >\n                <T>challenges.filter</T>\n              </p>\n            }\n            key=\"1\"\n          >\n            <div\n              style={{\n                display: \"flex\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              <div>\n                <p className=\"font-paragraph-white\">\n                  <T>challenges.goals</T>\n                </p>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexFlow: \"wrap\",\n                    width: \"250px\",\n                    marginRight: \"10px\",\n                  }}\n                >\n                  {allGoals.map((g) => (\n                    <p\n                      className=\"font-paragraph-white\"\n                      onClick={() =>\n                        filterByGoal === g.name\n                          ? setFilterByGoal(\"\")\n                          : setFilterByGoal(g.name)\n                      }\n                      style={{\n                        ...filterTextStyle,\n                        backgroundColor:\n                          filterByGoal === g.name ? \"#ff7700\" : \"#454b52\",\n                      }}\n                    >\n                      {g.name.replace(\"-\", \" \")}\n                    </p>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <p className=\"font-paragraph-white\">\n                  <T>challenges.intensity</T>\n                </p>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexFlow: \"wrap\",\n                    width: \"250px\",\n                    marginRight: \"10px\",\n                  }}\n                >\n                  {[\"easy\", \"medium\", \"hard\"].map((g) => (\n                    <p\n                      className=\"font-paragraph-white\"\n                      onClick={() =>\n                        filterByIntensity === g\n                          ? setFilterByIntensity(\"\")\n                          : setFilterByIntensity(g)\n                      }\n                      style={{\n                        ...filterTextStyle,\n                        backgroundColor:\n                          filterByIntensity === g ? \"#ff7700\" : \"#454b52\",\n                      }}\n                    >\n                      {g}\n                    </p>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <p className=\"font-paragraph-white\">\n                  <T>challenges.body_focus</T>\n                </p>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexFlow: \"wrap\",\n                    width: \"250px\",\n                    marginRight: \"10px\",\n                  }}\n                >\n                  {allBodyFocus.map((g) => (\n                    <p\n                      className=\"font-paragraph-white\"\n                      onClick={() =>\n                        filterByBodyFocus === g.name\n                          ? setFilterByBodyFocus(\"\")\n                          : setFilterByBodyFocus(g.name)\n                      }\n                      style={{\n                        ...filterTextStyle,\n                        backgroundColor:\n                          filterByBodyFocus === g.name ? \"#ff7700\" : \"#454b52\",\n                      }}\n                    >\n                      {g.name}\n                    </p>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <p className=\"font-paragraph-white\">\n                  <T>challenges.equipments</T>\n                </p>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexFlow: \"wrap\",\n                    width: \"250px\",\n                    marginRight: \"10px\",\n                  }}\n                >\n                  {allEquipments.map((g) => (\n                    <p\n                      className=\"font-paragraph-white\"\n                      onClick={() =>\n                        filterByEquipments === g.name\n                          ? setFilterbYEquipments(\"\")\n                          : setFilterbYEquipments(g.name)\n                      }\n                      style={{\n                        ...filterTextStyle,\n                        backgroundColor:\n                          filterByEquipments === g.name ? \"#ff7700\" : \"#454b52\",\n                      }}\n                    >\n                      {g.name}\n                    </p>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </Panel>\n        </Collapse>\n\n        <div className=\"trainers-3-row-cards\">\n          {loading ? (\n            <LoadingOutlined\n              style={{ color: \"#ff7700\", fontSize: \"30px\", margin: \"0 auto\" }}\n            />\n          ) : (\n            filterChallenges.map((challenge) => (\n              <Link\n                to={`challenge/${challenge.challengeName}/${challenge._id}`}\n              >\n                <ChallengeCard\n                  picture={`${challenge.thumbnailLink}`}\n                  rating={challenge.rating}\n                  name={challenge.challengeName}\n                  newc={true}\n                  key={challenge._id}\n                />\n              </Link>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* 8th row */}\n      <div className=\"home-row-7 background-challenge\">\n        <div className=\"home-row-7-container\">\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              <T>challenges.start_today</T>\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>challenges.optimal</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>challenges.a_personal</T>\n            </p>\n            <Link className=\"home-button\" to=\"/challenges\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>challenges.start_now</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n\n      {/* 4th row */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default AllChallenges;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Login.js",["775","776","777","778","779","780","781"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Input, Form } from \"antd\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"../assets/login.css\";\nimport \"../assets/home.css\";\n// import FacebookLogin from \"react-facebook-login/dist/facebook-login-render-props\";\nimport GoogleLogin from \"react-google-login\";\nimport Logo from \"../images/logo.png\";\n\nimport {\n  loginUser,\n  loginUserWithGoogle,\n  loginUserWithFacebook,\n} from \"../services/authentication\";\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\nimport setAuthToken from \"../helpers/setAuthToken\";\nimport { getUserPoints } from \"../services/users\";\nimport { T } from \"../components/Translate\";\n\nfunction Login(props) {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\n  const [loading, setLoading] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errror, setError] = useState(\"\");\n\n  useEffect(() => {\n    if (localStorage.getItem(\"jwtToken\")) {\n      props.history.push(\"/user/dashboard\");\n    }\n  }, []);\n\n  const responseFacebook = async (response) => {\n    // setLoading(true);\n    const res = await loginUserWithFacebook({\n      id: response.id,\n      email: response.email,\n    });\n    if (!res.success) {\n      console.log(res);\n      setError(\"Unable to login.\");\n      // setLoading(false);\n    } else {\n      setError(\"\");\n      // setLoading(false);\n      setUserInfo({\n        ...userInfo,\n        id: res.res.user_id,\n        role: res.res.role,\n        username: res.res.username,\n        authenticated: true,\n      });\n      console.log(res);\n      localStorage.setItem(\"jwtToken\", res.res.token);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      // localStorage.setItem(\"role\", res.res.role);\n      if (\n        res.res.role === \"admin\" ||\n        res.res.role === \"trainer\" ||\n        res.res.role === \"nutrist\" ||\n        res.res.role === \"blogger\" ||\n        res.res.role === \"shopmanager\"\n      ) {\n        props.history.push(\"/admin/dashboard\");\n        return;\n      }\n      // \"admin\",\n      //   \"trainer\",\n      //   \"nutrist\",\n      //   \"blogger\",\n      //   \"shopmanager\",\n      if (res.res.role === \"customer\") {\n        props.history.push(\"/user/dashboard\");\n        return;\n      }\n    }\n  };\n\n  const responseGoogle = async (response) => {\n    return;\n    // setLoading(true);\n    console.log(\"response google\");\n    const res = await loginUserWithGoogle({\n      googleId: response.googleId,\n      email: response.profileObj.email,\n    });\n    if (!res.success) {\n      console.log(res);\n      setError(\"Unable to login.\");\n      // setLoading(false);\n    } else {\n      setError(\"\");\n      // setLoading(false);\n      setUserInfo({\n        ...userInfo,\n        id: res.res.user_id,\n        role: res.res.role,\n        username: res.res.username,\n        authenticated: true,\n      });\n      console.log(res);\n      localStorage.setItem(\"jwtToken\", res.res.token);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      // localStorage.setItem(\"role\", res.res.role);\n      if (res.res.role === \"admin\") {\n        props.history.push(\"/admin/dashboard\");\n        return;\n      }\n      if (res.res.role === \"customer\") {\n        props.history.push(\"/user/dashboard\");\n        return;\n      }\n    }\n  };\n\n  const onFinishFailed = () => {};\n  const onFinish = async (values) => {\n    setLoading(true);\n    const res = await loginUser(values.username, values.password);\n    if (!res.success) {\n      console.log(res);\n      setError(\n        \"Unable to login. Please make sure you've entered correct username and password.\"\n      );\n      setLoading(false);\n    } else {\n      setError(\"\");\n      setLoading(false);\n      setUserInfo({\n        ...userInfo,\n        id: res.res.user_id,\n        email: res.res.email,\n        // isActive: ,\n        role: res.res.role,\n        username: res.res.username,\n        authenticated: true,\n      });\n      console.log(\"res from login\", res);\n      localStorage.setItem(\"jwtToken\", res.res.token);\n      localStorage.setItem(\"isActive\", res.res.isActive);\n      setAuthToken(localStorage.getItem(\"jwtToken\"));\n      getUserPoints(userPoints, setUserPoints);\n      // localStorage.setItem(\"role\", res.res.role);\n      if (\n        res.res.role === \"admin\" ||\n        res.res.role === \"trainer\" ||\n        res.res.role === \"nutrist\" ||\n        res.res.role === \"blogger\" ||\n        res.res.role === \"shopmanager\"\n      ) {\n        props.history.push(\"/admin/dashboard\");\n        return;\n      }\n      if (res.res.role === \"customer\") {\n        props.history.push(\"/user/dashboard\");\n        return;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"login-container\">\n        <div className=\"login-container-column1\">\n          <Link to={\"/\"}>\n            <img className=\"login-logo\" src={Logo} alt=\"logo\" />\n          </Link>\n          <h1 className=\"font-heading-white\">\n            <T>login.login</T>\n          </h1>\n          <Form\n            layout=\"vertical\"\n            name=\"basic\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n          >\n            <div className=\"login-textfield-box\">\n              <Form.Item\n                label={\n                  <span className=\"font-paragraph-white\">\n                    <T>login.username</T>\n                  </span>\n                }\n                name=\"username\"\n                rules={[\n                  { required: true, message: \"Please input your username!\" },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </div>\n            <div className=\"login-textfield-box\">\n              <Form.Item\n                label={\n                  <span className=\"font-paragraph-white\">\n                    <T>login.password</T>\n                  </span>\n                }\n                name=\"password\"\n                rules={[\n                  { required: true, message: \"Please input your password!\" },\n                ]}\n                hasFeedback\n              >\n                <Input.Password />\n              </Form.Item>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Link to=\"/forgot-password\" className=\"login-forgot-password\">\n                <T>login.forgot_pass</T>\n              </Link>\n              <Link to=\"/new\" className=\"login-forgot-password\">\n                <T>login.new_user</T>\n              </Link>\n            </div>\n\n            <div style={{ textAlign: \"center\", margin: \"10px 0\" }}>\n              {loading ? (\n                <LoadingOutlined\n                  style={{ color: \"#ff7700\", fontSize: \"30px\" }}\n                />\n              ) : (\n                <button\n                  className=\"common-orange-button signup-btn\"\n                  htmlType=\"submit\"\n                >\n                  <span className=\"font-paragraph-white\">\n                    <T>login.login</T>\n                  </span>\n                </button>\n              )}\n            </div>\n            <p\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff4d4f\", margin: \"5px\" }}\n            >\n              {errror}\n            </p>\n          </Form>\n\n          {/* todo do later */}\n          {/* <FacebookLogin\n            appId={process.env.REACT_APP_FACEBOOK_APP_ID}\n            fields=\"name,email,picture\"\n            callback={responseFacebook}\n            render={(renderProps) => (\n              <button\n                class=\"loginBtn loginBtn--facebook\"\n                onClick={renderProps.onClick}\n              >\n                Login With Facebook\n              </button>\n            )}\n          /> */}\n          <GoogleLogin\n            clientId={process.env.REACT_APP_GOOGLE_APP_ID}\n            render={(renderProps) => (\n              <button\n                class=\"loginBtn loginBtn--google\"\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n              >\n                Login with Google\n              </button>\n            )}\n            buttonText=\"Login\"\n            onSuccess={responseGoogle}\n            onFailure={responseGoogle}\n          />\n        </div>\n        <div className=\"login-container-column2\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(Login);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ForgotPassword.js",["782"],"import React, { useState } from \"react\";\nimport { Input, Form, Button } from \"antd\";\n\nimport \"../assets/login.css\";\nimport \"../assets/home.css\";\nimport Logo from \"../images/logo.png\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { resetPassword } from \"../services/authentication\";\nimport { T } from \"../components/Translate\";\n\nfunction ForgotPassword() {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    const res = await resetPassword(values.email);\n    setLoading(false);\n    console.log(res);\n    console.log(values);\n  };\n\n  const onFinishFailed = (error) => {\n    console.log(error);\n  };\n  return (\n    <div>\n      <div className=\"login-container\">\n        <div className=\"login-container-column1\">\n          <img className=\"login-logo\" src={Logo} alt=\"logo\" />\n          <h1 className=\"font-heading-white\">\n            <T>forgot_password.reset</T>\n          </h1>\n          <Form\n            // form={form}\n            name=\"register\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            layout=\"vertical\"\n          >\n            <div className=\"login-textfield-box\">\n              <Form.Item\n                name=\"email\"\n                label={<span className=\"font-paragraph-white\">E-mail</span>}\n                rules={[\n                  {\n                    type: \"email\",\n                    message: \"The input is not valid E-mail!\",\n                  },\n                  {\n                    required: true,\n                    message: \"Please input your E-mail!\",\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            </div>\n            {loading ? (\n              <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\n            ) : (\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{\n                  backgroundColor: \"#ff7700\",\n                  border: \"none\",\n                }}\n              >\n                <T>forgot_password.rp</T>\n              </Button>\n            )}\n          </Form>\n        </div>\n\n        <div className=\"login-container-column2\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default ForgotPassword;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\RecipeProfile.js",["783","784","785","786","787","788","789","790"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/trainerprofile.css\";\nimport \"../assets/home.css\";\nimport \"../assets/challengeProfile.css\";\nimport \"../assets/recipeProfile.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport {\n  StarOutlined,\n  UserOutlined,\n  ArrowRightOutlined,\n  LikeOutlined,\n  ClockCircleOutlined,\n  LoadingOutlined,\n  HeartFilled,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { Avatar, Input, Modal, Rate } from \"antd\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  getRecipeById,\n  favouriteRecipeById,\n  addRecipeComment,\n} from \"../services/recipes\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport ChallengeReviewModal from \"../components/Challenge/ChallengeReviewModal\";\nimport ReviewsModal from \"../components/Common/ReviewsModal\";\nimport moment from \"moment\";\nimport slug from \"elegant-slug\";\nimport { Helmet } from \"react-helmet\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n{\n  /* todo later */\n}\n// import ReactHtmlParser from \"react-html-parser\";\n\nfunction RecipeProfile(props) {\n  const { language, updateLanguage } = useContext(LanguageContext);\n  const [allComments, setAllComments] = useState([]);\n  const [commentText, setCommentText] = useState(\"\");\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\n  const [userInfo, serUserInfo] = useContext(userInfoContext);\n  const [reviewOpen, setReviewOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // eslint-disable-next-line\n  const [recipe, setRecipe] = useState({});\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const fetchData = async () => {\n    if (Object.keys(recipe).length > 0) {\n      if (recipe.language === language) {\n      } else {\n        if (recipe.alternativeLanguage) {\n          window.location.href = `${\n            process.env.REACT_APP_FRONTEND_SERVER\n          }/recipe/${slug(recipe.alternativeLanguage.name)}/${\n            recipe.alternativeLanguage._id\n          }`;\n        }\n      }\n    } else {\n      const id = props.match.params.id;\n      setLoading(true);\n      const res = await getRecipeById(id);\n      if (res) {\n        setAllComments(res.comments);\n        setRecipe(res);\n        setLoading(false);\n        updateLanguage(res.language);\n        console.log(res);\n      }\n    }\n  };\n\n  const postCommentToBackend = async () => {\n    setCommentButtomLoading(true);\n    const res = await addRecipeComment(recipe._id, commentText);\n\n    if (res) {\n      setAllComments(res.comments);\n    }\n    setCommentButtomLoading(false);\n    setCommentText(\"\");\n  };\n\n  const favouriteRecipe = async (id) => {\n    await favouriteRecipeById({ recipeId: id }, userInfo.id);\n  };\n  return loading ? (\n    <div className=\"center-inpage\">\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\n    </div>\n  ) : (\n    <div>\n      <Helmet>\n        <title>{`Realchallenge: ${recipe.name}`}</title>\n        <meta name=\"description\" content={recipe.description} />\n        <meta property=\"og:title\" content={recipe.name} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:description\" content={recipe.description} />\n        <meta\n          property=\"og:url\"\n          content={`http://localhost:3001/recipe/${slug(recipe.name)}/${\n            recipe._id\n          }`}\n        />\n        <meta name=\"author\" content=\"Realchallenge\" />\n      </Helmet>\n      <Navbar color=\"dark\" />\n      <ReviewsModal\n        visible={reviewOpen}\n        setVisible={setReviewOpen}\n        item={recipe}\n        type=\"recipes\"\n        fetchData={fetchData}\n      />\n      <div className=\"trainer-profile-container\">\n        <div\n          className=\"trainer-profile-container-column1\"\n          style={{\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\n              process.env.REACT_APP_SERVER\n            }/uploads/${\n              recipe.image ? recipe.image.replaceAll(\" \", \"%20\") : \"\"\n            })`,\n            backgroundSize: \"100% 100vh\",\n            backgroundPosition: \"10% 10%\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"profile-box\">\n            <div\n              className=\"challenge-profile-box-1\"\n              style={{ borderBottom: \"2px solid #222932\", textAlign: \"left\" }}\n            >\n              <h1\n                className=\"font-heading-white\"\n                style={{\n                  fontSize: \"4rem\",\n                }}\n              >\n                {recipe.name}\n              </h1>\n            </div>\n            <div className=\"challenge-profile-box-2\">\n              <div className=\"challenge-profile-box-2-rating\">\n                {console.log(\"rating\", recipe)}\n                <div style={{ padding: \"5px\" }}>\n                  <Rate value={recipe.rating} allowHalf disabled={true} />\n                  {/* {new Array(recipe.rating ? recipe.rating : 1)\n                    .fill(0)\n                    .map(() => (\n                      <StarOutlined\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontSize: \"2rem\",\n                        }}\n                      />\n                    ))} */}\n                </div>\n                <span onClick={() => setReviewOpen(true)}>\n                  <T>recipe_profile.reviews</T>\n                </span>\n                {localStorage.getItem(\"jwtToken\") ? (\n                  <div className=\"recipe-likes\">\n                    <HeartFilled\n                      onClick={() => favouriteRecipe(recipe._id)}\n                      style={{ fontSize: \"3rem\", cursor: \"pointer\" }}\n                    />{\" \"}\n                    {recipe.likes}\n                  </div>\n                ) : (\n                  <div></div>\n                )}\n              </div>\n              <div className=\"challenge-profile-box-2-info\">\n                {recipe.mealTypes\n                  ? recipe.mealTypes.map((meal) => (\n                      <div\n                        className=\"challenge-profile-box-2-container\"\n                        style={{ opacity: \"0.7\" }}\n                      >\n                        {meal.name}\n                      </div>\n                    ))\n                  : \"\"}\n                {recipe.kCalPerPerson ? (\n                  <div\n                    className=\"challenge-profile-box-2-container\"\n                    style={{ opacity: \"0.7\" }}\n                  >\n                    {recipe.kCalPerPerson + \" KCAL\"}\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n              <div className=\"challenge-profile-box-2-info\">\n                {recipe.prepTime ? (\n                  <div className=\"recipe-info-block\">\n                    <ClockCircleOutlined\n                      style={{ color: \"var(--color-orange)\" }}\n                    />{\" \"}\n                    {recipe.prepTime} <T>recipe_profile.minutes</T>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n                {recipe.persons ? (\n                  <div className=\"recipe-info-block\">\n                    <UserOutlined style={{ color: \"var(--color-orange)\" }} />{\" \"}\n                    {recipe.persons} <T>recipe_profile.persons</T>\n                  </div>\n                ) : (\n                  \"\"\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"recipe-profile-container-column2\">\n          {/* hree we go */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.meal_values</T>\n            </div>\n            <div className=\"recipe-mealValues-container\">\n              {[\n                {\n                  type: \"Carbohydrates\",\n                  quantity: recipe.carbohydrate ? recipe.carbohydrate : \"\",\n                },\n                {\n                  type: \"Protein\",\n                  quantity: recipe.protein ? recipe.protein : \"\",\n                },\n                {\n                  type: \"Fat\",\n                  quantity: recipe.fat ? recipe.fat : \"\",\n                },\n                {\n                  type: \"Fiber\",\n                  quantity: recipe.fiber ? recipe.fiber : \"\",\n                },\n              ].map((value) => (\n                <div className=\"recipe-mealValues-container-box\">\n                  <span>{value.type}</span>\n                  <span>{value.quantity} g</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          {/* sdadasd */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.short_info</T>\n            </div>\n            <div className=\"recipe-mealValues-info\">\n              {/* todo later */}\n              {/* {recipe.description ? ReactHtmlParser(recipe.description) : \"\"} */}\n            </div>\n          </div>\n          {/* asdasdasd */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.ingredients</T>\n            </div>\n            <div className=\"recipe-ingredients-box\">\n              {recipe.ingredients &&\n                recipe.ingredients.map((line, i) => (\n                  <div className=\"recipe-mealValues-info recipe-ingredients-box-line\">\n                    <span>\n                      {line.name ? line.name.name : \"\"}{\" \"}\n                      {line.method && `(${line.method})`}\n                    </span>\n                    <span>\n                      {line.weight ? `${line.weight}g` : line.weight}{\" \"}\n                      {line.volume ? `${line.volume}ml` : line.volume}\n                      {line.pieces ? ` ${line.pieces} piece` : line.pieces}\n                    </span>\n                  </div>\n                ))}\n            </div>\n          </div>\n          {/* sdcsadas */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.prepration</T>\n            </div>\n            <div className=\"recipe-prepration-box\">\n              {recipe.cookingProcess\n                ? recipe.cookingProcess.map((line, i) => (\n                    <div className=\"recipe-mealValues-info recipe-prepration-box-line\">\n                      <span className=\"recipe-mealValues-info-number\">\n                        {i + 1}\n                      </span>{\" \"}\n                      {line}\n                    </div>\n                  ))\n                : \"\"}\n            </div>\n          </div>\n          {/* dasdasdsad */}\n          {/* dasdasdsad */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.tips</T>\n            </div>\n            <div\n              className=\"recipe-mealValues-info\"\n              style={{\n                backgroundColor: \"#ffeee0\",\n                minHeight: \"100px\",\n                padding: \"10px\",\n              }}\n            >\n              {/* {ReactHtmlParser(recipe?.tips)} */}\n            </div>\n          </div>\n          {/* sdasdasdas */}\n          <div className=\"recipe-mealValues\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.notes</T>\n            </div>\n            <div\n              className=\"recipe-mealValues-info\"\n              style={{\n                backgroundColor: \"#ffeee0\",\n                minHeight: \"100px\",\n                padding: \"10px\",\n                listStyle: \"none\",\n              }}\n            >\n              {/* todo later */}\n              {/* {ReactHtmlParser(recipe?.notes)} */}\n            </div>\n          </div>\n          {/* sdasdasdas */}\n          {/* <div className=\"trainer-profile-goals\">\n            <div className=\"recipe-mealValues-heading font-paragraph-white\">\n              <T>recipe_profile.comments</T>\n            </div>\n            <div\n              className=\"trainer-profile-goals-container\"\n              style={{ backgroundColor: \"#e1e9f2\" }}\n            > */}\n          {/* {.map((comment) => (\n                <div\n                  className=\"challenge-profile-comment font-paragraph-white\"\n                  style={{ backgroundColor: \"transparent\" }}\n                >\n                  <span className=\"challenge-profile-comment-username\">\n                    <UserOutlined /> {comment.username}\n                  </span>\n                  <span style={{ color: \"black\" }}>{comment.comment}</span>\n                </div>\n              ))} */}\n          <div\n            className=\"trainer-profile-goals\"\n            style={{\n              borderBottom: \"1px solid transparent\",\n              backgroundColor: \"#e1e9f2\",\n              padding: \"10px\",\n            }}\n          >\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{\n                color: \"#72777B\",\n                textTransform: \"uppercase\",\n              }}\n            >\n              <T>challenge_profile.comments</T>\n            </div>\n            {allComments.map((c) => (\n              <div className=\"comment-container\">\n                <div className=\"comment-container-c1 font-paragraph-black\">\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\n                  <div className=\"comment-container-c2 font-paragraph-black\">\n                    {c.text}\n                  </div>\n                </div>\n\n                <div\n                  className=\"font-paragraph-white comment-container-c3\"\n                  style={{ color: \"#82868b\" }}\n                >\n                  {moment(c.createdAt).format(\"MMM, Do YYYY\")}\n                </div>\n              </div>\n            ))}\n            {localStorage.getItem(\"jwtToken\") && (\n              <>\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    value={commentText}\n                    onChange={(e) => setCommentText(e.target.value)}\n                  />\n                </div>\n                {commentButtonLoading ? (\n                  <LoadingOutlined\n                    style={{\n                      color: \"#ff7700\",\n                      fontSize: \"30px\",\n                      marginTop: \"10px\",\n                    }}\n                  />\n                ) : (\n                  <button\n                    className=\"common-transparent-button font-paragraph-white\"\n                    onClick={postCommentToBackend}\n                    style={{\n                      color: \"#ff7700\",\n                      borderColor: \"#ff7700\",\n                      marginTop: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <T>common.postComment</T>\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n          {/* </div>\n          </div> */}\n          {!localStorage.getItem(\"jwtToken\") && (\n            <div style={{ textAlign: \"center\", paddingTop: \"10px\" }}>\n              <Link\n                className=\"home-button font-paragraph-white\"\n                to=\"/challenges\"\n                style={{ width: \"80%\" }}\n              >\n                <span className=\"home-button-text\">\n                  <T>recipe_profile.start_today</T> <ArrowRightOutlined />\n                </span>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default withRouter(RecipeProfile);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\TrainerProfile.js",["791","792","793"],"import React, { useState, useEffect } from \"react\";\nimport \"../assets/trainerprofile.css\";\nimport \"../assets/home.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { Link, withRouter } from \"react-router-dom\";\n// import ModalVideo from \"react-modal-video\";\n// import \"react-modal-video/scss/modal-video.scss\";\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\nimport { addCommentToTrainer, getTrainerById } from \"../services/trainers\";\nimport QuoteIcon from \"../assets/icons/quote-icon.png\";\nimport ChallengeProfileSubtract from \"../assets/icons/challenge-profile-subtract.svg\";\nimport { Avatar, Input } from \"antd\";\nimport moment from \"moment\";\nimport StarFilled from \"../assets/icons/star-orange.svg\";\nimport StartTransparent from \"../assets/icons/star-transparent.svg\";\nimport slug from \"elegant-slug\";\nimport { Helmet } from \"react-helmet\";\nimport { T } from \"../components/Translate\";\n\nfunction TrainerProfile(props) {\n  const [open, setOpen] = useState(false);\n\n  // eslint-disable-next-line\n  const [challenges, setChallenges] = useState([]);\n  const [filterChallenges, setFilterChallenges] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [trainer, setTrainer] = useState({});\n  const [calculatedRating, setCalculatedRating] = useState(0);\n  // comments\n  const [allComments, setAllComments] = useState([]);\n  const [commentText, setCommentText] = useState(\"\");\n  const [commentButtonLoading, setCommentButtonLoading] = useState(false);\n\n  async function fetchData() {\n    setLoading(true);\n    const id = props.match.params.id;\n    const res = await getTrainerById(id);\n    const c = res.challenges.filter((g) => g.rating > 0);\n    console.log(res);\n\n    var overR = 0;\n    for (var i = 0; i < c.length; i++) {\n      overR += c[i].rating;\n    }\n    setCalculatedRating(overR / c.length);\n    setTrainer(res.trainer);\n    setChallenges(res.challenges);\n    setFilterChallenges(res.challenges);\n    setAllComments(res.trainer.comments);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const postCommentToBackend = async () => {\n    setCommentButtonLoading(true);\n    const res = await addCommentToTrainer(trainer._id, commentText);\n\n    if (res) {\n      setAllComments(res.comments);\n    }\n    setCommentButtonLoading(false);\n    setCommentText(\"\");\n    // console.log(res);\n  };\n\n  return loading ? (\n    <div className=\"center-inpage\">\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\n    </div>\n  ) : (\n    <div>\n      <Helmet>\n        <title>{`Realchallenge: ${trainer.firstName}`}</title>\n        <meta name=\"description\" content={trainer.motto} />\n        <meta property=\"og:title\" content={trainer.name} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:description\" content={trainer.motto} />\n        <meta\n          property=\"og:url\"\n          content={`http://localhost:3001/trainer/${slug(trainer.firstName)}/${\n            trainer._id\n          }`}\n        />\n        <meta name=\"author\" content=\"Realchallenge\" />\n      </Helmet>\n      <Navbar />\n      {/* video modal */}\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"custom\"\n        autoplay\n        isOpen={open}\n        controlsList=\"nodownload\"\n        videoId={`${trainer.videoTrailerLink}`}\n        onClose={() => setOpen(false)}\n      /> */}\n      <div className=\"trainer-profile-container\">\n        <div\n          className=\"trainer-profile-container-column1\"\n          style={{\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\n              process.env.REACT_APP_SERVER\n            }/uploads/${\n              trainer.heroBanner\n                ? trainer.heroBanner.replaceAll(\" \", \"%20\")\n                : \"\"\n            })`,\n            backgroundSize: \"100% 100vh\",\n            backgroundPosition: \"10% 10%\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          {console.log(\n            `${\n              trainer.heroBanner\n                ? trainer.heroBanner.replaceAll(\" \", \"%20\")\n                : \"\"\n            }`\n          )}\n          <div className=\"profile-box\">\n            <div className=\"profile-box-row1\">\n              <div className=\"profile-box-row1-avatar\">\n                <img\n                  src={`${\n                    trainer.avatarLink\n                      ? trainer.avatarLink.replaceAll(\" \", \"%20\")\n                      : \"\"\n                  }`}\n                  alt=\"trainer-profile\"\n                />\n              </div>\n              <div className=\"profile-box-row1-information\">\n                <h2\n                  className=\"font-heading-white\"\n                  style={{ margin: \"0\", padding: \"0\" }}\n                >\n                  {trainer.firstName ? trainer.firstName : \"\"}{\" \"}\n                  {trainer.lastName ? trainer.lastName : \"\"}\n                </h2>\n\n                <div style={{ paddingTop: \"20px\" }}>\n                  <p\n                    className=\"font-paragraph-white\"\n                    style={{ margin: \"0\", padding: \"0\" }}\n                  >\n                    {trainer.country ? trainer.country : \"\"}\n                  </p>\n                  {new Array(calculatedRating ? calculatedRating : 0)\n                    .fill(0)\n                    .map(() => (\n                      <img\n                        src={StarFilled}\n                        alt=\"\"\n                        style={{ height: \"20px\", margin: \"2px\" }}\n                      />\n                    ))}\n                  {new Array(calculatedRating ? 5 - calculatedRating : 5)\n                    .fill(0)\n                    .map(() => (\n                      <img\n                        src={StartTransparent}\n                        alt=\"\"\n                        style={{ height: \"20px\", margin: \"2px\" }}\n                      />\n                    ))}\n                </div>\n                <div>\n                  {/* {new Array(trainer.rating).fill(0).map((e) => (\n                    <StarOutlined\n                      style={{ color: \"#ff7700\", textTransform: \"uppercase\" }}\n                      className=\"challenge-carousel-body-textbox-icons\"\n                    />\n                  ))} */}\n                </div>\n              </div>\n              <div className=\"profile-box-row1-playericon\">\n                <img\n                  src={ChallengeProfileSubtract}\n                  onClick={() => setOpen(true)}\n                />\n              </div>\n            </div>\n            <div className=\"profile-box-row2\">\n              <div className=\"profile-box-row2-quote font-paragraph-white\">\n                <img src={QuoteIcon} alt=\"\" />\n                <span style={{ marginLeft: \"10px\" }}>\n                  {trainer.motto ? trainer.motto : \"\"}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"trainer-profile-container-column2\">\n          <div className=\"trainer-profile-goals\">\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\n            >\n              Fitness Interests\n            </div>\n            <div className=\"trainer-profile-goals-container\">\n              {/* TODO */}\n              {trainer.trainersFitnessInterest\n                ? trainer.trainersFitnessInterest.map((goal) => (\n                    <div\n                      className=\"trainer-profile-goal font-paragraph-white\"\n                      key={goal._id}\n                    >\n                      {goal.name}\n                    </div>\n                  ))\n                : \"\"}\n            </div>\n          </div>\n\n          <div className=\"trainer-profile-aboutme\">\n            <div\n              className=\"trainer-profile-aboutme-heading font-paragraph-white\"\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\n            >\n              <T>trainer_profile.about_me</T>\n            </div>\n            <div className=\"trainer-profile-aboutme-container font-paragraph-white\">\n              {trainer.bio ? trainer.bio : \"\"}\n            </div>\n          </div>\n          <div className=\"trainer-profile-challenges\">\n            <div\n              className=\"trainer-profile-challenges-heading font-paragraph-white\"\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\n            >\n              <T>trainer_profile.challenges</T>\n            </div>\n            <div className=\"trainer-profile-challenges-container\">\n              <Input\n                style={{\n                  margin: \"10px\",\n                  backgroundColor: \"#262D36\",\n                  color: \"#fff\",\n                }}\n                onChange={(e) => {\n                  const g = challenges.filter((c) =>\n                    c.challengeName\n                      .toLowerCase()\n                      .includes(e.target.value.toLowerCase())\n                  );\n                  setFilterChallenges(g);\n                }}\n                placeholder=\"Search challenge\"\n              />\n              {/* TODO  */}\n              {filterChallenges.map((challenge) => (\n                <Link\n                  to={`/challenge/${slug(challenge.challengeName)}/${\n                    challenge._id\n                  }`}\n                  key={challenge._id}\n                >\n                  <ChallengeCard\n                    picture={`${\n                      challenge.thumbnailLink\n                        ? challenge.thumbnailLink.replaceAll(\" \", \"%20\")\n                        : \"\"\n                    }`}\n                    name={challenge.challengeName}\n                    rating={challenge.rating}\n                  />\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          <div\n            className=\"trainer-profile-goals\"\n            style={{ borderBottom: \"1px solid transparent\" }}\n          >\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{\n                color: \"#72777B\",\n                textTransform: \"uppercase\",\n              }}\n            >\n              <T>challenge_profile.comments</T>\n            </div>\n            {allComments.map((c) => (\n              <div className=\"comment-container\">\n                <div className=\"comment-container-c1 font-paragraph-white\">\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\n                  <div className=\"comment-container-c2 font-paragraph-white\">\n                    {c.text}\n                  </div>\n                </div>\n\n                <div\n                  className=\"font-paragraph-white comment-container-c3\"\n                  style={{ color: \"#82868b\" }}\n                >\n                  {moment(c.createdAt).format(\"MMM, Do YY\")}\n                </div>\n              </div>\n            ))}\n            {localStorage.getItem(\"jwtToken\") && (\n              <>\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    value={commentText}\n                    onChange={(e) => setCommentText(e.target.value)}\n                  />\n                </div>\n                {commentButtonLoading ? (\n                  <LoadingOutlined\n                    style={{\n                      color: \"#ff7700\",\n                      fontSize: \"30px\",\n                      marginTop: \"10px\",\n                    }}\n                  />\n                ) : (\n                  <button\n                    className=\"common-transparent-button font-paragraph-white\"\n                    onClick={postCommentToBackend}\n                    style={{\n                      color: \"#ff7700\",\n                      borderColor: \"#ff7700\",\n                      marginTop: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <T>common.postComment</T>\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default withRouter(TrainerProfile);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ChallengeProfile.js",["794","795","796","797","798","799"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/trainerprofile.css\";\nimport \"../assets/home.css\";\nimport \"../assets/challengeProfile.css\";\nimport Navbar from \"../components/Navbar\";\nimport {\n  ArrowRightOutlined,\n  LoadingOutlined,\n  DownOutlined,\n  UpOutlined,\n  UndoOutlined,\n} from \"@ant-design/icons\";\nimport Attachment from \"../assets/icons/attachement-symbol.png\";\nimport Ellipse from \"../assets/icons/ellipse.svg\";\nimport { addComment, getChallengeById } from \"../services/createChallenge/main\";\nimport { Link, withRouter } from \"react-router-dom\";\n// import ModalVideo from \"react-modal-video\";\nimport { Tooltip, Collapse, Input, Avatar, Progress } from \"antd\";\n\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { checkUserPackage } from \"../services/payment\";\nimport { selectedChallengeContext } from \"../contexts/PaymentProcessStore\";\nimport { getChallengeProgress, getUserProfileInfo } from \"../services/users\";\nimport { addChallengeToCustomerDetail } from \"../services/customer\";\nimport { checkUser } from \"../services/authentication\";\nimport moment from \"moment\";\nimport HelpIcon from \"../assets/icons/Help-icon.png\";\nimport ShoopingIcon from \"../assets/icons/shopping-symbol.png\";\nimport ChallengeProfileSubtract from \"../assets/icons/challenge-profile-subtract.svg\";\nimport StarFilled from \"../assets/icons/star-orange.svg\";\nimport StartTransparent from \"../assets/icons/star-transparent.svg\";\nimport ForwardWhite from \"../assets/icons/forward-white.png\";\nimport ChallengeCompleteModal from \"../components/Challenge/ChallengeCompleteModal\";\nimport ReplaceFreeChallengePopup from \"../components/Challenge/ReplaceFreeChallengePopup\";\nimport ChallengeReviewModal from \"../components/Challenge/ChallengeReviewModal\";\nimport { set } from \"lodash\";\nimport slug from \"elegant-slug\";\nimport { Helmet } from \"react-helmet\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\nconst tooltipText = `\nIf you don’t choose any plan and hit start now, you can go through the wizard, get your free intake, make a free account and enjoy our free challenges collection and one week meal plan. \n`;\nfunction ChallengeProfile(props) {\n  const { language, updateLanguage } = useContext(LanguageContext);\n  const [reviewOpen, setReviewOpen] = useState(false);\n  const [open, setOpen] = useState(false);\n  // eslint-disable-next-line\n\n  const [challenge, setChallenge] = useState({});\n  const [usereDtails, setUserDetails] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [pack, setPack] = useState(\"\");\n  const [selectedChallenge, setSelectedChallenge] = useContext(\n    selectedChallengeContext\n  );\n  const [commentText, setCommentText] = useState(\"\");\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\n  const [showChangePanel, setShowChangePanel] = useState([]);\n  const [allComments, setAllComments] = useState([]);\n  const [challengeProgress, setChallengeProgress] = useState(null);\n\n  // flag if user owns this challenge or not\n  const [userOwnsThisChallenge, setUserOwnsThisChallenge] = useState(\"\");\n  const [finishChallengePopupVisible, setFinishChallengePopupVisible] =\n    useState(false);\n  const [\n    replaceFreeChallengePopupVisible,\n    setReplaceFreeChallengePopupVisible,\n  ] = useState(false);\n\n  const fetchChallengeData = async () => {\n    setLoading(true);\n    const res = await getChallengeById(props.match.params.id);\n    if (res) {\n      setChallenge(res);\n      setAllComments(res.comments);\n      updateLanguage(res.language);\n    }\n\n    if (localStorage.getItem(\"jwtToken\") && userInfo.id) {\n      const uInfo = await getUserProfileInfo(userInfo.id);\n      uInfo && setUserDetails(uInfo.customer);\n      let check =\n        uInfo &&\n        uInfo.customer &&\n        uInfo.customer.customerDetails &&\n        uInfo.customer.customerDetails.challenges.find(\n          (f) => f._id === res._id\n        );\n      // console.log(\"check\", check, uInfo, res);\n      // if user is admin or trainer and creater of his own callenge\n      if (uInfo && uInfo.customer && uInfo.customer.role === \"admin\") {\n        check = true;\n      }\n      if (uInfo && uInfo.customer && uInfo.customer.role === \"trainer\") {\n        // check = true;\n        const isChallengeTrainer = res.trainers.find(\n          (t) => t._id === uInfo.customer._id\n        );\n        if (isChallengeTrainer) {\n          check = true;\n        }\n      }\n\n      setUserOwnsThisChallenge(check);\n      // if users the challenge\n      if (check) {\n        let challengeProgress = await getChallengeProgress(\n          props.match.params.id\n        );\n        if (challengeProgress.data) {\n          setChallengeProgress(challengeProgress.data);\n          console.log(\"ammar\", challengeProgress, challenge);\n          if (\n            challengeProgress.data &&\n            challengeProgress.data.challengeCompletionRate === 100 &&\n            !challengeProgress.data.challengeReview\n          ) {\n            setFinishChallengePopupVisible(true);\n          }\n        }\n        console.log(\"challengeProgress\", challengeProgress);\n      }\n      console.log(\"uInfo\", uInfo);\n    }\n    setLoading(false);\n    console.log(res, \"res\");\n  };\n  useEffect(() => {\n    fetchData();\n  }, [userInfo, language]);\n\n  const fetchData = async () => {\n    if (challenge && Object.keys(challenge).length > 0) {\n      if (challenge.language === language) {\n      } else {\n        if (challenge.alternativeLanguage) {\n          window.location.href = `${\n            process.env.REACT_APP_FRONTEND_SERVER\n          }/challenge/${slug(challenge.alternativeLanguage.challengeName)}/${\n            challenge.alternativeLanguage._id\n          }`;\n        }\n      }\n    } else {\n      fetchChallengeData();\n    }\n  };\n\n  const postCommentToBackend = async () => {\n    setCommentButtomLoading(true);\n    const res = await addComment(challenge._id, commentText);\n\n    if (res) {\n      setAllComments(res.comments);\n    }\n    setCommentButtomLoading(false);\n    setCommentText(\"\");\n    // console.log(res);\n  };\n\n  function isWorkoutLocked(workoutId, i, j) {\n    // when is workout locked.\n    // if there is no challenge progress in backend so we only show first workout unlocked everything else is locked.\n    // if therer is a challenge progress, we only unlock a workout with the following 3 cases:\n    //workout is completed\n    // workout is in progress\n    // workout is next one to the one completed\n    var flag = true;\n    const isPrevWorkoutCompleted =\n      challenge &&\n      challengeProgress &&\n      j > 0 &&\n      challengeProgress.completedWorkouts.includes(\n        challenge.weeks[i].workouts[j - 1]._id\n      );\n\n    const isPrevWeekCompleted =\n      challenge &&\n      challengeProgress &&\n      i >= 1 &&\n      challenge.weeks[i - 1].workouts.every((r) =>\n        challengeProgress.completedWorkouts.includes(r._id)\n      );\n\n    console.log(\n      \"hahshasd\",\n      i >= 1 &&\n        challengeProgress &&\n        challenge.weeks[i - 1].workouts.every((r) =>\n          challengeProgress.completedWorkouts.includes(r._id)\n        )\n    );\n    if (challengeProgress === null && (i !== 0 || j !== 0)) {\n      flag = true;\n    }\n\n    if (challengeProgress) {\n      if (\n        challengeProgress.completedWorkouts.includes(workoutId) ||\n        challengeProgress.currentWorkout === workoutId ||\n        isPrevWorkoutCompleted ||\n        isPrevWeekCompleted\n      ) {\n        flag = false;\n      }\n    }\n\n    console.log(\n      \"flagggggggggggg\",\n      flag,\n      isPrevWorkoutCompleted,\n      isPrevWeekCompleted\n    );\n\n    return flag;\n  }\n\n  function getEquipmentsFromWorkouts(weeks) {\n    const workouts =\n      weeks &&\n      weeks.map((w) => {\n        return w.workouts;\n      });\n    const merged = [].concat.apply([], workouts);\n    const relatedEquipments = merged.map((m) => m.relatedEquipments);\n    const eg = [].concat.apply([], relatedEquipments);\n    return eg.length > 0 ? (\n      <div className=\"trainer-profile-goals\">\n        <div\n          className=\"trainer-profile-goals-heading font-paragraph-white\"\n          style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n        >\n          <T>challenge_profile.equipments</T>\n        </div>\n        <div className=\"trainer-profile-goals-container\">\n          {/* {getEquipmentsFromWorkouts(challenge.weeks)} */}\n          {eg.map((body) => (\n            <div\n              className=\"trainer-profile-goal font-paragraph-white\"\n              style={{ marginRight: \"1px\", background: \"#283443\" }}\n            >\n              {body.name}\n            </div>\n          ))}\n        </div>\n      </div>\n    ) : (\n      <></>\n    );\n  }\n\n  const pushCustomerOnConditions = async () => {\n    // console.log(\"YAAAAAAAAS\");\n    // check if user is logged in\n    if (userInfo.id) {\n      //this check wheater the customer is subscribed or not\n      //TODO: if customer is susbcribed and he doest not already have access to 3 challenges, I need to add this challenge to his challenge array(make sure he is not subscirbed to package 1)\n      console.log(\"ammar\", usereDtails, userInfo);\n      const ch = checkUserPackage(\n        usereDtails,\n        challenge,\n        pack,\n        props.history,\n        setSelectedChallenge,\n        setReplaceFreeChallengePopupVisible\n      );\n      // console.log(\"chhhhhh\", ch);\n      // return;\n      if (ch) {\n        if (ch.success && ch.message === \"SUBSCRIBE\") {\n          const res = await addChallengeToCustomerDetail(\n            userInfo.id,\n            challenge._id\n          );\n          if (res && res.success) {\n            fetchData();\n          }\n          console.log(\"res\", res);\n          console.log(\"complete this part\", ch);\n          // return;\n        }\n      }\n    } else {\n      console.log(userInfo.id);\n      setSelectedChallenge(challenge);\n      localStorage.setItem(\"package-type\", pack);\n      props.history.push(\"/new\");\n    }\n  };\n\n  const getWeeksComponent = () => {\n    if (userOwnsThisChallenge) {\n      return <div></div>;\n    } else {\n      if (challenge && challenge.access && challenge.access.includes(\"FREE\")) {\n        return (\n          <>\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n            >\n              <T>challenge_profile.sub</T>\n              <Tooltip placement=\"top\" title={tooltipText}>\n                <img src={HelpIcon} alt=\"\" style={{ marginLeft: \"5px\" }} />\n              </Tooltip>\n            </div>\n            <div className=\"font-paragraph-white\">\n              <T>challenge_profile.gataf</T>\n            </div>\n\n            <div className=\"unlock-challenge-div font-paragraph-white\">\n              <span style={{ fontSize: \"20px\", fontWeight: \"600\" }}>\n                <T>challenge_profile.ofc</T>\n              </span>\n              <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>€0</span>\n              <span className=\"font-paragraph-white\">\n                <T>challenge_profile.nosub</T>\n              </span>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ color: \"#9F9F9F\" }}\n              >\n                <T>challenge_profile.hsn</T>\n              </span>\n            </div>\n          </>\n        );\n      } else {\n        if (\n          usereDtails &&\n          usereDtails.customerDetails &&\n          usereDtails.customerDetails.membership &&\n          usereDtails.customerDetails.membership.length > 0\n        ) {\n          <div></div>;\n        } else {\n          return (\n            <>\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                <T>player.related</T>\n                <T>challenge_profile.sub</T>\n                <Tooltip placement=\"top\" title={tooltipText}>\n                  <img src={HelpIcon} alt=\"\" style={{ marginLeft: \"5px\" }} />\n                </Tooltip>\n              </div>\n              <div className=\"font-paragraph-white\">\n                <T>challenge_profile.gataf</T>\n              </div>\n              <div className=\"unlock-challenge-packages\">\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_1\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_1\");\n                    }\n                  }}\n                  style={{\n                    border:\n                      pack === \"CHALLENGE_1\"\n                        ? \"2px solid #f37720\"\n                        : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"30px\",\n                    }}\n                  >\n                    One-Time <br /> Challenge\n                  </span>\n                  <span\n                    style={{ fontSize: \"26px\", fontWeight: \"600\" }}\n                  >{`${challenge.currency}${challenge.price}`}</span>\n                  <span style={{ margin: \"15px 0\" }}>No subscription</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Once\n                  </span>\n                </div>\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_12\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_12\");\n                    }\n                  }}\n                  style={{\n                    border:\n                      pack === \"CHALLENGE_12\"\n                        ? \"2px solid #f37720\"\n                        : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Repeat & Save\n                  </span>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{\n                      fontSize: \"13px\",\n                      backgroundColor: \"#f37720\",\n                      padding: \"5px\",\n                      width: \"120px\",\n                      fontWeight: \"600\",\n                      alignSelf: \"center\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Save up to 60%\n                  </span>\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\n                    €4.5 <span style={{ fontSize: \"14px\" }}>/Week</span>\n                  </span>\n                  <span style={{ margin: \"15px 0\" }}>12 months plan</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Monthly\n                  </span>\n                </div>\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_3\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_3\");\n                    }\n                  }}\n                  style={{\n                    border:\n                      pack === \"CHALLENGE_3\"\n                        ? \"2px solid #f37720\"\n                        : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Repeat & Save\n                  </span>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{\n                      fontSize: \"13px\",\n                      backgroundColor: \"#f37720\",\n                      padding: \"5px\",\n                      width: \"120px\",\n                      fontWeight: \"600\",\n                      alignSelf: \"center\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Save up to 30%\n                  </span>\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\n                    €6 <span style={{ fontSize: \"14px\" }}>/Week</span>\n                  </span>\n                  <span style={{ margin: \"15px 0\" }}>3 months plan</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Monthly\n                  </span>\n                </div>\n              </div>\n            </>\n          );\n        }\n      }\n    }\n  };\n\n  function openChallengePlayer(address, workout, i, j) {\n    if (isWorkoutLocked(workout._id, i, j) && (i !== 0 || j !== 0)) {\n    } else {\n      props.history.push(address);\n    }\n  }\n  const getWeeks = () => {\n    // if user has that specific challenge in its details\n    console.log(\"usereDtails asdasdasd\", usereDtails);\n    if (userOwnsThisChallenge) {\n      return (\n        <div style={{ marginTop: \"20px\" }}>\n          {challenge.weeks &&\n            challenge.weeks.map((w, i) => (\n              <>\n                <h3\n                  className=\"font-paragraph-white\"\n                  style={{ margin: \"10px 0\" }}\n                >\n                  {w.weekName}\n                </h3>\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  // style={{ backgroundColor: \"#2D3239\" }}\n                >\n                  {w.workouts &&\n                    w.workouts.map((workout, j) => (\n                      <div\n                        onClick={() =>\n                          openChallengePlayer(\n                            `/play-challenge/${props.match.params.challengeName}/${challenge._id}/${workout._id}`,\n                            workout,\n                            i,\n                            j\n                          )\n                        }\n                        className={`challenge-profile-comment font-paragraph-white`}\n                        key={workout._id}\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                          flexDirection: \"row\",\n                          alignItems: \"center\",\n                          cursor: \"pointer\",\n                          backgroundColor: \"#2D3239\",\n                          position: \"relative\",\n                        }}\n                      >\n                        {isWorkoutLocked(workout._id, i, j) &&\n                          (i !== 0 || j !== 0) && (\n                            <div className=\"workout-card-disabled\"></div>\n                          )}\n                        <div style={{ display: \"flex\" }}>\n                          <img\n                            src={Ellipse}\n                            alt=\"\"\n                            style={{\n                              marginRight: \"5px\",\n                            }}\n                          />\n                          <div\n                            className=\"font-paragraph-white\"\n                            style={{\n                              margin: \"0 5px\",\n                              display: \"flex\",\n                              flexDirection: \"column\",\n                            }}\n                          >\n                            <span>{workout.title}</span>\n                            <span\n                              style={{ color: \"#BABCBF\", fontSize: \"14px\" }}\n                            >\n                              {workout.subtitle}\n                            </span>\n                          </div>\n                        </div>\n                        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                          {workout.introVideoLink && (\n                            <span\n                              className=\"font-paragraph-white\"\n                              style={{\n                                backgroundColor: \"#354c63\",\n                                padding: \"3px 10px\",\n                                margin: \"0 2px\",\n                              }}\n                            >\n                              Intro\n                            </span>\n                          )}\n                          {workout.relatedEquipments &&\n                            workout.relatedEquipments.map((w) => (\n                              <span\n                                className=\"font-paragraph-white\"\n                                style={{\n                                  backgroundColor: \"#354c63\",\n                                  padding: \"5px 10px\",\n                                  margin: \"0 2px\",\n                                }}\n                              >\n                                {w.name}\n                              </span>\n                            ))}\n                          {workout.infoFile && (\n                            <img\n                              src={Attachment}\n                              alt=\"\"\n                              style={{\n                                margin: \"0 2px\",\n                              }}\n                            />\n                          )}\n\n                          {workout.relatedProducts &&\n                            workout.relatedProducts.length > 0 && (\n                              <img\n                                src={ShoopingIcon}\n                                alt=\"\"\n                                style={{\n                                  margin: \"0 2px\",\n                                }}\n                              />\n                            )}\n\n                          {challengeProgress &&\n                          challengeProgress.completedWorkouts.includes(\n                            workout._id\n                          ) ? (\n                            <UndoOutlined\n                              style={{\n                                margin: \"0 5px\",\n                              }}\n                            />\n                          ) : (\n                            <ArrowRightOutlined\n                              style={{\n                                margin: \"0 5px\",\n                              }}\n                            />\n                          )}\n                        </div>\n                        {challengeProgress &&\n                          (challengeProgress.completedWorkouts.includes(\n                            workout._id\n                          ) ||\n                            challengeProgress.currentWorkout ===\n                              workout._id) && (\n                            <span\n                              className=\"workout-bottom-border\"\n                              style={{\n                                width:\n                                  challengeProgress &&\n                                  challengeProgress.currentWorkout ===\n                                    workout._id\n                                    ? `${challengeProgress.currentWorkoutCompletionRate}%`\n                                    : \"100%\",\n                              }}\n                            ></span>\n                          )}\n                      </div>\n                    ))}\n                </div>\n              </>\n            ))}\n        </div>\n      );\n    } else {\n      return (\n        <Collapse\n          defaultActiveKey={[]}\n          onChange={(e) => setShowChangePanel(e)}\n          style={{\n            backgroundColor: \"#171e27\",\n            marginTop: \"10px\",\n            padding: \"10px\",\n          }}\n        >\n          {challenge.weeks &&\n            challenge.weeks.map((w, i) => (\n              <Collapse.Panel\n                showArrow={false}\n                style={{ backgroundColor: \"#1b2632\", marginBottom: \"5px\" }}\n                header={\n                  <>\n                    {console.log(\"week\", w)}\n                    <span\n                      className=\"font-paragraph-white\"\n                      style={{\n                        fontSize: \"13px\",\n                        backgroundColor: \"#f37720\",\n                        padding: \"5px\",\n                        width: \"120px\",\n                        textTransform: \"uppercase\",\n                        margin: \"0 0 12px 5px\",\n                      }}\n                    >\n                      {w.weekName}\n                    </span>\n                    <div\n                      style={{\n                        fontWeight: \"500\",\n                        fontSize: \"16px\",\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\",\n                        padding: \"8px\",\n                        textTransform: \"uppercase\",\n                      }}\n                      className=\"font-paragraph-white\"\n                    >\n                      <span> {w.weekSubtitle}</span>\n                      <span>\n                        {showChangePanel.includes(`${i + 1}`) ? (\n                          <UpOutlined style={{ color: \"#ff7700\" }} />\n                        ) : (\n                          <DownOutlined style={{ color: \"#ff7700\" }} />\n                        )}\n                      </span>\n                    </div>\n                  </>\n                }\n                key={i + 1}\n              >\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  style={{ backgroundColor: \"#1b2632\" }}\n                >\n                  {w.workouts &&\n                    w.workouts.map((workout) => (\n                      <div\n                        className=\"challenge-profile-comment font-paragraph-white\"\n                        key={workout._id}\n                        style={{\n                          display: \"flex\",\n                          flexDirection: \"column\",\n                          justifyContent: \"space-between\",\n                          alignItems: \"flex-start\",\n                          backgroundColor: \"transparent\",\n                        }}\n                      >\n                        <span>{workout.title}</span>\n                        <span\n                          className=\"font-paragraph-white\"\n                          style={{ fontSize: \"13px\" }}\n                        >\n                          {workout.subtitle}\n                        </span>\n                      </div>\n                    ))}\n                </div>\n              </Collapse.Panel>\n            ))}\n        </Collapse>\n      );\n    }\n  };\n\n  return loading ? (\n    <div className=\"center-inpage\">\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\n    </div>\n  ) : (\n    <div>\n      <Helmet>\n        <title>{`Realchallenge: ${challenge.challengeName}`}</title>\n        <meta name=\"description\" content={challenge.description} />\n        <meta property=\"og:title\" content={challenge.challengeName} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:description\" content={challenge.description} />\n        <meta\n          property=\"og:url\"\n          content={`http://localhost:3001/${slug(challenge.challengeName)}/${\n            challenge._id\n          }`}\n        />\n        <meta name=\"author\" content=\"Realchallenge\" />\n      </Helmet>\n      <Navbar />\n      {/* video modal */}\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"custom\"\n        autoplay\n        isOpen={open}\n        controlsList=\"nodownload\"\n        url={`${challenge.videoThumbnailLink}`}\n        onClose={() => setOpen(false)}\n      /> */}\n      <ChallengeReviewModal\n        visible={reviewOpen}\n        setVisible={setReviewOpen}\n        challenge={challenge}\n      />\n      <div className=\"trainer-profile-container\">\n        <div\n          className=\"trainer-profile-container-column1\"\n          style={{\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\n              process.env.REACT_APP_SERVER\n            }/uploads/${\n              challenge.thumbnailLink\n                ? challenge.thumbnailLink.replaceAll(\" \", \"%20\")\n                : \"\"\n            })`,\n            backgroundSize: \"100% 100vh\",\n            backgroundPosition: \"10% 10%\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"profile-box\">\n            <div className=\"challenge-profile-box-1\">\n              <img\n                src={ChallengeProfileSubtract}\n                alt=\"\"\n                onClick={() => setOpen(true)}\n              />\n              <h1 className=\"font-heading-white\" style={{ fontSize: \"4rem\" }}>\n                {challenge.challengeName ? challenge.challengeName : \"\"}\n              </h1>\n              <Progress\n                percent={\n                  challengeProgress && challengeProgress.challengeCompletionRate\n                    ? challengeProgress.challengeCompletionRate\n                    : 0\n                }\n                style={{ height: \"4px\" }}\n                trailColor=\"rgb(79, 90, 104)\"\n                showInfo={false}\n              />\n            </div>\n            <div className=\"challenge-profile-box-2\">\n              <div className=\"challenge-profile-box-2-rating\">\n                <div style={{ padding: \"5px\" }}>\n                  {new Array(challenge.rating).fill(0).map(() => (\n                    <img\n                      src={StarFilled}\n                      alt=\"\"\n                      style={{ height: \"20px\", margin: \"2px\" }}\n                    />\n                  ))}\n                  {new Array(challenge.rating ? 5 - challenge.rating : 5)\n                    .fill(0)\n                    .map(() => (\n                      <img\n                        src={StartTransparent}\n                        alt=\"\"\n                        style={{ height: \"20px\", margin: \"2px\" }}\n                      />\n                    ))}\n                </div>\n                <span onClick={() => setReviewOpen(true)}>\n                  <T>challenge_profile.reviews</T>\n                </span>\n              </div>\n              <div className=\"challenge-profile-box-2-info\">\n                <div className=\"challenge-profile-box-2-container\">\n                  <img src={ForwardWhite} alt=\"\" />{\" \"}\n                  {challenge.difficulty ? challenge.difficulty : \"\"}\n                </div>\n                <div className=\"challenge-profile-box-2-container\">\n                  {challenge.duration ? `${challenge.duration} mins` : \"\"}\n                </div>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                style={{ fontSize: \"18px\", marginTop: \"10px\" }}\n              >\n                {challenge.description}\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"trainer-profile-container-column2\">\n          <div className=\"trainer-profile-goals\">\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n            >\n              <T>challenge_profile.trainers</T>\n            </div>\n            <div className=\"challenge-trainers-container\">\n              {challenge.trainers &&\n                challenge.trainers.map((trainer) => (\n                  <div\n                    className=\"challenge-trainer-box\"\n                    style={{ background: \"#283443\" }}\n                  >\n                    <span\n                      style={{\n                        backgroundImage: `url(${trainer.avatarLink})`,\n                        backgroundPosition: \"center center\",\n                        backgroundSize: \"cover\",\n                        backgroundRepeat: \"no-repeat\",\n                        height: \"50px\",\n                        width: \"60px\",\n                      }}\n                    ></span>\n                    {/* <img\n                      // src={}\n                      alt={trainer.firstName}\n                    /> */}\n                    <Link\n                      to={`/trainer/${slug(trainer.firstName)}/${trainer._id}`}\n                      className=\"challenge-trainer-box-text font-paragraph-white\"\n                    >\n                      {trainer.firstName + \" \" + trainer.lastName}\n                    </Link>\n                  </div>\n                ))}\n            </div>\n          </div>\n          {challenge.trainersFitnessInterest && (\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                <T>challenge_profile.fitnessInterests</T>\n              </div>\n              <div className=\"trainer-profile-goals-container\">\n                {challenge.trainersFitnessInterest &&\n                  challenge.trainersFitnessInterest.map((goal) => (\n                    <div\n                      className=\"trainer-profile-goal font-paragraph-white\"\n                      style={{ marginRight: \"1px\", background: \"#283443\" }}\n                    >\n                      {goal.name}\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"trainer-profile-goals\">\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n            >\n              <T>challenge_profile.body_focus</T>\n            </div>\n            <div className=\"trainer-profile-goals-container\">\n              {challenge.body &&\n                challenge.body.map((body) => (\n                  <div\n                    className=\"trainer-profile-goal font-paragraph-white\"\n                    style={{ marginRight: \"1px\", background: \"#283443\" }}\n                  >\n                    {body.name}\n                  </div>\n                ))}\n            </div>\n          </div>\n\n          {getEquipmentsFromWorkouts(challenge.weeks)}\n\n          <div\n            className=\"trainer-profile-goals\"\n            style={{ position: \"relative\" }}\n          >\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n            >\n              <T>challenge_profile.yourPersonalJourney</T>\n            </div>\n            {getWeeks()}\n          </div>\n          <div\n            className=\"trainer-profile-goals\"\n            style={{\n              position: \"relative\",\n              borderBottom: \"1px solid transparent\",\n            }}\n          >\n            {getWeeksComponent()}\n          </div>\n\n          <div\n            className=\"trainer-profile-goals\"\n            style={{ textAlign: \"center\", paddingTop: \"10px\" }}\n          >\n            {userOwnsThisChallenge ? (\n              \"\"\n            ) : (\n              <button\n                className=\"create-payment-check-out font-paragraph-white\"\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                  cursor: \"pointer\",\n                  width: \"100%\",\n                }}\n                onClick={pushCustomerOnConditions}\n              >\n                <span\n                  className=\"font-paragraph-white\"\n                  style={{ fontWeight: \"600\" }}\n                >\n                  <T>challenge_profile.start_today</T> <ArrowRightOutlined />\n                </span>\n              </button>\n            )}\n          </div>\n\n          <div\n            className=\"trainer-profile-goals\"\n            style={{ borderBottom: \"1px solid transparent\" }}\n          >\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{\n                color: \"#72777B\",\n                textTransform: \"uppercase\",\n              }}\n            >\n              <T>challenge_profile.comments</T>\n            </div>\n            {allComments.map((c) => (\n              <div className=\"comment-container\">\n                <div className=\"comment-container-c1 font-paragraph-white\">\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\n                  <div className=\"comment-container-c2 font-paragraph-white\">\n                    {c.text}\n                  </div>\n                </div>\n\n                <div\n                  className=\"font-paragraph-white comment-container-c3\"\n                  style={{ color: \"#82868b\" }}\n                >\n                  {moment(c.createdAt).format(\"MMM, Do YY\")}\n                </div>\n              </div>\n            ))}\n            {localStorage.getItem(\"jwtToken\") && (\n              <>\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    value={commentText}\n                    onChange={(e) => setCommentText(e.target.value)}\n                  />\n                </div>\n                {commentButtonLoading ? (\n                  <LoadingOutlined\n                    style={{\n                      color: \"#ff7700\",\n                      fontSize: \"30px\",\n                      marginTop: \"10px\",\n                    }}\n                  />\n                ) : (\n                  <button\n                    className=\"common-transparent-button font-paragraph-white\"\n                    onClick={postCommentToBackend}\n                    style={{\n                      color: \"#ff7700\",\n                      borderColor: \"#ff7700\",\n                      marginTop: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <T>common.postComment</T>\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <ChallengeCompleteModal\n        visible={finishChallengePopupVisible}\n        setVisible={setFinishChallengePopupVisible}\n        challengeId={props.match.params.id}\n        challenge={challenge}\n        points={50}\n        fetchData={fetchData}\n      />\n      <ReplaceFreeChallengePopup\n        challenge={challenge}\n        visible={replaceFreeChallengePopupVisible}\n        setVisible={setReplaceFreeChallengePopupVisible}\n        fetchData={fetchData}\n      />\n\n      {/* <Footer /> */}\n    </div>\n  );\n}\n\nexport default withRouter(ChallengeProfile);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\MagazineArticle.js",["800","801","802"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/magazineArticle.css\";\nimport \"../assets/trainerprofile.css\";\nimport \"../assets/home.css\";\nimport \"../assets/challengeProfile.css\";\nimport \"../assets/recipeProfile.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Avatar, Input } from \"antd\";\nimport { UserOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport moment from \"moment\";\nimport { withRouter } from \"react-router-dom\";\nimport { addBlogComment, getBlogById } from \"../services/blogs\";\nimport {\n  FacebookShareButton,\n  LinkedinShareButton,\n  PinterestShareButton,\n  TwitterShareButton,\n  PinterestIcon,\n  TwitterIcon,\n  LinkedinIcon,\n  FacebookIcon,\n} from \"react-share\";\nimport slug from \"elegant-slug\";\nimport { Helmet } from \"react-helmet\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n{\n  /* todo later */\n}\n// import ReactHtmlParser from \"react-html-parser\";\n\n// import ModalVideo from \"react-modal-video\";\n\nfunction MagazineArticle(props) {\n  const { language, updateLanguage } = useContext(LanguageContext);\n  const [blogInfo, setBlogInfo] = useState({});\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [commentButtonLoading, setCommentButtomLoading] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const [allComments, setAllComments] = useState([]);\n\n  useEffect(() => {\n    fetchInfo();\n  }, [language]);\n\n  const postCommentToBackend = async () => {\n    setCommentButtomLoading(true);\n    const res = await addBlogComment(blogInfo._id, commentText);\n\n    if (res) {\n      setAllComments(res.comments);\n    }\n    setCommentButtomLoading(false);\n    setCommentText(\"\");\n  };\n\n  const fetchInfo = async () => {\n    if (Object.keys(blogInfo).length > 0) {\n      if (blogInfo.language === language) {\n      } else {\n        if (blogInfo.alternativeLanguage) {\n          window.location.href = `${\n            process.env.REACT_APP_FRONTEND_SERVER\n          }/magazine/${slug(blogInfo.alternativeLanguage.title)}/${\n            blogInfo.alternativeLanguage._id\n          }`;\n        }\n      }\n    } else {\n      setLoading(true);\n      const id = props.match.params.id;\n      const res = await getBlogById(id);\n      if (res && res.data) {\n        const d = res.data.blog;\n        setBlogInfo(d);\n        setAllComments(d.comments);\n        updateLanguage(d.language);\n      }\n      setLoading(false);\n    }\n  };\n\n  // eslint-disable-next-line\n\n  return loading ? (\n    <div\n      style={{\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n      }}\n    >\n      <LoadingOutlined\n        style={{\n          color: \"#ff7700\",\n          fontSize: \"65px\",\n        }}\n      />\n    </div>\n  ) : (\n    <div>\n      <Helmet>\n        <title>{`Realchallenge: ${blogInfo.title}`}</title>\n        <meta name=\"description\" content={blogInfo.paragraph} />\n        <meta property=\"og:title\" content={blogInfo.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:description\" content={blogInfo.paragraph} />\n        <meta\n          property=\"og:url\"\n          content={`http://localhost:3001/magazine/${slug(blogInfo.title)}/${\n            blogInfo._id\n          }`}\n        />\n        <meta name=\"author\" content=\"Realchallenge\" />\n      </Helmet>\n      <Navbar />\n      {console.log(`${blogInfo ? blogInfo.featuredImage : \"\"}`)}\n      <div\n        className=\"magazine-article-head\"\n        style={{\n          background: `url(${\n            blogInfo ? blogInfo.featuredImage : \"\"\n          }) no-repeat center center / cover`,\n          backgroundSize: \"cover\",\n        }}\n      ></div>\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"custom\"\n        autoplay\n        isOpen={open}\n        controlsList=\"nodownload\"\n        url={`${blogInfo?.videoLink}`}\n        onClose={() => setOpen(false)}\n      /> */}\n      <div className=\"article-container\">\n        <div className=\"article-container-column1\">\n          <div className=\"article-container-column1-row1 font-paragraph-black\">\n            <Avatar\n              shape=\"square\"\n              size=\"large\"\n              icon={<UserOutlined />}\n              src={`${\n                blogInfo && blogInfo.user ? blogInfo.user.avatarLink : \"\"\n              }`}\n            />{\" \"}\n            {blogInfo && blogInfo.user ? blogInfo.user.username : \"\"}\n          </div>\n          <div\n            className=\"article-container-column1-row1 font-paragraph-black\"\n            style={{ color: \"var(--color-orange)\", padding: \"15px 0\" }}\n          >\n            <T>magazine.share</T>\n\n            <div>\n              <FacebookShareButton\n                url={window.location.href}\n                quote=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\n              >\n                <FacebookIcon\n                  size={32}\n                  round={true}\n                  style={{ marginRight: \"10px\" }}\n                />\n              </FacebookShareButton>\n              <LinkedinShareButton\n                url={window.location.href}\n                title=\"Awesome article at Realchallenge.fit\"\n                summary=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\n              >\n                <LinkedinIcon\n                  size={32}\n                  round={true}\n                  style={{ marginRight: \"10px\" }}\n                />\n              </LinkedinShareButton>\n              <TwitterShareButton\n                url={window.location.href}\n                title=\"Check out this amazing article I found at Realchallenge.fit\"\n              >\n                <TwitterIcon\n                  size={32}\n                  round={true}\n                  style={{ marginRight: \"10px\" }}\n                />\n              </TwitterShareButton>\n              <PinterestShareButton\n                url={window.location.href}\n                media={`${blogInfo.featuredImage}`}\n                description=\"Hi. Please checkout this amazing article I found at realchallenge.fit\"\n              >\n                <PinterestIcon\n                  size={32}\n                  round={true}\n                  style={{ marginRight: \"10px\" }}\n                />\n              </PinterestShareButton>\n            </div>\n          </div>\n        </div>\n        <div className=\"article-container-column2\">\n          <h1 className=\"article-container-column2-heading font-heading-black\">\n            {blogInfo.title}\n          </h1>\n          <div>\n            <span\n              style={{\n                color: \"var(--color-orange)\",\n                marginRight: \"20px\",\n                fontSize: \"1.6rem\",\n              }}\n            >\n              {blogInfo && blogInfo.category ? blogInfo.category.name : \"\"}\n            </span>\n            <span style={{ fontSize: \"1.6rem\" }}>\n              {moment(blogInfo?.createdAt).format(\"LL\")}\n            </span>\n            {/* {console.log(article.articleDate)} */}\n          </div>\n          {/* <h1 className=\"font-subheading-black\">{article.articleSubheading}</h1> */}\n          <span\n            onClick={() => setOpen(true)}\n            style={{ color: \"var(--color-orange)\", cursor: \"pointer\" }}\n          >\n            Video Link To This Article\n          </span>\n          <p className=\"font-paragraph-black\" style={{ fontSize: \"1.8rem\" }}>\n            {/* todo later */}\n            {/* {ReactHtmlParser(blogInfo?.paragraph)} */}\n          </p>\n\n          {/* comments */}\n          <div\n            className=\"trainer-profile-goals\"\n            style={{\n              borderBottom: \"1px solid transparent\",\n              backgroundColor: \"#e1e9f2\",\n              padding: \"10px\",\n            }}\n          >\n            <div\n              className=\"trainer-profile-goals-heading font-paragraph-white\"\n              style={{\n                color: \"#72777B\",\n                textTransform: \"uppercase\",\n              }}\n            >\n              <T>challenge_profile.comments</T>\n            </div>\n            {allComments.map((c) => (\n              <div className=\"comment-container\">\n                <div className=\"comment-container-c1 font-paragraph-black\">\n                  <Avatar src={c.user.avatarLink} shape=\"square\" />{\" \"}\n                  <span style={{ marginLeft: \"5px\" }}>{c.user.username}</span>\n                  <div className=\"comment-container-c2 font-paragraph-black\">\n                    {c.text}\n                  </div>\n                </div>\n\n                <div\n                  className=\"font-paragraph-white comment-container-c3\"\n                  style={{ color: \"#82868b\" }}\n                >\n                  {moment(c.createdAt).format(\"MMM, Do YYYY\")}\n                </div>\n              </div>\n            ))}\n            {localStorage.getItem(\"jwtToken\") && (\n              <>\n                <div\n                  className=\"trainer-profile-goals-container\"\n                  style={{ marginTop: \"10px\" }}\n                >\n                  <Input.TextArea\n                    rows={4}\n                    value={commentText}\n                    onChange={(e) => setCommentText(e.target.value)}\n                  />\n                </div>\n                {commentButtonLoading ? (\n                  <LoadingOutlined\n                    style={{\n                      color: \"#ff7700\",\n                      fontSize: \"30px\",\n                      marginTop: \"10px\",\n                    }}\n                  />\n                ) : (\n                  <button\n                    className=\"common-transparent-button font-paragraph-white\"\n                    onClick={postCommentToBackend}\n                    style={{\n                      color: \"#ff7700\",\n                      borderColor: \"#ff7700\",\n                      marginTop: \"10px\",\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <T>common.postComment</T>\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n          {/* comments */}\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default withRouter(MagazineArticle);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ChallengePlayer.js",["803","804","805","806"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport \"../assets/challengePlayer.css\";\nimport Player from \"../components/Player/Player\";\nimport HelpPopupPlayer from \"../components/Player/HelpPopupPlayer\";\n\nimport {\n  playerStateContext,\n  exerciseWorkoutTimeTrackContext,\n} from \"../contexts/PlayerState\";\nimport PlayerVideoBrowser from \"../components/Player/PlayerVideoBrowser\";\nimport { withRouter } from \"react-router-dom\";\n// import BreakTimer from \"../components/Player/BreakTimer\";\n\nimport {\n  getMusicByChallengeId,\n  getWorkoutById,\n} from \"../services/createChallenge/main\";\nimport { Link } from \"react-router-dom\";\nimport { v4 } from \"uuid\";\nimport {\n  getChallengeProgress,\n  getUserProfileInfo,\n  saveChallengeProgress,\n} from \"../services/users\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { checkUser } from \"../services/authentication\";\nimport BackButton from \"../assets/icons/Back-button.png\";\nimport FileIcon from \"../assets/icons/file-icon.png\";\nimport DumbbellIcon from \"../assets/icons/Dumbell-icon.png\";\nimport ShopIcon from \"../assets/icons/shoppingbag-icon.png\";\nimport useWindowDimensions from \"../helpers/useWindowDimensions\";\nimport WorkoutCompleteModal from \"../components/Challenge/WorkoutCompleteModal\";\nimport { T } from \"../components/Translate\";\n\nfunction ChallengePlayer(props) {\n  // for non-rendered workouts\n\n  const [loading, setLoading] = useState(false);\n  const [workout, setWorkout] = useState({});\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [customerDetails, setCustomerDetails] = useState(\"\");\n  const [currentExercise, setCurrentExercise] = useState({\n    exercise: {},\n    index: 0,\n    completed: 0,\n  });\n  const [openHelpModal, setOpenHelpModal] = useState(false);\n  const [exerciseForHelpModal, setExerciseForHelpModal] = useState({});\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [finishWorkoutPopupVisible, setFinishWorkoutPopupVisible] =\n    useState(false);\n  const [musics, setMusics] = useState([]);\n  const [savingProgress, setSavingProgress] = useState(false);\n  const [challengeProgress, setChallengeProgress] = useState(null);\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\n    exerciseWorkoutTimeTrackContext\n  );\n  const { height, width } = useWindowDimensions();\n\n  useEffect(() => {\n    checkUser(\n      userInfo,\n      setUserInfo,\n      localStorage.getItem(\"jwtToken\"),\n      props.history\n    );\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    const workoutId = props.match.params.workoutId;\n    const challengeId = props.match.params.challengeId;\n    // console.log(challengeId);\n    let res = await getWorkoutById(workoutId);\n    // getting challenge progress start:\n    let challengeProgress = await getChallengeProgress(challengeId);\n    if (challengeProgress.data) {\n      setChallengeProgress(challengeProgress.data);\n    }\n    console.log(\"challengeProgress\", challengeProgress);\n    console.log(\"workout\", res);\n    const resExercises =\n      res && res.isRendered\n        ? res.exercises.map((e) => ({\n            break: e.break,\n            createdAt: e.exerciseId.createdAt,\n            exerciseGroupName: e.groupName,\n            exerciseLength: e.exerciseLength,\n            title: e.exerciseId.title,\n            videoURL: e.exerciseId.videoURL,\n            voiceOverLink: e.exerciseId.voiceOverLink,\n            _id: e.exerciseId._id,\n          }))\n        : res.exercises.map((e) => ({\n            title: e.renderedWorkoutExerciseName,\n            videoURL: e.renderedWorkoutExerciseVideo,\n            _id: e._id,\n          }));\n    res.exercises = resExercises;\n    console.log(\"ressssssss\", res);\n    res &&\n      res.introVideoLink &&\n      res.exercises.unshift({\n        break: 5,\n        createdAt: \"\",\n        exerciseGroupName: \"Introduction\",\n        exerciseLength: res.introVideoLength,\n        title: \"Introduction to workout\",\n        videoURL: res.introVideoLink,\n        voiceOverLink: \"\",\n        _id: v4(),\n      });\n\n    const musics = await getMusicByChallengeId(challengeId);\n    const cd = await getUserProfileInfo(userInfo.id);\n\n    if (musics) {\n      setMusics(musics.music);\n    }\n    if (cd) {\n      setCustomerDetails(cd);\n    }\n\n    setWorkout(res);\n    setCurrentExercise({\n      exercise: res.exercises[0],\n      index: 0,\n      completed: 0,\n    });\n    setLoading(false);\n\n    console.log(\"resss\", res);\n    console.log(\"customer details\", customerDetails);\n  };\n\n  const updateTrackChallengeInBackend = async (\n    exercise,\n    completeionRate,\n    workoutCompleted\n  ) => {\n    const cId = props.match.params.challengeId;\n    const wId = props.match.params.workoutId;\n    if (!workoutCompleted) {\n      const p = {\n        currentWorkout: wId,\n        currentExercise: exercise._id,\n        challenge: cId,\n        completedWorkouts: challengeProgress\n          ? challengeProgress.completedWorkouts\n          : [],\n        currentWorkoutCompletionRate: completeionRate,\n        challengeCompleted: false,\n        challengeReview: challengeProgress\n          ? challengeProgress.challengeReview\n          : undefined,\n        challengePointGained: challengeProgress?.challengePointGained,\n      };\n      setSavingProgress(true);\n      await saveChallengeProgress(p, userInfo.id);\n      setSavingProgress(false);\n    } else {\n      const p = {\n        currentWorkout: null,\n        currentExercise: null,\n        challenge: cId,\n        completedWorkouts: challengeProgress\n          ? challengeProgress.completedWorkouts.includes(wId)\n            ? [...challengeProgress.completedWorkouts]\n            : [...challengeProgress.completedWorkouts, wId]\n          : [wId],\n        currentWorkoutCompletionRate: 0,\n        challengeCompleted: false,\n        challengeReview: challengeProgress\n          ? challengeProgress.challengeReview\n          : undefined,\n        challengePointGained: challengeProgress?.challengePointGained,\n      };\n      setSavingProgress(true);\n      await saveChallengeProgress(p, userInfo.id);\n      setSavingProgress(false);\n    }\n  };\n\n  const updateExerciseWorkoutTimer = (type, index) => {\n    if (type === \"next\") {\n      const allExercisesBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\n      const allBreaksBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\n      setExerciseWorkoutTimeTrack((prev) => ({\n        ...prev,\n        current:\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\n      }));\n    }\n\n    if (type === \"prev\") {\n      const allExercisesBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\n      const allBreaksBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\n      setExerciseWorkoutTimeTrack((prev) => ({\n        ...prev,\n        current:\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\n      }));\n    }\n  };\n\n  const moveToNextExercise = (playerProgress) => {\n    if (workout.exercises[currentExercise.index + 1]) {\n      // console.log(\"dasdsa\", currentExercise);\n      const completeionRate = Math.round(\n        ((currentExercise.index + 1) / (workout.exercises.length - 1)) * 100\n      );\n      setCurrentExercise({\n        exercise: workout.exercises[currentExercise.index + 1],\n        index: currentExercise.index + 1,\n        completed: completeionRate,\n      });\n      updateTrackChallengeInBackend(\n        workout.exercises[currentExercise.index + 1],\n        completeionRate,\n        false\n      );\n      updateExerciseWorkoutTimer(\"next\", currentExercise.index + 1);\n      // setPlayerState({ ...playerState, playing: false });\n      return;\n    } else {\n      setPlayerState({ ...playerState, playing: false });\n      setCurrentExercise({\n        exercise: currentExercise.exercise,\n        index: -1,\n        completed: 100,\n      });\n      setFinishWorkoutPopupVisible(true);\n      updateTrackChallengeInBackend(\n        workout.exercises[currentExercise.index + 1],\n        0,\n        true\n      );\n      localStorage.removeItem(\"music-playing\");\n    }\n  };\n\n  const moveToPrevExercise = (playerProgress) => {\n    if (workout.exercises[currentExercise.index - 1]) {\n      // console.log(\"dasdsa\", currentExercise);\n      const completeionRate = Math.round(\n        ((currentExercise.index - 1) / (workout.exercises.length - 1)) * 100\n      );\n      setCurrentExercise({\n        exercise: workout.exercises[currentExercise.index - 1],\n        index: currentExercise.index - 1,\n        completed: completeionRate,\n      });\n      workout.exercises[currentExercise.index - 2] &&\n        updateTrackChallengeInBackend(\n          workout.exercises[currentExercise.index - 1],\n          completeionRate,\n          false\n        );\n      updateExerciseWorkoutTimer(\"prev\", currentExercise.index - 1);\n      // setPlayerState({ ...playerState, playing: true });\n      return;\n    } else {\n      alert(\"nothing on backside\");\n    }\n  };\n\n  const handleCloseExerciseForHelp = () => {\n    setPlayerState({ ...playerState, playing: false, muted: true });\n    setOpenHelpModal(false);\n    setExerciseForHelpModal({});\n    if (\n      localStorage.getItem(\"music-playing\") &&\n      localStorage.getItem(\"music-playing\") === false\n    ) {\n      localStorage.setItem(\"music-playing\", true);\n    }\n  };\n\n  return loading ? (\n    <div className=\"center-inpage\">\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\n    </div>\n  ) : (\n    <div className=\"challenge-player-container\">\n      {/* open help modal */}\n      {openHelpModal && (\n        <HelpPopupPlayer\n          open={openHelpModal}\n          onCancel={handleCloseExerciseForHelp}\n          setOpen={setOpenHelpModal}\n          exercise={exerciseForHelpModal}\n        />\n      )}\n\n      <div className=\"fullplayer-container\">\n        {width > 768 && (\n          <div\n            className=\"challenge-player-container-exercies challenge-player-container-nav\"\n            style={{ marginTop: \"0\" }}\n          >\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <Link\n                to={`/challenge/${props.match.params.challengeName}/${props.match.params.challengeId}`}\n                style={{\n                  color: \"#ff7700\",\n                  // alignSelf: \"flex-start\",\n                  // marginTop: \"10px\",\n                }}\n              >\n                <img\n                  src={BackButton}\n                  alt=\"back-button\"\n                  style={{\n                    cursor: \"pointer\",\n                    marginRight: \"20px\",\n                    height: \"30px\",\n                  }}\n                />\n              </Link>\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                <span\n                  className=\"font-heading-white\"\n                  style={{ fontSize: \"25px\" }}\n                >\n                  {workout.title}\n                </span>\n                <span className=\"font-paragraph-white\">{workout.subtitle}</span>\n              </div>\n            </div>\n            {savingProgress && (\n              <LoadingOutlined\n                style={{\n                  fontSize: \"30px\",\n                  color: \"#ff7700\",\n                  marginRight: \"20px\",\n                }}\n              />\n            )}\n          </div>\n        )}\n\n        <Player\n          moveToNextExercise={moveToNextExercise}\n          moveToPrevExercise={moveToPrevExercise}\n          // musics={workout.musics}\n          nextExerciseTitle={\n            workout.exercises && workout.exercises[currentExercise.index + 1]\n              ? workout.exercises[currentExercise.index + 1].title\n              : \"\"\n          }\n          musics={musics}\n          exercise={currentExercise.exercise}\n          challengePageAddress={`/challenge/${props.match.params.challengeName}/${props.match.params.challengeId}`}\n          // key={currentExercise.exercise._id}\n          // for full screen player video browser\n          workout={workout}\n          setExerciseForHelpModal={setExerciseForHelpModal}\n          setOpenHelpModal={setOpenHelpModal}\n          setCurrentExercise={setCurrentExercise}\n          currentExercise={currentExercise}\n        />\n\n        <PlayerVideoBrowser\n          workout={workout}\n          playerState={playerState}\n          setPlayerState={setPlayerState}\n          setExerciseForHelpModal={setExerciseForHelpModal}\n          setOpenHelpModal={setOpenHelpModal}\n          setCurrentExercise={setCurrentExercise}\n          currentExercise={currentExercise}\n        />\n\n        <div className=\"player-download-stuff\">\n          {workout.infoFile ? (\n            <div className=\"workout-info\">\n              <p\n                className=\"font-paragraph-white\"\n                style={{\n                  color: \"#555A61\",\n                  fontWeight: \"500\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                <T>player.today_woTkout_attachment</T>\n              </p>\n\n              <a href={`${workout.infoFile}`} target=\"_blank\" download>\n                <button className=\"challenge-player-attachment font-paragraph-white\">\n                  <img src={FileIcon} alt=\"\" style={{ marginRight: \"10px\" }} />\n                  {workout.infoTitle ? workout.infoTitle : \"Attachment\"}\n                </button>\n              </a>\n            </div>\n          ) : (\n            \"\"\n          )}\n          {workout.relatedEquipments &&\n            workout.relatedEquipments.length > 0 && (\n              <div className=\"workout-info\">\n                <p\n                  className=\"font-paragraph-white\"\n                  style={{\n                    color: \"#555A61\",\n                    fontWeight: \"500\",\n                    textTransform: \"uppercase\",\n                  }}\n                >\n                  <T>playerTtoday_equipment</T>\n                </p>\n                <div>\n                  {workout.relatedEquipments.map((e) => (\n                    <button\n                      key={e._id}\n                      className=\"challenge-player-attachment font-paragraph-white\"\n                    >\n                      <img\n                        src={DumbbellIcon}\n                        alt=\"\"\n                        style={{ marginRight: \"10px\" }}\n                      />\n                      {e.name}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            )}\n          {workout.relatedProducts && workout.relatedProducts.length > 0 && (\n            <div className=\"workout-info\">\n              <p\n                className=\"font-paragraph-white\"\n                style={{\n                  color: \"#555A61\",\n                  fontWeight: \"500\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                <T>player.related</T>\n              </p>\n              <div>\n                {workout.relatedProducts.map((e) => (\n                  <button\n                    key={e._id}\n                    className=\"challenge-player-attachment font-paragraph-white\"\n                  >\n                    <img\n                      src={ShopIcon}\n                      alt=\"\"\n                      style={{ marginRight: \"10px\" }}\n                    />\n                    {e.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n          <WorkoutCompleteModal\n            finishWorkoutPopupVisible={finishWorkoutPopupVisible}\n            setFinishWorkoutPopupVisible={setFinishWorkoutPopupVisible}\n            challengeId={props.match.params.challengeId}\n            challengeSlug={props.match.params.challengeName}\n            history={props.history}\n          />\n\n          {/* <div className=\"buy-related-products\">\n          <p className=\"font-heading-white\">Related Products</p>\n          {workout.relatedProducts.map((p) => (\n            <div className=\"buy-related-products-p font-paragraph-white\">\n              {p.name}\n            </div>\n          ))}\n          <button className=\"green-button font-paragraph-white\">\n            Buy Products\n          </button>\n        </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(ChallengePlayer);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\HelpCenter.js",["807","808"],"import React, { useState, useEffect, useContext } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { Input, Tag, Card } from \"antd\";\n\nimport \"../assets/helpcenter.css\";\n\nimport { getAllFaqCategories, getAllFaqs } from \"../services/faqs\";\nimport { includes } from \"lodash\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\nconst { CheckableTag } = Tag;\n\nfunction HelpCenter() {\n  const { language } = useContext(LanguageContext);\n  const [selectedCategory, setSelectedCategory] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [filteredQuestion, setFilteredQuestions] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  useEffect(() => {\n    const nC =\n      selectedCategory.length > 0\n        ? questions.filter((q) =>\n            q.category.some((item) => selectedCategory.includes(item))\n          )\n        : questions;\n    setFilteredQuestions(nC);\n  }, [selectedCategory, questions]);\n\n  const fetchData = async () => {\n    const f = await getAllFaqs(language);\n    const c = await getAllFaqCategories(language);\n\n    if (c) {\n      setAllCategories(c.categories);\n    }\n    if (f) {\n      console.log(f.faqs);\n      setQuestions(f.faqs);\n      setFilteredQuestions(f.faqs);\n    }\n    // console.log(f, c);\n  };\n  const onChange = (e) => {\n    console.log(e);\n  };\n\n  const handleCategory = (tag, checked) => {\n    console.log(tag, checked);\n    const nextSelectedTags = checked\n      ? [...selectedCategory, tag._id]\n      : selectedCategory.filter((t) => t !== tag._id);\n    setSelectedCategory(nextSelectedTags);\n  };\n  return (\n    <>\n      <Navbar />\n      <div className=\"helpcenter-container\">\n        <div className=\"helpcenter-top\">\n          <div className=\"helpcenter-top-con\">\n            <h1 className=\"font-heading-white\">\n              <T>helpcenter.howcan</T>\n            </h1>\n            <Input\n              placeholder=\"Type keyword\"\n              className=\"font-paragraph-white\"\n              style={{\n                padding: \"15px\",\n              }}\n              width=\"100%\"\n              allowClear\n              onChange={onChange}\n            />\n            <div style={{ marginTop: \"20px\" }}>\n              <h3 className=\"font-paragraph-white\">\n                <T>helpcenter.sc</T>\n              </h3>\n              <div style={{ paddingTop: \"10px\" }}>\n                {allCategories.map((tag) => (\n                  <CheckableTag\n                    style={{ color: \"white\", fontSize: \"14px\" }}\n                    key={tag._id}\n                    checked={selectedCategory.includes(tag._id)}\n                    onChange={(checked) => handleCategory(tag, checked)}\n                  >\n                    {tag.name}\n                  </CheckableTag>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"helpcenter-questions-container\">\n          {filteredQuestion.map((q) => (\n            <Card className=\"helpcenter-questions-container-card\" key={q._id}>\n              <h1 className=\"font-subheading-black\">{q.question}</h1>\n              <p className=\"font-paragraph-black\" style={{ fontSize: \"15px\" }}>\n                {q.answer}\n              </p>\n            </Card>\n          ))}\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default HelpCenter;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\NewWelcome.js",["809","810"],"import React, { useEffect, useState, useContext } from \"react\";\nimport \"../assets/newWelcome.css\";\nimport { RightOutlined, CheckOutlined, EuroOutlined } from \"@ant-design/icons\";\n\nimport { withRouter, Link, useHistory } from \"react-router-dom\";\n\nimport VerifyUser from \"../components/UserDashboard/VerifyUser\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { selectedChallengeContext } from \"../contexts/PaymentProcessStore\";\nimport { addFreeChallenge } from \"../services/createChallenge/main\";\nimport { T } from \"../components/Translate\";\n\nfunction NewWelcome(props) {\n  const history = useHistory();\n  const userInfo = useContext(userInfoContext)[0];\n  const selectedChallenge = useContext(selectedChallengeContext)[0];\n  const [choosePlan, setChoosenPlan] = useState(\"CHALLENGE_12\");\n\n  useEffect(() => {\n    if (!props.onPricingPage) {\n      if (!localStorage.getItem(\"jwtToken\")) {\n        props.history.push(\"/login\");\n      }\n    }\n  }, []);\n\n  const checkStyle = {\n    color: \"#ff7700\",\n    fontSize: \"2.5rem\",\n    paddingRight: \"0.5rem\",\n  };\n\n  const addFreeChallengeToDashboard = async () => {\n    console.log(selectedChallenge, userInfo);\n    if (selectedChallenge && selectedChallenge.access?.includes(\"FREE\")) {\n      await addFreeChallenge(selectedChallenge);\n      history.push(\"/user/dashboard\");\n      // console.log(\"is free\");\n    } else {\n      // console.log(\"no free\");\n      history.push(\"/user/dashboard\");\n    }\n    // async () => {\n    //   const res = await addChallengeToCustomerDetail(userInfo._id, selectedChallenge._id);\n    //   if(res){\n    //     history.push(\"/user/dashboard\")\n    //   }\n  };\n  const onChoosePlan = () => {\n    console.log(\"here\", choosePlan);\n    localStorage.setItem(\"package-type\", choosePlan);\n    if (localStorage.getItem(\"jwtToken\")) {\n      if (choosePlan === \"CHALLENGE_1\") {\n        props.history.push(\"/all-challenges\");\n      } else {\n        props.history.push(\"/create-payment\");\n      }\n    } else {\n      props.history.push(\"/new\");\n    }\n  };\n  return (\n    <>\n      {props.onPricingPage ? \"\" : <VerifyUser fromNewWelcomeScreen={true} />}\n      {props.onPricingPage ? (\n        \"\"\n      ) : (\n        <div\n          onClick={addFreeChallengeToDashboard}\n          className=\"font-paragraph-white\"\n          style={{\n            color: \"var(--color-orange)\",\n            fontSize: \"20px\",\n            backgroundColor: \"var(--mirage)\",\n            padding: \"10px \",\n            float: \"right\",\n            margin: \"10px 50px 0 0\",\n            cursor: \"pointer\",\n          }}\n        >\n          <T>newWelcome.skip</T> <RightOutlined />\n        </div>\n      )}\n\n      <div\n        className=\"new-welcome-page\"\n        style={{ paddingTop: props.onPricingPage ? \"60px\" : \"10px\" }}\n      >\n        <div className=\"new-welcome-container\">\n          <h1\n            className=\"font-heading-white\"\n            style={{ fontSize: props.onPricingPage ? \"25px\" : \"\" }}\n          >\n            {props.onPricingPage ? <T>pricing.great</T> : \"Welcome\"}\n          </h1>\n          <h3\n            className=\"font-subheading-white\"\n            style={{ fontSize: props.onPricingPage ? \"18px\" : \"\" }}\n          >\n            {props.onPricingPage ? <T>pricing.p</T> : <T>newWelcome.tyfjr</T>}\n          </h3>\n          <p className=\"font-paragraph-white\">\n            <T>newWelcome.getAccess</T>\n          </p>\n          <div className=\"new-welcome-cards\">\n            {/* first card */}\n            <div\n              className=\"new-welcome-card\"\n              onClick={() => setChoosenPlan(\"CHALLENGE_1\")}\n              style={{\n                border:\n                  choosePlan === \"CHALLENGE_1\"\n                    ? \"2px solid #f37720\"\n                    : \"2px solid #2a2f36\",\n              }}\n            >\n              <h2 className=\"font-paragraph-white\">\n                <T>newWelcome.oneTime</T> <br />\n                <T>newWelcome.challenge</T>\n              </h2>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\n              >\n                <T>newWelcome.from</T>{\" \"}\n                <span style={{ fontSize: \"30px\" }}>€29</span> /{\" \"}\n                <T>newWelcome.challenge</T>\n              </span>\n\n              <span\n                className=\"font-paragraph-white\"\n                style={{ color: \"#969696\", textAlign: \"left\" }}\n              >\n                <T>newWelcome.ccfl</T>\n              </span>\n              <ul\n                className=\"features\"\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\n              >\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.nsn</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.billedOnce</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.unlockAll</T>\n                  </span>\n                </li>\n              </ul>\n            </div>\n            {/* second card */}\n            <div\n              className=\"new-welcome-card\"\n              onClick={() => setChoosenPlan(\"CHALLENGE_12\")}\n              style={{\n                border:\n                  choosePlan === \"CHALLENGE_12\"\n                    ? \"2px solid #f37720\"\n                    : \"2px solid #2a2f36\",\n              }}\n            >\n              <h2 className=\"font-paragraph-white\">\n                {\" \"}\n                <T>newWelcome.rs</T>\n              </h2>\n              <span\n                className=\"font-paragraph-white\"\n                style={{\n                  fontSize: \"13px\",\n                  backgroundColor: \"#f37720\",\n                  padding: \"5px\",\n                  width: \"120px\",\n                  fontWeight: \"600\",\n                  alignSelf: \"center\",\n                  marginBottom: \"10px\",\n                }}\n              >\n                <T>newWelcome.saveUpTo</T> 60%\n              </span>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\n              >\n                <span style={{ fontSize: \"30px\" }}>€4.5</span> / WEEK\n              </span>\n\n              <span\n                className=\"font-paragraph-white\"\n                style={{ color: \"#969696\", textAlign: \"left\" }}\n              >\n                12 months plan\n              </span>\n              <ul\n                className=\"features\"\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\n              >\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.uac</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.bm</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.mtg</T>\n                  </span>\n                </li>\n              </ul>\n            </div>\n            {/* third card */}\n            <div\n              className=\"new-welcome-card\"\n              onClick={() => setChoosenPlan(\"CHALLENGE_3\")}\n              style={{\n                border:\n                  choosePlan === \"CHALLENGE_3\"\n                    ? \"2px solid #f37720\"\n                    : \"2px solid #2a2f36\",\n              }}\n            >\n              <h2 className=\"font-paragraph-white\">\n                <T>newWelcome.rs</T>\n              </h2>\n              <span\n                className=\"font-paragraph-white\"\n                style={{\n                  fontSize: \"13px\",\n                  backgroundColor: \"#f37720\",\n                  padding: \"5px\",\n                  width: \"120px\",\n                  fontWeight: \"600\",\n                  alignSelf: \"center\",\n                  marginBottom: \"10px\",\n                }}\n              >\n                <T>newWelcome.saveUpTo</T> 30%\n              </span>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontWeight: \"600\", margin: \"10px\" }}\n              >\n                <span style={{ fontSize: \"30px\" }}>€6</span> /{\" \"}\n                <T>newWelcome.week</T>\n              </span>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ color: \"#969696\", textAlign: \"left\" }}\n              >\n                <T>newWelcome.tmp</T>\n              </span>\n              <ul\n                className=\"features\"\n                style={{ textAlign: \"left\", marginTop: \"20px\" }}\n              >\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.uac</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.bm</T>\n                  </span>\n                </li>\n                <li>\n                  <CheckOutlined style={checkStyle} />\n                  <span className=\"font-paragraph-white\">\n                    <T>newWelcome.mtg</T>\n                  </span>\n                </li>\n              </ul>\n            </div>\n            {/* sadasd */}\n          </div>\n          <div\n            style={{\n              paddingBottom: \"20px\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}\n          >\n            <button\n              className=\"create-payment-check-out font-paragraph-white\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                cursor: \"pointer\",\n                width: \"80%\",\n              }}\n              onClick={onChoosePlan}\n            >\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontWeight: \"600\" }}\n              >\n                <T>newWelcome.choose</T>\n              </span>\n            </button>\n          </div>\n          {props.onPricingPage ? (\n            \"\"\n          ) : (\n            <div style={{ padding: \"20px 0\" }}>\n              <div\n                onClick={addFreeChallengeToDashboard}\n                // to=\n                className=\"font-paragraph-white\"\n                style={{\n                  fontSize: \"20px\",\n                  borderBottom: \"1px solid #fff\",\n                  textDecoration: \"none\",\n                  display: \"inline-block\",\n                  cursor: \"pointer\",\n                }}\n              >\n                <T>newWelcome.dash</T>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"money-back-guarantee font-paragraph-white\">\n          <EuroOutlined /> <T>newWelcome.moneyBack</T>\n        </div>\n      </div>\n\n      {/* cards */}\n    </>\n  );\n}\n\nexport default withRouter(NewWelcome);\n\n// <Link\n// to={{\n//   pathname: \"/create-payment\",\n// }}\n// onClick={() =>\n//   localStorage.setItem(\"package-type\", \"CHALLENGE_1\")\n// }\n// className=\"common-orange-button font-paragraph-white\"\n// style={{\n//   width: \"150px\",\n//   marginBottom: \"10px\",\n//   textAlign: \"center\",\n// }}\n// >\n// Select\n// </Link>\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserProfile.js",["811","812"],"import React, { useState } from \"react\";\nimport \"../assets/trainerprofile.css\";\nimport \"../assets/home.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport { StarOutlined, ForwardOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\n// import \"react-modal-video/scss/modal-video.scss\";\n\nimport ChallengeCard from \"../components/Cards/ChallengeCard\";\nimport { T } from \"../components/Translate\";\n\nfunction UserProfile() {\n  // eslint-disable-next-line\n  const [trainer, setTrainer] = useState({\n    id: 12313123123,\n    name: \"Anton Fekete\",\n    about:\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    avatar:\n      \"https://realchallenge.fit/wp-content/uploads/2020/05/Nadine-de-Ruiter.jpg\",\n    challenges: [\n      {\n        name: \"Danish challenge\",\n        picture:\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\n        rating: 5,\n      },\n      {\n        name: \"Danish challenge\",\n        picture:\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\n        rating: 5,\n      },\n      {\n        name: \"Englsih challenge\",\n        picture:\n          \"https://realchallenge.fit/wp-content/uploads/2020/05/Didi-photo-1.jpg\",\n        rating: 3,\n      },\n    ],\n  });\n  return (\n    <div>\n      <Navbar />\n      <div className=\"trainer-profile-container\">\n        <div\n          className=\"trainer-profile-container-column1\"\n          style={{ alignItems: \"center\" }}\n        >\n          <div className=\"profile-box\" style={{ margin: 0 }}>\n            <div\n              className=\"profile-box-row1\"\n              style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n              <div className=\"profile-box-row1-avatar\">\n                <img src={trainer.avatar} alt=\"trainer-profile\" />\n              </div>\n              <div className=\"profile-box-row1-information\">\n                <h2 className=\"font-heading-white\">{trainer.name}</h2>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"trainer-profile-container-column2\">\n          <div className=\"trainer-profile-aboutme\">\n            <div\n              className=\"trainer-profile-aboutme-heading font-paragraph-white\"\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\n            >\n              <T>user_profile.about_me</T>\n            </div>\n            <div className=\"trainer-profile-aboutme-container font-paragraph-white\">\n              {trainer.about}\n            </div>\n          </div>\n          <div className=\"trainer-profile-challenges\">\n            <div\n              className=\"trainer-profile-challenges-heading font-paragraph-white\"\n              style={{ color: \"#333b44\", textTransform: \"uppercase\" }}\n            >\n              <T>user_profile.challenges</T>\n            </div>\n            <div className=\"trainer-profile-challenges-container\">\n              {trainer.challenges.map((challenge) => (\n                <Link to={`/trainers/${challenge.id}`}>\n                  <ChallengeCard\n                    picture={challenge.picture}\n                    name={challenge.name}\n                    rating={challenge.rating}\n                  />\n                </Link>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default UserProfile;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\TermsAndCondition.js",["813","814","815","816","817","818"],"import React, { useContext, useEffect } from \"react\";\nimport { Card } from \"antd\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n// import FileViewer from \"react-file-viewer\";\nimport PrivacyPolicyDocument from \"../assets/documents/Terms and Conditions - Real Challenge.docx\";\nimport PrivacyPolicyDocumentDutch from \"../assets/documents/Algemene Voorwaarden - Real Challenge.docx\";\nimport { T } from \"../components/Translate\";\n\nconst bodyStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  height: \"115vh\",\n  paddingTop: \"50px\",\n  backgroundColor: \"#e1e9f2\",\n};\n\nconst type = \"docx\";\n\nconst onError = (e) => {\n  console.log(e, \"error in file-viewer\");\n};\nfunction TermsAndCondition() {\n  return (\n    <>\n      <Navbar color=\"dark\" />\n      <div style={bodyStyle}>\n        <h1 className=\"font-heading-black privacy-policy-heading\">\n          <T>toc.heading</T>\n        </h1>\n\n        <Card style={{ height: \"650px\" }}>\n          {localStorage.getItem(\"locale\") === \"du\" ? (\n            <div></div>\n          ) : (\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocumentDutch}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n            <div></div>\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocument}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n          )}\n        </Card>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default TermsAndCondition;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\EmailVerificationRedirect.js",["819"],"import React, { useEffect, useState } from \"react\";\nimport { LoadingOutlined, CheckCircleOutlined } from \"@ant-design/icons\";\nimport { withRouter } from \"react-router-dom\";\nimport { verifyEmail } from \"../services/authentication\";\nimport { T } from \"../components/Translate\";\n\n// todo\n// add loading icon that says loading while you send a request to backend with the token from the params. once done redirect to login page.\nfunction EmailVerificationRedirect(props) {\n  const [success, setSuccess] = useState(false);\n  useEffect(() => {\n    verifyEmailSendToken();\n  }, []);\n\n  const verifyEmailSendToken = async () => {\n    const token = props.match.params.token;\n    const res = await verifyEmail(token);\n\n    if (res.success) {\n      if (localStorage.getItem(\"userRecentlySignedUp\")) {\n        setSuccess(true);\n      } else {\n        props.history.push(\"/login\");\n      }\n    }\n    console.log(\"res\", res);\n  };\n\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        transform: \"translate(-50%, -50%)\",\n        textAlign: \"center\",\n      }}\n    >\n      <>\n        {success ? (\n          <CheckCircleOutlined\n            style={{\n              color: \"#ff7700\",\n              fontSize: \"120px\",\n              marginBottom: \"20px\",\n            }}\n          />\n        ) : (\n          <LoadingOutlined\n            style={{\n              color: \"#ff7700\",\n              fontSize: \"120px\",\n              marginBottom: \"20px\",\n            }}\n          />\n        )}\n        <h1\n          className=\"font-heading-black\"\n          style={{ margin: \"0\", padding: \"0\" }}\n        >\n          {success ? (\n            <T>emailVerification.esv</T>\n          ) : (\n            <T>emailVerification.challenge_profile.yourPersonalJourney</T>\n          )}\n        </h1>\n      </>\n    </div>\n  );\n}\n\nexport default withRouter(EmailVerificationRedirect);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\PrivacyPolicy.js",["820","821","822","823","824"],"import React, { useContext, useEffect } from \"react\";\n\nimport { Card } from \"antd\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n// import FileViewer from \"react-file-viewer\";\nimport PrivacyPolicyDocument from \"../assets/documents/Privacy Policy - Real Challenge.docx\";\nimport PrivacyPolicyDocumentDutch from \"../assets/documents/Privacverklaring - Real Challenge.docx\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\nconst bodyStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  height: \"115vh\",\n  paddingTop: \"50px\",\n  backgroundColor: \"#e1e9f2\",\n};\n\nconst type = \"docx\";\n\nconst onError = (e) => {\n  console.log(e, \"error in file-viewer\");\n};\nfunction PrivacyPolicy() {\n  const { language } = useContext(LanguageContext);\n  return (\n    <>\n      <Navbar color=\"dark\" />\n      <div style={bodyStyle}>\n        <h1 className=\"font-heading-black privacy-policy-heading\">\n          <T>privacypolicy.heading</T>\n        </h1>\n\n        <Card style={{ height: \"650px\" }}>\n          {language === \"dutch\" ? (\n            <div></div>\n          ) : (\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocumentDutch}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n            <div></div>\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocument}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n          )}\n        </Card>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default PrivacyPolicy;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\CookiePolicy.js",["825","826","827","828","829"],"import React, { useContext, useEffect } from \"react\";\n\nimport { Card } from \"antd\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\n// import FileViewer from \"react-file-viewer\";\nimport PrivacyPolicyDocument from \"../assets/documents/Cookie Policy - Real Challenge.docx\";\nimport PrivacyPolicyDocumentDutch from \"../assets/documents/Cookiebeleid - Real Challenge.docx\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\n\nconst bodyStyle = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n  width: \"100%\",\n  height: \"115vh\",\n  paddingTop: \"50px\",\n  backgroundColor: \"#e1e9f2\",\n};\n\nconst type = \"docx\";\n\nconst onError = (e) => {\n  console.log(e, \"error in file-viewer\");\n};\nfunction CookiePolicy() {\n  const { language } = useContext(LanguageContext);\n  return (\n    <>\n      <Navbar color=\"dark\" />\n      <div style={bodyStyle}>\n        <h1 className=\"font-heading-black privacy-policy-heading\">\n          <T>cookiepolicy.heading</T>\n        </h1>\n\n        <Card style={{ height: \"650px\" }}>\n          {language === \"dutch\" ? (\n            <div></div>\n          ) : (\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocumentDutch}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n            <div></div>\n            // todo do later\n            // <FileViewer\n            //   fileType={type}\n            //   filePath={PrivacyPolicyDocument}\n            //   // errorComponent={CustomErrorComponent}\n            //   onError={onError}\n            // />\n          )}\n        </Card>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default CookiePolicy;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\ResetNewPassword.js",["830","831"],"import React, { useState } from \"react\";\nimport { Input, Form, Button } from \"antd\";\n\nimport \"../assets/login.css\";\nimport \"../assets/home.css\";\nimport Logo from \"../images/logo.png\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { newPassword } from \"../services/authentication\";\nimport { T } from \"../components/Translate\";\n\nfunction ResetNewPassword() {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n  const { token } = useParams();\n  let history = useHistory();\n\n  const onFinish = async (values) => {\n    setLoading(true);\n    console.log(token);\n    console.log(values);\n    const res = await newPassword(values.password, token, history);\n    setLoading(false);\n    // console.log(res);\n    // console.log(values);\n  };\n\n  const onFinishFailed = (error) => {\n    console.log(error);\n  };\n  return (\n    <div>\n      <div className=\"login-container\">\n        <div className=\"login-container-column1\">\n          <img className=\"login-logo\" src={Logo} alt=\"logo\" />\n          <h1 className=\"font-heading-white\">\n            <T>forgot_password.reset</T>\n          </h1>\n          <Form\n            // form={form}\n            name=\"register\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            layout=\"vertical\"\n          >\n            <div className=\"login-textfield-box\">\n              <Form.Item\n                name=\"password\"\n                label={\n                  <span className=\"font-paragraph-white\">\n                    <T>forgot_password.new</T>\n                  </span>\n                }\n                rules={[\n                  {\n                    required: true,\n                    message: \"Please input your new password!\",\n                  },\n                ]}\n                hasFeedback\n              >\n                <Input.Password />\n              </Form.Item>\n            </div>\n            <div className=\"login-textfield-box\">\n              <Form.Item\n                name=\"confirm\"\n                label={\n                  <span className=\"font-paragraph-white\">\n                    <T>forgot_password.confirmNew</T>\n                  </span>\n                }\n                dependencies={[\"password\"]}\n                hasFeedback\n                rules={[\n                  {\n                    required: true,\n                    message: \"Please confirm your password!\",\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(_, value) {\n                      if (!value || getFieldValue(\"password\") === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(\n                        new Error(\n                          \"The two passwords that you entered do not match!\"\n                        )\n                      );\n                    },\n                  }),\n                ]}\n              >\n                <Input.Password />\n              </Form.Item>\n            </div>\n            {loading ? (\n              <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\n            ) : (\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{\n                  backgroundColor: \"#ff7700\",\n                  border: \"none\",\n                }}\n              >\n                <T>forgot_password.confirmPassReset</T>\n              </Button>\n            )}\n          </Form>\n        </div>\n\n        <div className=\"login-container-column2\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default ResetNewPassword;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\AdminDashboard.js",["832","833","834","835","836"],"import React, { useContext, useEffect, useState } from \"react\";\nimport \"../assets/adminDashboard.css\";\nimport Logo from \"../images/logo_orange.png\";\nimport { Avatar, Popover, Layout, Menu, Modal, Button } from \"antd\";\nimport {\n  UserOutlined,\n  CaretDownOutlined,\n  ShopOutlined,\n  NotificationOutlined,\n  AuditOutlined,\n  FolderViewOutlined,\n  VideoCameraAddOutlined,\n  UserAddOutlined,\n  InsertRowBelowOutlined,\n  CoffeeOutlined,\n  ControlOutlined,\n  QuestionCircleOutlined,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { VFSBrowser } from \"../components/Admin/MediaManager/MediaManager\";\nimport AllChallenges from \"../components/Admin/ChallengeManager/AllChallenges\";\nimport NewChallenge from \"../components/Admin/ChallengeManager/NewChallenge\";\nimport AllExercises from \"../components/Admin/ExerciseManager/AllExercises\";\nimport NewExercise from \"../components/Admin/ExerciseManager/NewExercise\";\nimport NewUser from \"../components/Admin/UserManager/NewUser\";\nimport AllUsers from \"../components/Admin/UserManager/AllUsers\";\nimport AllProducts from \"../components/Admin/ShopManager/AllProducts\";\nimport NewProduct from \"../components/Admin/ShopManager/NewProduct\";\nimport AllRecipes from \"../components/Admin/RecipeManager/AllRecipes\";\nimport NewRecipe from \"../components/Admin/RecipeManager/NewRecipe\";\nimport AllBlogs from \"../components/Admin/BlogManager/AllBlogs\";\nimport NewBlog from \"../components/Admin/BlogManager/NewBlog\";\nimport AllMemberships from \"../components/Admin/MembershipManager/AllMemberships\";\nimport NewMembership from \"../components/Admin/MembershipManager/NewMembership\";\nimport AllCoupons from \"../components/Admin/Coupons/AllCoupons\";\nimport NewCoupon from \"../components/Admin/Coupons/NewCoupon\";\nimport AllPosts from \"../components/Admin/PostsManager/AllPosts\";\n\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { logoutUser } from \"../services/authentication\";\nimport UpdateChallenge from \"../components/Admin/ChallengeManager/UpdateChallenge\";\nimport NewPost from \"../components/Admin/PostsManager/NewPost\";\nimport AllFaqs from \"../components/Admin/FaqManager/AllFaqs\";\nimport NewFaq from \"../components/Admin/FaqManager/NewFaq\";\nimport AllRequests from \"../components/Admin/RequestManager/AllRequests\";\nimport { T } from \"../components/Translate\";\nimport LanguageSelector from \"../components/LanguageSelector/LanguageSelector\";\n\nconst { Sider } = Layout;\nconst { SubMenu } = Menu;\n\nfunction AdminDashboard(props) {\n  // eslint-disable-next-line\n  const [adminInfo, setAdminInfo] = useContext(userInfoContext);\n  const [currentSelection, setCurrentSelection] = useState(1);\n  const [selectedChallengeForUpdate, setSelectedChallengeForUpdate] = useState(\n    {}\n  );\n  const content = (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Link to=\"/user/profile\" className=\"font-paragraph-white\">\n        <T>admin.profile_setting</T>\n      </Link>\n      <Link\n        className=\"font-paragraphw-white hover-orange\"\n        onClick={() => logoutUser(props.history, setAdminInfo)}\n      >\n        <T>admin.logout</T>\n      </Link>\n    </div>\n  );\n\n  function showConfirm(newPath) {\n    Modal.confirm({\n      title: (\n        <p className=\"font-paragraph-white\">\n          Are you sure, you want to leave before saving? All your progress will\n          be lost\n        </p>\n      ),\n      icon: null,\n      onOk() {\n        // console.log(\"OK\");\n        setCurrentSelection(newPath);\n      },\n      onCancel() {\n        console.log(\"Cancel\");\n      },\n    });\n  }\n\n  const checkBeforeMoving = (newLocation) => {\n    if (\n      currentSelection === 1.2 ||\n      currentSelection === 2.2 ||\n      currentSelection === 4.2 ||\n      currentSelection === 5.2 ||\n      currentSelection === 6.2 ||\n      currentSelection === 7.2 ||\n      currentSelection === 8.2 ||\n      currentSelection === 9.2 ||\n      currentSelection === 10.2 ||\n      currentSelection === 11.2\n    ) {\n      // alert(\"Are you sure you wanna do that pussy?\");\n      showConfirm(newLocation);\n      // setCurrentSelection(newLocation);\n    } else {\n      setCurrentSelection(newLocation);\n    }\n  };\n\n  useEffect(() => {\n    // get query params\n    const queryParams = new URLSearchParams(props.location.search);\n    const selectedTab = queryParams.get(\"tab\");\n    if (selectedTab && selectedTab === \"new-exercise\") {\n      setCurrentSelection(5.2);\n    }\n    if (selectedTab && selectedTab === \"update-exercise\") {\n      setCurrentSelection(5.1);\n    }\n  }, []);\n\n  const goToNewDashboard = () => {\n    props.history.push(\"/admin/v2/dashboard\");\n  };\n  return (\n    <>\n      {/* admin navbar */}\n      <div className=\"admin-dashboard-navbar\">\n        <div>\n          <Link to=\"/admin/dashboard\" className=\"navbar-logo\">\n            <img src={Logo} alt=\"logo\" className=\"logo small-screenlogo\" />\n          </Link>\n        </div>\n\n        <div className=\"loggedin-nav-userinfo\" style={{ width: \"250px\" }}>\n          <div style={{ marginRight: \"20px\" }}>\n            {\" \"}\n            <LanguageSelector />\n          </div>\n          <Avatar\n            shape=\"square\"\n            src={adminInfo.avatar}\n            icon={<UserOutlined />}\n          />\n          <Popover placement=\"bottom\" content={content} trigger=\"click\">\n            <div className=\"loggedin-nav-name font-paragraph-white\">\n              <span>\n                {adminInfo.username} <CaretDownOutlined />\n              </span>\n            </div>\n          </Popover>\n        </div>\n      </div>\n      {/* admin sidebar */}\n      {/* admin main container */}\n      <div className=\"admin-dashboard-container\">\n        <Layout style={{ minHeight: \"100vh\" }}>\n          <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            style={{ minHeight: \"150vh\", background: \"var(--color-gray-dark)\" }}\n            onBreakpoint={(broken) => {\n              console.log(broken);\n            }}\n            onCollapse={(collapsed, type) => {\n              console.log(collapsed, type);\n            }}\n          >\n            <div className=\"logo\" />\n            <Menu\n              theme=\"dark\"\n              mode=\"inline\"\n              style={{ backgroundColor: \"var(--color-gray-dark)\" }}\n              defaultSelectedKeys={[\"1\"]}\n            >\n              {/* <Menu.Item\n                key=\"0\"\n                icon={<AuditOutlined />}\n                onClick={() => setCurrentSelection(0)}\n              >\n                <T>admin.requests</T>\n              </Menu.Item> */}\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"trainer\") && (\n                <Button onClick={goToNewDashboard}>Go To New Dashboard</Button>\n              )}\n\n              {adminInfo.role === \"admin\" && (\n                <SubMenu key=\"1\" icon={<ShopOutlined />} title=\"Manage Shop\">\n                  <Menu.Item\n                    key=\"1.1\"\n                    onClick={() => checkBeforeMoving(1.1)}\n                    style={{\n                      backgroundColor:\n                        currentSelection === 1.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 1.1 ? \"#fff\" : \"\",\n                    }}\n                  >\n                    <T>admin.all_products</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"1.2\"\n                    onClick={() => checkBeforeMoving(1.2)}\n                    style={{\n                      backgroundColor:\n                        currentSelection === 1.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 1.2 ? \"#fff\" : \"\",\n                    }}\n                  >\n                    <T>admin.new_product</T>\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {adminInfo.role === \"admin\" && (\n                <Menu.Item\n                  key=\"12\"\n                  icon={<FolderViewOutlined />}\n                  style={{\n                    backgroundColor:\n                      currentSelection === 12\n                        ? \"var(--color-orange)\"\n                        : \"transparent\",\n                    color: currentSelection === 12 ? \"#fff\" : \"\",\n                  }}\n                  onClick={() => checkBeforeMoving(12)}\n                >\n                  Manage Requests\n                </Menu.Item>\n              )}\n              {/* {(adminInfo.role === \"admin\" || adminInfo.role === \"blogger\") && (\n                <SubMenu key=\"2\" icon={<CoffeeOutlined />} title=\"Manage Blogs\">\n                  <Menu.Item\n                    key=\"2.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 2.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 2.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(2.1)}\n                  >\n                    <T>admin.all_blogs</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"2.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 2.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 2.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(2.2)}\n                  >\n                    <T>admin.new_blog</T>\n                  </Menu.Item>\n                </SubMenu>\n              )} */}\n              <Menu.Item\n                key=\"3\"\n                icon={<FolderViewOutlined />}\n                style={{\n                  backgroundColor:\n                    currentSelection === 3\n                      ? \"var(--color-orange)\"\n                      : \"transparent\",\n                  color: currentSelection === 3 ? \"#fff\" : \"\",\n                }}\n                onClick={() => checkBeforeMoving(3)}\n              >\n                <T>admin.media_manager</T>\n              </Menu.Item>\n\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"nutrist\") && (\n                <SubMenu key=\"4\" icon={<CoffeeOutlined />} title=\"Recipes\">\n                  <Menu.Item\n                    key=\"4.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 4.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 4.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(4.1)}\n                  >\n                    <T>admin.all_recipes</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    style={{\n                      backgroundColor:\n                        currentSelection === 4.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 4.2 ? \"#fff\" : \"\",\n                    }}\n                    key=\"4.2\"\n                    onClick={() => checkBeforeMoving(4.2)}\n                  >\n                    <T>admin.new_recipe</T>\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"trainer\") && (\n                <SubMenu key=\"5\" icon={<ControlOutlined />} title=\"Exercises\">\n                  <Menu.Item\n                    key=\"5.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 5.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 5.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(5.1)}\n                  >\n                    All Exercises\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"5.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 5.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 5.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(5.2)}\n                  >\n                    New Exercise\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {(adminInfo.role === \"admin\" || adminInfo.role === \"trainer\") && (\n                <SubMenu\n                  key=\"6\"\n                  icon={<VideoCameraAddOutlined />}\n                  title=\"Challenges\"\n                >\n                  <Menu.Item\n                    key=\"6.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 6.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 6.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(6.1)}\n                  >\n                    <T>admin.all_challenges</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"6.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 6.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 6.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(6.2)}\n                  >\n                    <T>admin.new_challenge</T>\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {adminInfo.role === \"admin\" && (\n                <SubMenu\n                  key=\"7\"\n                  icon={<UserAddOutlined />}\n                  title=\"Manage Users\"\n                >\n                  <Menu.Item\n                    key=\"7.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 7.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 7.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(7.1)}\n                  >\n                    <T>admin.all_users</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"7.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 7.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 7.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(7.2)}\n                  >\n                    <T>admin.new_user</T>\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {adminInfo.role === \"admin\" && (\n                <SubMenu\n                  key=\"8\"\n                  icon={<InsertRowBelowOutlined />}\n                  title=\"Manage Posts\"\n                >\n                  <Menu.Item\n                    key=\"8.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 8.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 8.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(8.1)}\n                  >\n                    All Posts\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"8.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 8.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 8.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(8.2)}\n                  >\n                    New Post\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {/* {adminInfo.role === \"admin\" && (\n                <SubMenu\n                  key=\"9\"\n                  icon={<InsertRowBelowOutlined />}\n                  title=\"Membership\"\n                >\n                  <Menu.Item\n                    key=\"9.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 9.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 9.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(9.1)}\n                  >\n                    <T>admin.all_membership</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"9.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 9.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 9.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(9.2)}\n                  >\n                    <T>admin.new_membership</T>\n                  </Menu.Item>\n                </SubMenu>\n              )} */}\n              {adminInfo.role === \"admin\" && (\n                <SubMenu\n                  key=\"10\"\n                  icon={<NotificationOutlined />}\n                  title=\"Manage Coupons\"\n                >\n                  <Menu.Item\n                    key=\"10.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 10.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 10.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(10.1)}\n                  >\n                    <T>admin.all_coupons</T>\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"10.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 10.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 10.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(10.2)}\n                  >\n                    <T>admin.new_coupons</T>\n                  </Menu.Item>\n                </SubMenu>\n              )}\n              {adminInfo.role === \"admin\" && (\n                <SubMenu\n                  key=\"11\"\n                  icon={<QuestionCircleOutlined />}\n                  title=\"Help Center\"\n                >\n                  <Menu.Item\n                    key=\"11.1\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 11.1\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 11.1 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(11.1)}\n                  >\n                    All Faqs\n                  </Menu.Item>\n                  <Menu.Item\n                    key=\"11.2\"\n                    style={{\n                      backgroundColor:\n                        currentSelection === 11.2\n                          ? \"var(--color-orange)\"\n                          : \"transparent\",\n                      color: currentSelection === 11.2 ? \"#fff\" : \"\",\n                    }}\n                    onClick={() => checkBeforeMoving(11.2)}\n                  >\n                    New Faq\n                  </Menu.Item>\n                </SubMenu>\n              )}\n            </Menu>\n          </Sider>\n          <div className=\"admin-dashboard-container-main\">\n            {currentSelection === 3 && <VFSBrowser />}\n            {currentSelection === 1.1 && <AllProducts />}\n            {currentSelection === 1.2 && <NewProduct />}\n            {/* {currentSelection === 2.1 && <AllBlogs />} */}\n            {/* {currentSelection === 2.2 && (\n              <NewBlog setCurrentSelection={setCurrentSelection} />\n            )} */}\n            {currentSelection === 4.1 && <AllRecipes />}\n            {currentSelection === 4.2 && (\n              <NewRecipe setCurrentSelection={setCurrentSelection} />\n            )}\n            {currentSelection === 5.1 && <AllExercises />}\n            {currentSelection === 5.2 && (\n              <NewExercise\n                setCurrentSelection={setCurrentSelection}\n                home={5.1}\n              />\n            )}\n\n            {currentSelection === 6.1 && (\n              <AllChallenges\n                setSelectedChallengeForUpdate={setSelectedChallengeForUpdate}\n                selectedChallengeForUpdate={selectedChallengeForUpdate}\n                setCurrentSelection={setCurrentSelection}\n                currentSelection={currentSelection}\n              />\n            )}\n            {currentSelection === 6.2 && <NewChallenge />}\n            {currentSelection === 5.3 && (\n              <UpdateChallenge\n                key={\n                  selectedChallengeForUpdate\n                    ? selectedChallengeForUpdate._id\n                    : \"\"\n                }\n                setSelectedChallengeForUpdate={setSelectedChallengeForUpdate}\n                selectedChallengeForUpdate={selectedChallengeForUpdate}\n                setCurrentSelection={setCurrentSelection}\n                currentSelection={currentSelection}\n              />\n            )}\n\n            {currentSelection === 7.1 && <AllUsers />}\n            {currentSelection === 7.2 && (\n              <NewUser setCurrentSelection={setCurrentSelection} home={7.1} />\n            )}\n            {currentSelection === 8.1 && <AllPosts />}\n            {currentSelection === 8.2 && (\n              <NewPost setCurrentSelection={setCurrentSelection} home={8.1} />\n            )}\n            {currentSelection === 9.1 && <AllMemberships />}\n            {currentSelection === 9.2 && <NewMembership />}\n            {currentSelection === 10.1 && <AllCoupons />}\n            {currentSelection === 10.2 && (\n              <NewCoupon\n                setCurrentSelection={setCurrentSelection}\n                home={10.1}\n              />\n            )}\n            {currentSelection === 11.1 && <AllFaqs />}\n            {currentSelection === 11.2 && (\n              <NewFaq setCurrentSelection={setCurrentSelection} home={11.1} />\n            )}\n            {currentSelection === 12 && <AllRequests />}\n          </div>\n        </Layout>\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(AdminDashboard);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\authentication.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserDashboard.js",["837","838","839"],"import React, { useState, useContext, useEffect } from \"react\";\nimport LoggedinNavbar from \"../components/LoggedinNavbar\";\nimport \"../assets/userDashboard.css\";\nimport Nutrient from \"../components/UserDashboard/Nutrient\";\nimport Challenges from \"../components/UserDashboard/Challenges\";\nimport Feed from \"../components/UserDashboard/Feed\";\nimport Community from \"../components/UserDashboard/Community\";\nimport VerifyUser from \"../components/UserDashboard/VerifyUser\";\n\nimport useWindowDimensions from \"../helpers/useWindowDimensions\";\nimport NewsfeedGray from \"../assets/icons/newsfeed-gray.svg\";\nimport NewsfeedOrange from \"../assets/icons/newsfeed-orange.svg\";\nimport FlagOrange from \"../assets/icons/flag-orange.svg\";\nimport FlagGray from \"../assets/icons/flag-gray.svg\";\nimport AvacadoOrange from \"../assets/icons/avacado-orange.svg\";\nimport AvacadoGray from \"../assets/icons/avacado-gray.svg\";\nimport ChatGray from \"../assets/icons/chat-gray.svg\";\nimport ChatOrange from \"../assets/icons/chat-orange.svg\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport {\n  getUserProfileInfo,\n  getRecommandedChallenges,\n  getRecommandedWeeklyDiet,\n  getNotifications,\n} from \"../services/users\";\nimport { T } from \"../components/Translate\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst barIconsStyle = {\n  fontSize: \"20px\",\n  paddingRight: \"10px\",\n};\nfunction UserDashboard() {\n  const history = useHistory();\n  const { language } = useContext(LanguageContext);\n\n  const [current, setCurrent] = useState(\"feed\");\n  const [notifications, setNotifications] = useState([]);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [userProfile, setUserProfile] = useState({});\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\n  const [recommandedWeeklyDiet, setRecommandedWeeklyDiet] = useState([]);\n  const [gender, setGender] = useState(\"\");\n  const { height, width } = useWindowDimensions();\n\n  useEffect(() => {\n    async function fetchNotifications() {\n      try {\n        const res = await getNotifications();\n        setNotifications(res);\n      } catch (error) {\n        console.error(\"Failed to fetch notifications:\", error);\n      }\n    }\n\n    // Fetch notifications immediately and then every 1 minute\n    fetchNotifications();\n    const intervalId = setInterval(fetchNotifications, 60000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [userInfo.id]);\n\n  async function getUserDetails() {\n    try {\n      const res = await getUserProfileInfo(userInfo.id);\n      if (res.customer.customerDetails) {\n        setUserProfile(res.customer.customerDetails);\n      }\n      const rc = await getRecommandedChallenges(userInfo.id, language);\n      const rd = await getRecommandedWeeklyDiet(userInfo.id);\n      const gender = res.customer.gender;\n      setGender(gender);\n      setRecommandedChallenges(rc);\n      setRecommandedWeeklyDiet(rd);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    getUserDetails();\n  }, [current]);\n\n  const markNotificationAsRead = (id, notification) => {\n    history.push(notification.onClick);\n    if (!notifications.notifications) return;\n    // notification is already read\n    if (\n      notifications.notifications.find(\n        (notification) => notification._id === id\n      ).read\n    )\n      return;\n    setNotifications({\n      notifications: notifications.notifications.map((notification) => {\n        if (notification._id === id) {\n          return { ...notification, read: true };\n        }\n        return notification;\n      }),\n      unreadNotifications: notifications.unreadNotifications - 1,\n    });\n    console.log(\"markNotificationAsRead\", id);\n  };\n\n  return (\n    <>\n      <LoggedinNavbar\n        notifications={notifications}\n        markNotificationAsRead={markNotificationAsRead}\n      />\n      {/* verify user email modal */}\n      <VerifyUser />\n      <div style={{ backgroundColor: \"var(--color-gray-dark)\" }}>\n        <div className=\"dashboard-container\">\n          <div className=\"user-dashboard-bar\">\n            <div\n              className={\n                current === \"feed\"\n                  ? `user-dashboard-bar-choosen font-paragraph-white`\n                  : `user-dashboard-bar-choose font-paragraph-white`\n              }\n              style={{ color: \"#677182\", fontWeight: \"800\" }}\n              onClick={() => setCurrent(\"feed\")}\n            >\n              {current === \"feed\" ? (\n                <img\n                  src={NewsfeedOrange}\n                  style={barIconsStyle}\n                  alt=\"feed-orange\"\n                />\n              ) : (\n                <img src={NewsfeedGray} style={barIconsStyle} alt=\"feed-gray\" />\n              )}\n\n              {width > 750 && <T>user_dashboard.news_feed</T>}\n            </div>\n            <div\n              className={\n                current === \"challenges\"\n                  ? `user-dashboard-bar-choosen font-paragraph-white`\n                  : `user-dashboard-bar-choose font-paragraph-white`\n              }\n              style={{ color: \"#677182\", fontWeight: \"800\" }}\n              onClick={() => setCurrent(\"challenges\")}\n            >\n              {current === \"challenges\" ? (\n                <img src={FlagOrange} style={barIconsStyle} alt=\"flag-orange\" />\n              ) : (\n                <img src={FlagGray} style={barIconsStyle} alt=\"flag-gray\" />\n              )}\n              {width > 750 && <T>user_dashboard.challenges</T>}\n            </div>\n            <div\n              className={\n                current === \"nutrient\"\n                  ? `user-dashboard-bar-choosen font-paragraph-white`\n                  : `user-dashboard-bar-choose font-paragraph-white`\n              }\n              style={{ color: \"#677182\", fontWeight: \"800\" }}\n              onClick={() => setCurrent(\"nutrient\")}\n            >\n              {current === \"nutrient\" ? (\n                <img\n                  src={AvacadoOrange}\n                  style={barIconsStyle}\n                  alt=\"food-orange\"\n                />\n              ) : (\n                <img src={AvacadoGray} style={barIconsStyle} alt=\"food-gray\" />\n              )}\n              {width > 750 && <T>user_dashboard.nutrients</T>}\n            </div>\n            <div\n              className={\n                current === \"community\"\n                  ? `user-dashboard-bar-choosen font-paragraph-white`\n                  : `user-dashboard-bar-choose font-paragraph-white`\n              }\n              style={{ color: \"#677182\", fontWeight: \"800\" }}\n              onClick={() => setCurrent(\"community\")}\n            >\n              {current === \"community\" ? (\n                <img src={ChatOrange} style={barIconsStyle} alt=\"chat-orange\" />\n              ) : (\n                <img src={ChatGray} style={barIconsStyle} alt=\"chat-gray\" />\n              )}\n              {width > 750 && <T>user_dashboard.community</T>}\n            </div>\n          </div>\n          <div className=\"user-dashboard-content\">\n            {current === \"feed\" && <Feed userInfo={userInfo} />}\n            {current === \"challenges\" && (\n              <Challenges\n                key={1}\n                userProfile={userProfile}\n                gender={gender}\n                recommandedChal={recommandedChallenges}\n                recommandedWeeklyDiet={recommandedWeeklyDiet}\n              />\n            )}\n            {current === \"nutrient\" && (\n              <Nutrient\n                getUserDetails={getUserDetails}\n                userProfile={userProfile}\n                gender={gender}\n                recommandedWeekDiet={recommandedWeeklyDiet}\n              />\n            )}\n            {current === \"community\" && <Community userInfo={userInfo} />}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UserDashboard;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\Home.js",["840","841","842","843","844","845"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/home.css\";\nimport Navbar from \"../components/Navbar\";\nimport Footer from \"../components/Footer\";\nimport Hero from \"../components/Home/Hero\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport {\n  ArrowRightOutlined,\n  LaptopOutlined,\n  MobileOutlined,\n  TabletOutlined,\n  DesktopOutlined,\n  CheckOutlined,\n  PlayCircleOutlined,\n} from \"@ant-design/icons\";\nimport VideoPhone from \"../images/ipx-video-1024x515.png\";\nimport MobileScreen from \"../images/ipx-dash-515x1024.png\";\n// import ModalVideo from \"react-modal-video\";\n// import \"react-modal-video/scss/modal-video.scss\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { LanguageContext } from \"../contexts/LanguageContext\";\nimport { T } from \"../components/Translate\";\nimport { getAllBlogs } from \"../services/blogs\";\nimport slug from \"elegant-slug\";\n// import ReactHtmlParser from \"react-html-parser\";\n\nfunction Home(props) {\n  const { language } = useContext(LanguageContext);\n  const [isOpen, setOpen] = useState(false);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [allBlogs, setAllBlogs] = useState([]);\n  const [link, setLink] = useState(\"\");\n\n  useEffect(() => {\n    if (userInfo.authenticated) {\n      if (userInfo.role === \"customer\") {\n        props.history.push(\"/user/dashboard\");\n      }\n      if (userInfo.role === \"admin\") {\n        props.history.push(\"/admin/dashboard\");\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchBlogs();\n  }, [language]);\n\n  const fetchBlogs = async () => {\n    // const blogs = await getAllBlogs(language);\n    // if (blogs.blogs) {\n    //   setAllBlogs(blogs.blogs);\n    // }\n  };\n  return (\n    <div>\n      <Navbar />\n      <Hero />\n      {/* video modal */}\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"youtube\"\n        autoplay\n        isOpen={isOpen}\n        videoId={link}\n        onClose={() => setOpen(false)}\n      /> */}\n\n      {/* pick your first goal starts */}\n      <div className=\"home-row-2-outside\">\n        <div className=\"home-row-2\">\n          <div className=\"home-row-2-col-1\">\n            <h3 className=\"home-row-2-col-1-heading font-subheading-white\">\n              <T>home.home-row-2.pick_first</T>\n            </h3>\n            <h2 className=\"home-row-2-col-1-subheading font-heading-white\">\n              <T>home.home-row-2.personal_train</T>\n            </h2>\n            <p className=\"home-text font-paragraph-white\">\n              <T>home.home-row-2.real_challenge_offers</T>\n            </p>\n            <Link className=\"home-button font-paragraph-white\" to=\"/challenges\">\n              <span className=\"home-button-text\">\n                <T>common.accept_the_challenge</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n          </div>\n          <div className=\"home-row-2-col-2\">\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.freedigital_intake</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.success_monitor</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.for_starters</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.free_weekly</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.adapts_to_you</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <ArrowRightOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.8rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-2.motivating</T>\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* pick your first goa ends */}\n      {/* pick your first goal starts */}\n      <div className=\"home-row-3-outside\">\n        <div className=\"home-row-3\">\n          <div className=\"home-row-3-col-1\">\n            {/* box start */}\n            <div className=\"home-row-3-col-1-box goal-1\">\n              <div className=\"home-row-3-col-1-box-textbox\">\n                <h3 className=\"home-row-3-col-1-box-textbox-heading font-subheading-white\">\n                  <T>home.home-row-3.become_fit</T>\n                </h3>\n                <div className=\"home-row-3-col-1-box-textbox-text font-paragraph-white\">\n                  <T>home.home-row-3.stay_active</T>\n                </div>\n              </div>\n            </div>\n            {/* box ends */}\n            {/* box start */}\n            <div className=\"home-row-3-col-1-box goal-2\">\n              <div className=\"home-row-3-col-1-box-textbox\">\n                <h3 className=\"home-row-3-col-1-box-textbox-heading font-subheading-white\">\n                  <T>home.home-row-3.lose_weight</T>\n                </h3>\n                <div className=\"home-row-3-col-1-box-textbox-text font-paragraph-white\">\n                  <T>home.home-row-3.discover_how</T>\n                </div>\n              </div>\n            </div>\n            {/* box ends */}\n            {/* box start */}\n            <div className=\"home-row-3-col-1-box goal-3\">\n              <div className=\"home-row-3-col-1-box-textbox\">\n                <h3 className=\"home-row-3-col-1-box-textbox-heading font-subheading-white\">\n                  <T>home.home-row-3.building_muscles</T>\n                </h3>\n                <div className=\"home-row-3-col-1-box-textbox-text font-paragraph-white\">\n                  <T>home.home-row-3.strong_body</T>\n                </div>\n              </div>\n            </div>\n            {/* box ends */}\n            {/* box start */}\n            <div className=\"home-row-3-col-1-box goal-4\">\n              <div className=\"home-row-3-col-1-box-textbox\">\n                <h3 className=\"home-row-3-col-1-box-textbox-heading font-subheading-white\">\n                  <T>home.home-row-3Tmaster_mindset</T>\n                </h3>\n                <div className=\"home-row-3-col-1-box-textbox-text font-paragraph-white\">\n                  <T>home.home-row-3.think_fit</T>\n                </div>\n              </div>\n            </div>\n            {/* box ends */}\n          </div>\n          <div className=\"home-row-3-col-2\">\n            <h3 className=\"home-row-2-col-1-heading font-subheading-white\">\n              <T>home.home-row-3.pick_your</T>\n            </h3>\n            <h2 className=\"home-row-2-col-1-subheading font-heading-white\">\n              <T>home.home-row-3.dTily_challenges</T>\n              <br /> <T>home.home-row-3.monthly_goals</T>\n            </h2>\n            <p className=\"home-text font-paragraph-white\">\n              <T>home.home-row-3.real_challenge_analyse</T>\n            </p>\n            <div>\n              <Link className=\"home-button\" to=\"/new\">\n                <span className=\"home-button-text\">\n                  <T>common.how_it_works</T> <ArrowRightOutlined />\n                </span>\n              </Link>\n              <Link\n                className=\"home-button-2\"\n                to=\"/how-it-works\"\n                style={{ marginLeft: \"10px\" }}\n              >\n                <span className=\"home-button-text\">\n                  {\" \"}\n                  <T>common.how_it_works</T>\n                </span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* pick your first goa ends */}\n      {/* 4th row */}\n      <div className=\"home-row-4\">\n        <div className=\"home-row-4-heading font-subheading-black\">\n          <T>home.home-row-4.your_change</T>\n        </div>\n        <div\n          className=\"home-row-4-subheading font-heading-black\"\n          style={{ margin: \"20px 0\" }}\n        >\n          <T>home.home-row-4.exercise_whenever</T>\n        </div>\n        <div className=\"home-row-4-text font-paragraph-black\">\n          <T>home.home-row-4.working_out</T>\n        </div>\n        <div className=\"home-row-4-heading-icons\">\n          <LaptopOutlined className=\"home-row-4-heading-icon\" />{\" \"}\n          <TabletOutlined className=\"home-row-4-heading-icon\" />{\" \"}\n          <MobileOutlined className=\"home-row-4-heading-icon\" />{\" \"}\n          <DesktopOutlined className=\"home-row-4-heading-icon\" />\n        </div>\n        <div className=\"home-row-4-heading-mobile\">\n          <img\n            src={VideoPhone}\n            alt=\"video-phone\"\n            className=\"home-row-4-heading-mobile-image\"\n          />\n        </div>\n      </div>\n      {/* 4th row */}\n      {/* 5th row */}\n      <div style={{ backgroundColor: \"#171e27\" }}>\n        <div className=\"home-row-5\">\n          <div className=\"home-row-5-column-1\">\n            <h3 className=\"home-row-2-col-1-heading font-heading-white\">\n              <T>common.how_it_works</T>\n            </h3>\n            <h2 className=\"home-row-2-col-1-subheading font-subheading-white\">\n              <T>home.home-row-5.personal_succ</T>\n            </h2>\n            <p className=\"home-text font-paragraph-white\">\n              {\" \"}\n              <T>home.home-row-5.what</T>\n            </p>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.all_the_tools</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.daily_updates</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.your_personal</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.choose</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.week</T>\n              </span>\n            </div>\n            <div className=\"home-row-2-col-2-box\">\n              <CheckOutlined\n                style={{\n                  color: \"#ff7700\",\n                  fontSize: \"2.5rem\",\n                  paddingRight: \"0.5rem\",\n                }}\n              />\n              <span className=\"home-text font-paragraph-white\">\n                <T>home.home-row-5.comm</T>\n              </span>\n            </div>\n\n            <div style={{ paddingTop: \"20px\" }}>\n              <Link className=\"home-button\" to=\"/new\">\n                <span className=\"home-button-text\">\n                  <T>common.free_intake</T> <ArrowRightOutlined />\n                </span>\n              </Link>\n              <Link\n                className=\"home-button-2\"\n                to=\"/how-it-works\"\n                style={{ marginLeft: \"10px\" }}\n              >\n                <span className=\"home-button-text\">\n                  <T>common.how_it_works</T>\n                </span>\n              </Link>\n            </div>\n          </div>\n          <div className=\"home-row-5-column-2\">\n            <img\n              src={MobileScreen}\n              alt=\"mobile-screen\"\n              className=\"home-row-5-column-2-image\"\n            />\n          </div>\n        </div>\n      </div>\n      {/* 5th row */}\n      {/* 6th row */}\n      <div className=\"home-row-6\">\n        <h1 className=\"home-row-6-heading font-heading-black\">\n          <T>home.home-row-6.we_share_exp</T>\n        </h1>\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\n          <T>home.home-row-6.this_is</T>\n        </p>\n        <div className=\"home-row-6-video-container\">\n          <div\n            className=\"home-row-6-video-container-box home-6-box-1\"\n            style={{ textAlign: \"left\" }}\n            onClick={() => {\n              setLink(\"https://www.youtube.com/embed/jVfuTFgUQEo\");\n              setOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div className=\"home-row-6-text font-paragraph-white\">\n              <PlayCircleOutlined className=\"play-icon\" />{\" \"}\n              <T>home.home-row-6.find_the_right</T>\n            </div>\n          </div>\n          <div\n            className=\"home-row-6-video-container-box home-6-box-2\"\n            style={{ textAlign: \"left\" }}\n            onClick={() => {\n              setLink(\"https://youtu.be/dakFOeZGbO4\");\n              setOpen(true);\n            }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div className=\"home-row-6-text font-paragraph-white\">\n              <PlayCircleOutlined className=\"play-icon\" />{\" \"}\n              <T>home.home-row-6.customized_plan</T>\n            </div>\n          </div>\n          <div\n            className=\"home-row-6-video-container-box home-6-box-3\"\n            onClick={() => {\n              setLink(\"https://youtu.be/0e_0sSkH_dQ\");\n              setOpen(true);\n            }}\n            style={{ textAlign: \"left\" }}\n          >\n            <div className=\"pricing-video-box-overlay\"></div>\n            <div className=\"home-row-6-text font-paragraph-white\">\n              <PlayCircleOutlined className=\"play-icon\" />{\" \"}\n              <T>home.home-row-6.exercise_whenever</T>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* 6th row */}\n      {/* 7th row */}\n      <div className=\"home-row-7\">\n        <div className=\"home-row-7-container\">\n          <div className=\"home-row-7-container-text\">\n            <h2 style={{ fontSize: \"2rem\" }} className=\"font-subheading-black\">\n              <T>home.home-row-7.quit</T>\n            </h2>\n            <h1 style={{ fontSize: \"4.5rem\" }} className=\"font-heading-black\">\n              <T>home.home-row-7.feel</T>\n            </h1>\n            <p\n              style={{ fontSize: \"1.8rem\", paddingBottom: \"10px\" }}\n              className=\"font-paragraph-black\"\n            >\n              <T>home.homeTrow-7.together</T>\n            </p>\n            <Link className=\"home-button\" to=\"/challenges\">\n              <span className=\"home-button-text font-paragraph-white\">\n                <T>common.start_your_challenge_today</T> <ArrowRightOutlined />\n              </span>\n            </Link>\n            <p style={{ paddingTop: \"10px\" }} className=\"font-paragraph-black\">\n              <T>common.price</T>{\" \"}\n              <Link to=\"/how-it-works\" style={{ color: \"#ff7700\" }}>\n                <T>common.how_it_works_small</T>\n              </Link>\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* 7th row */}\n      {/* 8th row */}\n      <div className=\"home-row-6\" style={{ padding: \"100px 50px\" }}>\n        {console.log(allBlogs, \"here\")};\n        <h1 className=\"home-row-6-heading font-heading-black\">\n          <T>home.home-row-8.how</T>\n        </h1>\n        <p style={{ fontSize: \"18px\" }} className=\"font-paragraph-black\">\n          <T>home.home-row-8.be_sure</T>\n        </p>\n        <div className=\"home-row-6-video-container\">\n          {allBlogs.map(\n            (blog, i) =>\n              blog.adminApproved &&\n              blog.isPublic && (\n                <Link\n                  key={i}\n                  to={`/magazine/${slug(blog.title)}/${blog._id}`}\n                  style={{\n                    textAlign: \"left\",\n                    cursor: \"pointer\",\n                    color: \"#171e27\",\n                    padding: \"10px\",\n                    width: \"100%\",\n                  }}\n                >\n                  <div\n                    className=\"magazine-row-2-box\"\n                    style={{ height: \"300px\" }}\n                  >\n                    <div\n                      className=\"home-row-8-blog-container-box home-8-box-1\"\n                      style={{\n                        background: `url(${blog.featuredImage})`,\n                        backgroundPosition: \"center\",\n                        backgroundSize: \"cover\",\n                      }}\n                    ></div>\n                  </div>\n\n                  <div\n                    style={{\n                      color: \"#ff7700\",\n                      textAlign: \"right\",\n                      textTransform: \"uppercase\",\n                    }}\n                  >\n                    {blog?.category?.name}\n                  </div>\n                  <h2\n                    style={{ fontWeight: \"600\" }}\n                    className=\"font-subheading-black\"\n                  >\n                    {blog.title}\n                  </h2>\n                  <p className=\"font-paragraph-black\">\n                    {\" \"}\n                    {/* {ReactHtmlParser(blog?.paragraph)} */}\n                  </p>\n                </Link>\n              )\n          )}\n        </div>\n      </div>\n      {/* 8th row */}\n      {/* 9th row */}\n      <div className=\"home-row-9\">\n        <h1\n          style={{ color: \"#fff\", fontSize: \"4rem\" }}\n          className=\"font-heading-white\"\n        >\n          <T>footer.community</T>\n        </h1>\n        <h2\n          style={{ color: \"#fff\", fontSize: \"2.5rem\" }}\n          className=\"font-subheading-white\"\n        >\n          <T>footer.follow</T>\n        </h2>\n      </div>\n      {/* 9th row */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default withRouter(Home);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\users.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\ChallengeCreator.js",["846","847"],"// ChallengeCreator.js\nimport React from \"react\";\nimport BasicInformation from \"../../components/Admin/V2/Challenge/BasicInformation\";\nimport VideoCreator from \"../../components/Admin/V2/Challenge/VideoCreator\";\nimport {\n  ChallengeProvider,\n  useChallenge,\n} from \"../../contexts/ChallengeCreatorV2\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nfunction ChallengeContent() {\n  const { showVideoCreator } = useChallenge();\n\n  return showVideoCreator ? (\n    <DndProvider backend={HTML5Backend}>\n      <VideoCreator />\n    </DndProvider>\n  ) : (\n    <DndProvider backend={HTML5Backend}>\n      <BasicInformation />\n    </DndProvider>\n  );\n}\n\nfunction ChallengeCreator() {\n  return (\n    <ChallengeProvider>\n      <ChallengeContent />\n    </ChallengeProvider>\n  );\n}\n\nexport default ChallengeCreator;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserUpdate.js",["848","849","850","851","852","853","854","855","856","857","858","859","860"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../assets/userUpdate.css\";\nimport LoggedinNavbar from \"../components/LoggedinNavbar\";\nimport { InputNumber, Upload, Button, Progress, notification } from \"antd\";\nimport HumanVector from \"../images/FreeVectorHumanSilhouette 1.png\";\n// import ImgCrop from \"antd-img-crop\";\n\nimport { getNotifications, getUserProfileInfo } from \"../services/users\";\nimport { userInfoContext } from \"../contexts/UserStore\";\n// import { uploadImage } from \"../services/mediaManager\";\n// icons\nimport Muscle from \"../assets/icons/muscle.png\";\nimport Waist from \"../assets/icons/waist.png\";\nimport HeartRate from \"../assets/icons/heart-rate.png\";\nimport ArrowOneActive from \"../assets/icons/arrow-one-active.png\";\nimport ArrowForward from \"../assets/icons/forward-arrows.png\";\nimport ArrowThreeActive from \"../assets/icons/arrow-three-active.png\";\nimport { createCustomerDetails } from \"../services/customer\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { T } from \"../components/Translate\";\nimport { useHistory } from \"react-router-dom\";\n\nconst iconsStyle = {\n  color: \"var(--color-orange)\",\n  fontSize: \"3rem\",\n  padding: \"5px\",\n  marginRight: \"10px\",\n  backgroundColor: \"var(--color-gray)\",\n};\nconst iconsStyleArrow = {\n  color: \"var(--color-orange)\",\n  height: \"38px\",\n  width: \"40px\",\n  padding: \"10px 5px\",\n  marginRight: \"10px\",\n  backgroundColor: \"var(--color-gray)\",\n};\n\nfunction UserUpdate() {\n  // eslint-disable-next-line\n  const history = useHistory();\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [goal, setGoal] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(\"\");\n  const [metric, setMetric] = useState(true);\n  const [weight, setWeight] = useState(\"\");\n  const [weightArray, setWeightArray] = useState([]);\n  const [height, setHeight] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [bmi, setBmi] = useState(\"\");\n  const [bmr, setBmr] = useState(\"\");\n  const [beforePic, setBeforePic] = useState(\"\");\n  const [afterPic, setAfterPic] = useState(\"\");\n  const [shoulderSize, setShoulderSize] = useState(\"\");\n  const [chestSize, setChestSize] = useState(\"\");\n  const [hipSize, setHipSize] = useState(\"\");\n  const [waistSize, setWaistSize] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [fetchLoading, setFetchLoading] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n\n  const openNotificationWithIcon = (type, message, description) => {\n    notification[type]({\n      message: message,\n      description: description,\n    });\n  };\n\n  const fechUserInfo = async () => {\n    setFetchLoading(true);\n    const month = new Date().getMonth();\n\n    const res = await getUserProfileInfo(userInfo.id);\n    const {\n      goals,\n      currentFitnessLevel,\n      measureSystem,\n      height,\n      age,\n      weight,\n      bmi,\n      bmir,\n      waistSize,\n      shoulderSize,\n      hipSize,\n      chestSize,\n      afterImageLink,\n      beforeImageLink,\n    } = res.customer.customerDetails;\n    setGoal(goals[0]);\n    setCurrentLevel(currentFitnessLevel[0]);\n    setMetric(measureSystem === \"metrics\" ? true : false);\n    setHeight(height);\n    setAge(age);\n    setWeightArray(weight);\n    setWeight(weight[month]);\n    setBmr(bmir);\n    setBmi(bmi);\n    setShoulderSize(shoulderSize);\n    setWaistSize(waistSize);\n    setHipSize(hipSize);\n    setChestSize(chestSize);\n    setAfterPic(afterImageLink);\n    setBeforePic(beforeImageLink);\n    setFetchLoading(false);\n    console.log(\"res\", res);\n  };\n  useEffect(() => {\n    fechUserInfo();\n  }, []);\n\n  const dummyRequest = async ({ file, onSuccess }) => {\n    // const res = await uploadImage(file);\n    // console.log(\"please worl\", res);\n    // setBeforePic(`${process.env.REACT_APP_SERVER}/api${res.file.filelink}`);\n    setBeforePic(file);\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  };\n  const dummyAfterPicRequest = async ({ file, onSuccess }) => {\n    // console.log(file);\n    // const res = await uploadImage(file);\n    // console.log(\"please worl\", res);\n    // setAfterPic(`${process.env.REACT_APP_SERVER}/api${res.file.filelink}`);\n    setAfterPic(file);\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    }, 0);\n  };\n\n  const onChange = (info) => {\n    console.log(info);\n  };\n\n  const saveUserUpdate = async () => {\n    // setLoading(true);\n    // try {\n    //   const savedAfterePic = afterPic\n    //     ? typeof afterPic === \"object\"\n    //       ? await uploadImage(afterPic)\n    //       : afterPic\n    //     : \"\";\n    //   const savedBeforePic = beforePic\n    //     ? typeof beforePic === \"object\"\n    //       ? await uploadImage(beforePic)\n    //       : beforePic\n    //     : \"\";\n    //   const month = new Date().getMonth();\n    //   const w = weightArray;\n    //   w[month] = weight;\n    //   const values = {\n    //     goals: [goal],\n    //     currentFitnessLevel: [currentLevel],\n    //     measureSystem: metric ? \"metrics\" : \"imperial\",\n    //     height,\n    //     age,\n    //     weight: w,\n    //     bmi,\n    //     bmir: bmr,\n    //     waistSize,\n    //     shoulderSize,\n    //     hipSize,\n    //     chestSize,\n    //     afterImageLink:\n    //       typeof savedAfterePic === \"string\"\n    //         ? savedAfterePic\n    //         : savedAfterePic.file.filelink,\n    //     beforeImageLink:\n    //       typeof savedBeforePic === \"string\"\n    //         ? savedBeforePic\n    //         : savedBeforePic.file.filelink,\n    //   };\n    //   await createCustomerDetails(values, userInfo.id);\n    //   setLoading(false);\n    //   openNotificationWithIcon(\"success\", \"Information Updated!\", \"\");\n    //   console.log(\"values to be saved\", values);\n    // } catch (error) {\n    //   console.log(error, \"afterPic\", afterPic, \"beforePic\", beforePic);\n    //   setLoading(false);\n    //   openNotificationWithIcon(\"error\", \"Unable to updated values\", \"\");\n    // }\n  };\n\n  useEffect(() => {\n    async function fetchNotifications() {\n      try {\n        const res = await getNotifications();\n        setNotifications(res);\n      } catch (error) {\n        console.error(\"Failed to fetch notifications:\", error);\n      }\n    }\n\n    // Fetch notifications immediately and then every 1 minute\n    fetchNotifications();\n    const intervalId = setInterval(fetchNotifications, 60000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [userInfo.id]);\n\n  const markNotificationAsRead = (id, notification) => {\n    history.push(notification.onClick);\n    if (!notifications.notifications) return;\n    // notification is already read\n    if (\n      notifications.notifications.find(\n        (notification) => notification._id === id\n      ).read\n    )\n      return;\n    setNotifications({\n      notifications: notifications.notifications.map((notification) => {\n        if (notification._id === id) {\n          return { ...notification, read: true };\n        }\n        return notification;\n      }),\n      unreadNotifications: notifications.unreadNotifications - 1,\n    });\n    console.log(\"markNotificationAsRead\", id);\n  };\n\n  return (\n    <div style={{ backgroundColor: \"var(--color-gray-dark)\" }}>\n      <LoggedinNavbar\n        notifications={notifications}\n        markNotificationAsRead={markNotificationAsRead}\n      />\n\n      <div className=\"user-update-container\">\n        <div className=\"user-update-container-heading font-card-heading\">\n          <T>user_update.update_values</T>\n        </div>\n        <div className=\"user-update-container-box\">\n          <div className=\"user-update-container-box-row1\">\n            <div className=\"user-update-container-box-row1-heading font-card-heading-light\">\n              <T>user_update.your_goals</T>\n            </div>\n            <div className=\"user-update-container-box-row1-inside\">\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setGoal(\"gain-muscle\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    goal === \"gain-muscle\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={Muscle} alt=\"\" style={iconsStyle} />\n                <T>user_update.gain_muscle</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setGoal(\"get-fit\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    goal === \"get-fit\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={HeartRate} alt=\"\" style={iconsStyle} />\n                <T>user_update.get_fit</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setGoal(\"lose-weight\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    goal === \"lose-weight\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={Waist} alt=\"\" style={iconsStyle} />\n                <T>user_update.lose_weight</T>\n              </div>\n            </div>\n          </div>\n          <div className=\"user-update-container-box-row2\">\n            <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\n              <T>user_update.current_fitness</T>\n            </div>\n            <div className=\"user-update-container-box-row2-inside\">\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setCurrentLevel(\"inactive\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    currentLevel === \"inactive\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={ArrowOneActive} alt=\"\" style={iconsStyleArrow} />\n                <T>user_update.inactive</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setCurrentLevel(\"light-active\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    currentLevel === \"light-active\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={ArrowOneActive} alt=\"\" style={iconsStyleArrow} />\n                <T>user_update.light_active</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setCurrentLevel(\"average-active\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    currentLevel === \"average-active\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={ArrowForward} alt=\"\" style={iconsStyleArrow} />\n                <T>user_update.average_active</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setCurrentLevel(\"active\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    currentLevel === \"active\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={ArrowThreeActive} alt=\"\" style={iconsStyleArrow} />\n                <T>user_update.active</T>\n              </div>\n              <div\n                className=\"font-paragraph-white\"\n                onClick={() => setCurrentLevel(\"very-active\")}\n                style={{\n                  padding: \"10px\",\n                  background:\n                    currentLevel === \"very-active\"\n                      ? \"var(--color-gray-light)\"\n                      : \"var(--color-gray-dark)\",\n                }}\n              >\n                {\" \"}\n                <img src={ArrowThreeActive} alt=\"\" style={iconsStyleArrow} />\n                <T>user_update.very_active</T>\n              </div>\n            </div>\n          </div>\n          <div className=\"user-update-container-box-row3\">\n            <div className=\"user-update-container-box-row3-heading font-card-heading-light\">\n              <T>user_update.other_details</T>\n            </div>\n            <div className=\"user-update-container-box-row3-buttons\">\n              <button\n                className=\"font-paragraph-white\"\n                style={{\n                  backgroundColor: metric\n                    ? \"var(--color-orange)\"\n                    : \"var(--color-gray-light)\",\n                }}\n                onClick={() => setMetric(true)}\n              >\n                <T>user_update.metric</T>\n              </button>\n              <button\n                className=\"font-paragraph-white\"\n                style={{\n                  backgroundColor: !metric\n                    ? \"var(--color-orange)\"\n                    : \"var(--color-gray-light)\",\n                }}\n                onClick={() => setMetric(false)}\n              >\n                <T>user_update.imperial</T>\n              </button>\n            </div>\n            <div className=\"user-update-container-box-row3-inside\">\n              <div>\n                <span className=\"font-paragraph-white\">\n                  <T>user_update.weight</T>:{\" \"}\n                </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={weight}\n                  onChange={(e) => setWeight(e)}\n                />\n                <span\n                  className=\"font-paragraph-white\"\n                  style={{ marginLeft: \"5px\" }}\n                >\n                  {metric ? \"kg\" : \"lb\"}{\" \"}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">\n                  <T>user_update.height</T>:\n                </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={height}\n                  onChange={(e) => setHeight(e)}\n                />\n                <span\n                  className=\"font-paragraph-white\"\n                  style={{ marginLeft: \"5px\" }}\n                >\n                  {metric ? \"cm\" : \"ft\"}{\" \"}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">\n                  <T>user_update.age</T>:\n                </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={age}\n                  onChange={(e) => setAge(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">BMI: </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={bmi}\n                  onChange={(e) => setBmi(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">BMR: </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={bmr}\n                  onChange={(e) => setBmr(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">Shoulder Size: </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={shoulderSize}\n                  onChange={(e) => setShoulderSize(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">Chest Size: </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={chestSize}\n                  onChange={(e) => setChestSize(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">Hip Size: </span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={hipSize}\n                  onChange={(e) => setHipSize(e)}\n                />\n              </div>\n              <div>\n                <span className=\"font-paragraph-white\">Waist Size:</span>\n                <InputNumber\n                  className=\"font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"transparent\",\n                    border: \"none\",\n                    borderBottom: \"2px solid var(--color-gray-light)\",\n                    width: \"100px\",\n                  }}\n                  value={waistSize}\n                  onChange={(e) => setWaistSize(e)}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"user-update-uploadimage\">\n            <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\n              <T>user_update.upload_your_pictures</T>\n            </div>\n            <div className=\"user-update-uploadimage-container\">\n              <div className=\"user-update-uploadimage-container-box\">\n                <h3 className=\"font-paragraph-white\">\n                  {\" \"}\n                  <T>user_update.before</T>\n                </h3>\n                <img\n                  src={\n                    typeof beforePic === \"object\"\n                      ? URL.createObjectURL(beforePic)\n                      : typeof beforePic === \"string\" && beforePic.length > 0\n                      ? `${beforePic}`\n                      : HumanVector\n                  }\n                  style={{\n                    height: \"80%\",\n                    padding: \"20px\",\n                    backgroundColor: \"var(--color-gray-light)\",\n                    marginBottom: \"10px\",\n                    marginTop: \"10px\",\n                  }}\n                  alt=\"human-vector\"\n                />\n                {beforePic ? (\n                  <span className=\"font-paragraph-white\">\n                    {/* {beforePic ? beforePic.name : \"\"} */}\n                    <div\n                      className=\"user-image-remove font-paragraph-white\"\n                      onClick={() => setBeforePic(\"\")}\n                    >\n                      <T>user_update.remove</T>\n                    </div>\n                  </span>\n                ) : (\n                  <div></div>\n                  // todo do later\n                  // <ImgCrop rotate>\n                  //   <Upload\n                  //     aspect=\"3/2\"\n                  //     customRequest={dummyRequest}\n                  //     multiple={false}\n                  //     onChange={onChange}\n                  //     showUploadList={false}\n                  //     progress={<Progress type=\"line\" />}\n                  //     // onPreview={onPreview}\n                  //   >\n                  //     <Button\n                  //       className=\"font-paragraph-white hover-orange\"\n                  //       style={{\n                  //         backgroundColor: \"var(--color-gray-light)\",\n                  //         border: \"none\",\n                  //       }}\n                  //     >\n                  //       <T>user_update.upload_before_image</T>\n                  //     </Button>\n                  //   </Upload>\n                  // </ImgCrop>\n                )}\n              </div>\n              <div className=\"user-update-uploadimage-container-box\">\n                <h3 className=\"font-paragraph-white\">\n                  <T>user_update.after</T>\n                </h3>\n                <img\n                  src={\n                    typeof afterPic === \"object\"\n                      ? URL.createObjectURL(afterPic)\n                      : typeof afterPic === \"string\" && afterPic.length > 0\n                      ? `${afterPic}`\n                      : HumanVector\n                  }\n                  style={{\n                    height: \"80%\",\n                    padding: \"20px\",\n                    backgroundColor: \"var(--color-gray-light)\",\n                    marginBottom: \"10px\",\n                    marginTop: \"10px\",\n                  }}\n                  alt=\"human-vector\"\n                />\n                {afterPic ? (\n                  <span className=\"font-paragraph-white\">\n                    {/* {afterPic ? afterPic : \"\"} */}\n                    <div\n                      className=\"user-image-remove font-paragraph-white\"\n                      onClick={() => setAfterPic(\"\")}\n                    >\n                      <T>user_update.remove</T>\n                    </div>\n                  </span>\n                ) : (\n                  <div></div>\n                  // todo do later\n                  // <ImgCrop rotate>\n                  //   <Upload\n                  //     aspect=\"3/2\"\n                  //     customRequest={dummyAfterPicRequest}\n                  //     multiple={false}\n                  //     onChange={onChange}\n                  //     showUploadList={false}\n                  //     progress={<Progress type=\"line\" />}\n                  //     // onPreview={onPreview}\n                  //   >\n                  //     <Button\n                  //       className=\"font-paragraph-white hover-orange\"\n                  //       style={{\n                  //         backgroundColor: \"var(--color-gray-light)\",\n                  //         border: \"none\",\n                  //       }}\n                  //     >\n                  //       <T>user_update.upload_after_image</T>\n                  //     </Button>\n                  //   </Upload>\n                  // </ImgCrop>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {loading ? (\n            <LoadingOutlined style={{ fontSize: \"30px\" }} />\n          ) : (\n            <button\n              className=\"font-paragraph-white\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                padding: \"10px 40px\",\n                border: \"none\",\n                margin: \"20px\",\n                fontSize: \"1.8rem\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => saveUserUpdate(\"save\")}\n            >\n              <T>user_update.save</T>\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default UserUpdate;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\AdminDashboard.js",["861","862","863","864","865","866","867","868","869","870","871","872","873"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"../../assets/trainerprofile.css\";\nimport \"../../assets/adminDashboardV2.css\";\nimport \"../../assets/home.css\";\nimport Navbar from \"../../components/Navbar\";\nimport Footer from \"../../components/Footer\";\nimport { EditFilled, LoadingOutlined } from \"@ant-design/icons\";\nimport { Link, withRouter } from \"react-router-dom\";\n// import ModalVideo from \"react-modal-video\";\n// import \"react-modal-video/scss/modal-video.scss\";\nimport ChallengeCard from \"../../components/Cards/ChallengeCard\";\nimport {\n  addCommentToTrainer,\n  createTrainerGoal,\n  deleteTrainerGoals,\n  getAllTrainerGoals,\n  getTrainerById,\n} from \"../../services/trainers\";\nimport QuoteIcon from \"../../assets/icons/quote-icon.png\";\nimport ChallengeProfileSubtract from \"../../assets/icons/challenge-profile-subtract.svg\";\nimport { Avatar, Button, Input } from \"antd\";\nimport StarFilled from \"../../assets/icons/star-orange.svg\";\nimport StartTransparent from \"../../assets/icons/star-transparent.svg\";\nimport slug from \"elegant-slug\";\nimport { Helmet } from \"react-helmet\";\nimport { T } from \"../../components/Translate\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport { getUsersProfile } from \"../../services/users\";\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\nimport HeartIcon from \"../../assets/icons/heart-icon.svg\";\nimport UploadIcon from \"../../assets/icons/upload-icon.svg\";\nimport DumbBellIcon from \"../../assets/icons/dumb-bell-icon.svg\";\nimport CreateGoalsModal from \"../../components/Admin/V2/Trainer/CreateGoalsModal\";\nimport MediaManager from \"../../components/Admin/V2/MediaManager/MediaManager\";\nimport {\n  getAllChallenges,\n  getAllUserChallenges,\n  getAllUserExercises,\n} from \"../../services/createChallenge/main\";\nimport ModalForEditList from \"../../components/Admin/V2/Common/ModalForEditList\";\nimport ExerciseCreatorPopup from \"./ExerciseCreatorPopup\";\n\nfunction AdminDashboard(props) {\n  const { language } = useContext(LanguageContext);\n  const [open, setOpen] = useState(false);\n  const [adminInfo, setAdminInfo] = useContext(userInfoContext);\n  const [loading, setLoading] = useState(false);\n  const [trainer, setTrainer] = useState({});\n  const [calculatedRating, setCalculatedRating] = useState(0);\n  const [goals, setGoals] = useState([]);\n  const [showTrainerGoalModal, setShowTrainerGoalModal] = useState(false);\n  const [openMediaManager, setOpenMediaManager] = useState(false);\n  const [challenges, setAllChallenges] = useState([]);\n  const [exercises, setAllExercises] = useState([]);\n  const [openExerciseEditListModal, setOpenExerciseEditListModal] =\n    useState(false);\n  const [openChallengeEditListModal, setOpenChallengeEditListModal] =\n    useState(false);\n  const [openExerciseCreatorPopup, setOpenExerciseCreatorPopup] =\n    useState(false);\n  const [selectedExerciseForEdit, setSelectedExerciseForEdit] = useState(null);\n\n  async function fetchTrainerGoals() {\n    const { goals } = await getAllTrainerGoals(language);\n    setGoals(goals);\n  }\n\n  const fetchChallenges = async () => {\n    const { challenges } = await getAllChallenges(language);\n    setAllChallenges(challenges);\n  };\n\n  const fetchExercises = async () => {\n    const { exercises } = await getAllUserExercises(language);\n    setAllExercises(exercises);\n  };\n  async function fetchData(id) {\n    setLoading(true);\n    const { user } = await getUsersProfile();\n    await fetchTrainerGoals();\n    await fetchChallenges();\n    await fetchExercises();\n    await fetchExercises();\n    setTrainer(user);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchData(adminInfo.id);\n  }, [language]);\n\n  const createNewTrainerGoal = async (body) => {\n    await createTrainerGoal(body);\n    await fetchTrainerGoals();\n  };\n\n  const deleteMyTrainerGoals = async (id) => {\n    await deleteTrainerGoals(id);\n  };\n\n  const openNewInterestModal = () => {\n    setShowTrainerGoalModal(true);\n  };\n\n  const goToChallengeCreator = () => {\n    props.history.push(\"/admin/v2/challenge-studio\");\n  };\n  const goToNewExercise = () => {\n    // props.history.push(\"/admin/dashboard?tab=new-exercise\");\n    setOpenExerciseCreatorPopup(true);\n  };\n  const goToEditExercise = (exerciseId) => {\n    const exercise = exercises.find((e) => e._id === exerciseId);\n    setSelectedExerciseForEdit(exercise);\n    setOpenExerciseEditListModal(false);\n    setOpenExerciseCreatorPopup(true);\n  };\n\n  const goToEditChallenge = (challengeId) => {\n    window.open(\n      `/admin/v2/challenge-studio/${challengeId}`,\n      \"_blank\",\n      \"noopener,noreferrer\"\n    );\n  };\n  return loading ? (\n    <div className=\"center-inpage\">\n      <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\n    </div>\n  ) : (\n    <div>\n      <Helmet>\n        <title>{`Realchallenge: ${trainer.firstName}`}</title>\n        <meta name=\"description\" content={trainer.motto} />\n        <meta property=\"og:title\" content={trainer.name} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:description\" content={trainer.motto} />\n        <meta\n          property=\"og:url\"\n          content={`http://localhost:3001/trainer/${slug(trainer.firstName)}/${\n            trainer._id\n          }`}\n        />\n        <meta name=\"author\" content=\"Realchallenge\" />\n      </Helmet>\n      <Navbar />\n      {/* video modal */}\n      {/* todo do later */}\n      {/* <ModalVideo\n        channel=\"custom\"\n        autoplay\n        isOpen={open}\n        controlsList=\"nodownload\"\n        videoId={`${trainer.videoTrailerLink}`}\n        onClose={() => setOpen(false)}\n      /> */}\n      <CreateGoalsModal\n        showTrainerGoalModal={showTrainerGoalModal}\n        setShowTrainerGoalModal={setShowTrainerGoalModal}\n        createTrainerGoal={createNewTrainerGoal}\n        allTrainerGoals={goals}\n        deleteTrainerGoals={deleteMyTrainerGoals}\n        fetchData={fetchTrainerGoals}\n      />\n      <MediaManager open={openMediaManager} setOpen={setOpenMediaManager} />\n      <div className=\"trainer-profile-container\">\n        <div\n          className=\"trainer-profile-container-column1\"\n          style={{\n            background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${\n              process.env.REACT_APP_SERVER\n            }/uploads/${\n              trainer.heroBanner\n                ? trainer.heroBanner.replaceAll(\" \", \"%20\")\n                : \"\"\n            })`,\n            backgroundSize: \"100% 100vh\",\n            backgroundPosition: \"10% 10%\",\n            backgroundRepeat: \"no-repeat\",\n          }}\n        >\n          <div className=\"profile-box\">\n            <div className=\"profile-box-row1\">\n              <div className=\"profile-box-row1-avatar\">\n                <img\n                  src={`${\n                    trainer.avatarLink\n                      ? trainer.avatarLink.replaceAll(\" \", \"%20\")\n                      : \"\"\n                  }`}\n                  alt=\"trainer-profile\"\n                />\n              </div>\n              <div className=\"profile-box-row1-information\">\n                <h2\n                  className=\"font-heading-white\"\n                  style={{ margin: \"0\", padding: \"0\" }}\n                >\n                  {trainer.firstName ? trainer.firstName : \"\"}{\" \"}\n                  {trainer.lastName ? trainer.lastName : \"\"}\n                </h2>\n\n                <div style={{ paddingTop: \"20px\" }}>\n                  <p\n                    className=\"font-paragraph-white\"\n                    style={{ margin: \"0\", padding: \"0\" }}\n                  >\n                    {trainer.country ? trainer.country : \"\"}\n                  </p>\n                  {new Array(calculatedRating ? calculatedRating : 0)\n                    .fill(0)\n                    .map(() => (\n                      <img\n                        src={StarFilled}\n                        alt=\"\"\n                        style={{ height: \"20px\", margin: \"2px\" }}\n                      />\n                    ))}\n                  {new Array(calculatedRating ? 5 - calculatedRating : 5)\n                    .fill(0)\n                    .map(() => (\n                      <img\n                        src={StartTransparent}\n                        alt=\"\"\n                        style={{ height: \"20px\", margin: \"2px\" }}\n                      />\n                    ))}\n                </div>\n                <div>\n                  {/* {new Array(trainer.rating).fill(0).map((e) => (\n                    <StarOutlined\n                      style={{ color: \"#ff7700\", textTransform: \"uppercase\" }}\n                      className=\"challenge-carousel-body-textbox-icons\"\n                    />\n                  ))} */}\n                </div>\n              </div>\n              <div className=\"profile-box-row1-playericon\">\n                <img\n                  src={ChallengeProfileSubtract}\n                  onClick={() => setOpen(true)}\n                />\n              </div>\n            </div>\n            <div className=\"profile-box-row2\">\n              <div className=\"profile-box-row2-quote font-paragraph-white\">\n                <img src={QuoteIcon} alt=\"\" />\n                <span style={{ marginLeft: \"10px\" }}>\n                  {trainer.motto ? trainer.motto : \"\"}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"trainer-profile-container-column2\"\n          style={{\n            background: \"#2a2f37\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            // justifyContent: \"center\",\n          }}\n        >\n          <div className=\"trainer-profile-aboutme\">\n            <div\n              className=\"trainer-profile-aboutme-heading font-paragraph-white\"\n              style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n            >\n              <T>trainer_profile.about_me</T>\n            </div>\n            <div className=\"trainer-profile-aboutme-container font-paragraph-white\">\n              {trainer.bio ? trainer.bio : \"\"}\n            </div>\n          </div>\n\n          <div className=\"adminv2-selector-container\">\n            <div className=\"adminv2-selector\">\n              <h1>\n                <T>adminv2.welcome_trainer</T>\n              </h1>\n              <p>\n                <T>adminv2.create</T>\n              </p>\n              <div\n                className=\"adminv2-select\"\n                onClick={() => setOpenMediaManager(true)}\n              >\n                <img src={HeartIcon} alt=\"heart-icon\" />\n                <p>\n                  <T>adminv2.upload_media</T>\n                </p>\n              </div>\n              <div className=\"adminv2-select\" onClick={goToNewExercise}>\n                <img src={DumbBellIcon} alt=\"upload-icon\" />\n                <p>\n                  <T>adminv2.new_exercise</T>\n                </p>\n              </div>\n              <div className=\"adminv2-select\" onClick={goToChallengeCreator}>\n                <img src={UploadIcon} alt=\"upload-icon\" />\n                <p>\n                  <T>adminv2.create_challenge</T>\n                </p>\n              </div>\n            </div>\n\n            <div className=\"adminv2-selector\">\n              <h1\n                style={{\n                  margin: \"50px 0 40px 0\",\n                }}\n              >\n                <T>adminv2.interests</T>\n              </h1>\n              <div className=\"adminv2-selector-interests\">\n                {goals.map((goal, i) => (\n                  <div className=\"adminv2-selector-interests-interest\" key={i}>\n                    {goal.name}\n                  </div>\n                ))}\n                <Button\n                  className=\"adminv2-interest-button\"\n                  onClick={openNewInterestModal}\n                >\n                  + Add New\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"adminv2-selector-container\">\n            <div\n              className=\"adminv2-selector\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setOpenExerciseEditListModal(true)}\n            >\n              <h1\n                style={{\n                  fontSize: \"22px\",\n                }}\n              >\n                <T>adminv2.my_exercises</T>\n              </h1>\n            </div>\n            <ModalForEditList\n              data={exercises}\n              open={openExerciseEditListModal}\n              setOpen={setOpenExerciseEditListModal}\n              onClickEdit={goToEditExercise}\n              title=\"My Exercises\"\n              subtext=\"Exercise ID\"\n              searchPlaceholder=\"Search by exercise name\"\n              searchKeys={[\"title\"]}\n            />\n          </div>\n\n          <div className=\"adminv2-selector-container\">\n            <div\n              className=\"adminv2-selector\"\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setOpenChallengeEditListModal(true)}\n            >\n              <h1\n                style={{\n                  fontSize: \"22px\",\n                }}\n              >\n                <T>adminv2.my_challenges</T>\n              </h1>\n            </div>\n            <ModalForEditList\n              data={challenges}\n              open={openChallengeEditListModal}\n              setOpen={setOpenChallengeEditListModal}\n              onClickEdit={goToEditChallenge}\n              title=\"My Challenges\"\n              subtext=\"Challenge ID\"\n              searchPlaceholder=\"Search by challenge name\"\n              searchKeys={[\"challengeName\"]}\n            />\n          </div>\n        </div>\n      </div>\n      {/* modaks */}\n      <ExerciseCreatorPopup\n        open={openExerciseCreatorPopup}\n        setOpen={setOpenExerciseCreatorPopup}\n        selectedExerciseForEdit={selectedExerciseForEdit}\n        onSuccess={() => {\n          if (selectedExerciseForEdit) {\n            setSelectedExerciseForEdit(null);\n          }\n          fetchExercises();\n        }}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default withRouter(AdminDashboard);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\UserSetting.js",["874","875","876"],"import React, { useState, useEffect, useContext } from \"react\";\nimport LoggedinNavbar from \"../components/LoggedinNavbar\";\nimport \"../assets/userSetting.css\";\nimport {\n  UserOutlined,\n  MailOutlined,\n  LockOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport { Input } from \"antd\";\nimport moment from \"moment\";\nimport { getNotifications, getUserProfileInfo } from \"../services/users\";\nimport { userInfoContext } from \"../contexts/UserStore\";\nimport { getSubscribtionInformation } from \"../services/payment\";\nimport { logoutUser, resetPassword } from \"../services/authentication\";\nimport { useHistory } from \"react-router\";\nimport { T } from \"../components/Translate\";\n\nconst emailIconStyle = {\n  fontSize: \"5rem\",\n  color: \"var(--color-white)\",\n  padding: \"8px\",\n  backgroundColor: \"var(--color-orange-light)\",\n};\n\nconst passwordIconStyle = {\n  fontSize: \"5rem\",\n  color: \"var(--color-orange-light)\",\n  padding: \"8px\",\n  border: \"1px solid var(--color-orange-light)\",\n};\n\nfunction UserSetting() {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  // const [password, setPassword] = useState(\"\");\n  // const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [membershipDetails, setMembershipDetails] = useState({\n    name: \"\",\n    isValid: true,\n    startTime: new Date(),\n    endTime: new Date(),\n    total: null,\n    status: null,\n    methods: null,\n    date: null,\n  });\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [notifications, setNotifications] = useState([]);\n\n  useEffect(() => {\n    async function fetchNotifications() {\n      try {\n        const res = await getNotifications();\n        setNotifications(res);\n      } catch (error) {\n        console.error(\"Failed to fetch notifications:\", error);\n      }\n    }\n\n    // Fetch notifications immediately and then every 1 minute\n    fetchNotifications();\n    const intervalId = setInterval(fetchNotifications, 60000);\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(intervalId);\n  }, [userInfo.id]);\n\n  const fetchData = async () => {\n    const res = await getUserProfileInfo(userInfo.id);\n    const subInfo =\n      res.customer.mollieId &&\n      (await getSubscribtionInformation(res.customer.mollieId));\n    setUserEmail(res.customer.email);\n    if (res && subInfo && subInfo.response) {\n      const f = JSON.parse(subInfo.response)._embedded.subscriptions[0];\n      setMembershipDetails({\n        name: res.customer.customerDetails.membership[0].name,\n        isValid: res.customer.customerDetails.membership[0].isValid,\n        startTime: res.customer.customerDetails.membership[0].startTime,\n        endTime: res.customer.customerDetails.membership[0].endTime,\n        total: f.amount.value,\n        status: f.status,\n        methods: f.method,\n        date: f.createdAt,\n      });\n    }\n  };\n\n  const updatePasswordButtonClick = async () => {\n    if (email === userEmail) {\n      setLoading(true);\n      const res = await resetPassword(email);\n      console.log(res);\n\n      setLoading(false);\n      logoutUser(history, setUserInfo);\n    } else {\n      alert(\"Please enter valid email address\");\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [userInfo]);\n\n  const markNotificationAsRead = (id, notification) => {\n    history.push(notification.onClick);\n    if (!notifications.notifications) return;\n    // notification is already read\n    if (\n      notifications.notifications.find(\n        (notification) => notification._id === id\n      ).read\n    )\n      return;\n    setNotifications({\n      notifications: notifications.notifications.map((notification) => {\n        if (notification._id === id) {\n          return { ...notification, read: true };\n        }\n        return notification;\n      }),\n      unreadNotifications: notifications.unreadNotifications - 1,\n    });\n    console.log(\"markNotificationAsRead\", id);\n  };\n\n  return (\n    <>\n      <LoggedinNavbar\n        notifications={notifications}\n        markNotificationAsRead={markNotificationAsRead}\n      />\n      <div className=\"user-setting-container\">\n        <div className=\"user-setting-container-heading font-paragraph-white\">\n          <UserOutlined style={{ paddingRight: \"10px\" }} />\n\n          <T>user_setting.account_setting</T>\n        </div>\n        <div className=\"user-setting-container-body\">\n          <div className=\"user-setting-container-body1\">\n            <div className=\"user-setting-container-body1-box\">\n              <MailOutlined style={emailIconStyle} />\n              <div style={{ width: \"100%\", padding: \"10px\" }}>\n                <span className=\"font-paragraph-white\">\n                  Enter Your Email To Update Password\n                </span>\n                <Input\n                  className=\"user-setting-container-body1-box-field font-paragraph-white\"\n                  value={email}\n                  type=\"email\"\n                  onChange={(e) => setEmail(e.target.value)}\n                />\n              </div>\n            </div>\n            {/* <div className=\"user-setting-container-body1-box\">\n              <LockOutlined style={passwordIconStyle} />\n              <div style={{ width: \"100%\", padding: \"10px\" }}>\n                <span className=\"font-paragraph-white\">New Password</span>\n                <Input\n                  className=\"user-setting-container-body1-box-field font-paragraph-white\"\n                  value={password}\n                  type=\"password\"\n                  onChange={(e) => setPassword(e.target.value)}\n                />\n              </div>\n            </div>\n            <div className=\"user-setting-container-body1-box\">\n              <LockOutlined style={passwordIconStyle} />\n              <div style={{ width: \"100%\", padding: \"10px\" }}>\n                <span className=\"font-paragraph-white\">\n                  Confirm New Password\n                </span>\n                <Input\n                  className=\"user-setting-container-body1-box-field font-paragraph-white\"\n                  value={confirmPassword}\n                  type=\"password\"\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                />\n              </div> */}\n            {/* </div> */}\n            <div className=\"user-setting-body1-button-container\">\n              {/* <button\n                className=\"green-button font-paragraph-white\"\n                style={{ marginLeft: \"10px\" }}\n              >\n                {t(\"user_setting.save_email\")}\n              </button> */}\n              {loading ? (\n                <p className=\"font-paragraph-white\">\n                  <LoadingOutlined\n                    style={{ color: \"#fff\", marginRight: \"10px\" }}\n                  />{\" \"}\n                  Sending an password reset link to your email, please wait..\n                </p>\n              ) : (\n                <button\n                  className=\"gray-button font-paragraph-white\"\n                  style={{ marginLeft: \"10px\" }}\n                  onClick={updatePasswordButtonClick}\n                >\n                  <T>user_setting.update_password</T>\n                </button>\n              )}\n            </div>\n          </div>\n          <div className=\"user-setting-container-body2\">\n            <div className=\"user-setting-container-body2-row1\">\n              <div className=\"user-setting-container-body2-row1-column1\">\n                <div className=\"font-paragraph-white\">\n                  <T>user_setting.membership</T>\n                </div>\n              </div>\n              <div className=\"user-setting-container-body2-row1-column2\">\n                <div>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{ fontSize: \"1.8rem\" }}\n                  >\n                    <T>user_setting.subscription</T>\n                  </span>\n                  <span className=\"font-paragraph-white\">\n                    {membershipDetails.name === \"CHALLENGE_12\"\n                      ? \"12 Months Subscribtion Plan\"\n                      : membershipDetails.name === \"CHALLENGE_3\"\n                      ? \"3 Months Subscribtion Plan\"\n                      : \"None\"}\n                  </span>\n                </div>\n                <div>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{ fontSize: \"1.8rem\" }}\n                  >\n                    <T>user_setting.active</T>\n                  </span>\n                  <span className=\"font-paragraph-white\">\n                    {membershipDetails.isValid === \"active\" ||\n                    membershipDetails.name !== \"CHALLENGE_1\"\n                      ? \"Yes\"\n                      : \"No\"}\n                  </span>\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    justifyContent: \"start\",\n                  }}\n                >\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span\n                      className=\"font-paragraph-white\"\n                      style={{ fontSize: \"1.8rem\" }}\n                    >\n                      <T>user_setting.created</T>\n                    </span>\n                    <span className=\"font-paragraph-white\">\n                      {membershipDetails.name === \"CHALLENGE_1\"\n                        ? \"\"\n                        : moment(membershipDetails.startTime).format(\n                            \"DD/MM/YYYY\"\n                          )}\n                    </span>\n                  </div>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginLeft: \"60px\",\n                    }}\n                  >\n                    <span\n                      className=\"font-paragraph-white\"\n                      style={{ fontSize: \"1.8rem\" }}\n                    >\n                      <T>user_setting.expires_on</T>\n                    </span>\n                    <span className=\"font-paragraph-white\">\n                      {membershipDetails.name === \"CHALLENGE_1\"\n                        ? \"\"\n                        : moment(membershipDetails.endTime).format(\n                            \"DD/MM/YYYY\"\n                          )}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"user-setting-container-body2-row2\">\n              <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  {\" \"}\n                  <T>user_setting.date</T>{\" \"}\n                </span>\n                <span>{moment(new Date()).format(\"DD/MM/YYYY\")}</span>\n              </div>\n              <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  {\" \"}\n                  <T>user_setting.methods</T>{\" \"}\n                </span>\n                <span>{membershipDetails.methods}</span>\n              </div>\n              <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  <T>user_setting.total</T>{\" \"}\n                </span>\n                <span>{membershipDetails.total}</span>\n              </div>\n              <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  <T>user_setting.status</T>\n                </span>\n                <span>{membershipDetails.status}</span>\n              </div>\n              <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  <T>user_setting.membership</T>\n                </span>\n                <span>\n                  {moment(membershipDetails.date).format(\"DD/MM/YYYY\")}\n                </span>\n              </div>\n              {/* <div className=\"font-paragraph-white\">\n                <span style={{ fontSize: \"1.8rem\" }}>\n                  {t(\"user_setting.invoice\")}\n                </span>\n                <span>test</span>\n              </div> */}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UserSetting;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\MollieRedirectPage.js",["877"],"import React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { createSubscribtion } from \"../../services/payment\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { addChallengeToCustomerDetail } from \"../../services/customer\";\n\nimport _ from \"lodash\";\n\nfunction MollieRedirectPage(props) {\n  useEffect(() => {\n    createSub();\n  }, []);\n\n  const createSub = async () => {\n    const subObject = localStorage.getItem(\"subObject\");\n    const selectedChallenges = localStorage.getItem(\"selectedChallenges\");\n\n    if (subObject) {\n      console.log(\"retrievedObject: \", JSON.parse(subObject));\n      console.log(\"selectedChallenges:\", JSON.parse(selectedChallenges));\n      const data = JSON.parse(subObject);\n      const res = await createSubscribtion(data);\n      if (res) {\n        const sC = selectedChallenges ? JSON.parse(selectedChallenges) : [];\n        if (sC.length > 0 && !_.isEmpty(sC[0])) {\n          const responses = [];\n          for (var i = 0; i < sC.length; i++) {\n            responses.push(\n              await addChallengeToCustomerDetail(data.id, sC[i]._id)\n            );\n          }\n\n          localStorage.removeItem(\"subObject\");\n          localStorage.removeItem(\"selectedChallenges\");\n          localStorage.removeItem(\"package-type\");\n          props.history.push(\"/user/dashboard\");\n        } else {\n          localStorage.removeItem(\"subObject\");\n          localStorage.removeItem(\"selectedChallenges\");\n          localStorage.removeItem(\"package-type\");\n          props.history.push(\"/user/dashboard\");\n        }\n      }\n      console.log(\"subscribtion respinse\", res);\n    } else {\n      props.history.push(\"/create-payment\");\n    }\n  };\n  return (\n    <div className=\"center-inpage\" style={{ textAlign: \"center\" }}>\n      <LoadingOutlined style={{ fontSize: \"60px\", color: \"#ff7700\" }} />\n      <h1 className=\"font-heading-black\">\n        PLEASE WAIT WHILE WE REDIRECT YOU TO DASHBOARD.\n      </h1>\n    </div>\n  );\n}\n\nexport default withRouter(MollieRedirectPage);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\CreatePayment.js",["878","879","880","881"],"// import React, { useState, useEffect, useContext } from \"react\";\n// import { Link, withRouter } from \"react-router-dom\";\n// import \"../../assets/createPayment.css\";\n// import { useTranslation } from \"react-i18next\";\n// import { createPayment, mollieAuthUser } from \"../../services/payment\";\n// import { getRecommandedChallenges } from \"../../services/users\";\n// import { userInfoContext } from \"../../contexts/UserStore\";\n// import { Scrollbars } from \"react-custom-scrollbars\";\n// import {\n//   FlagOutlined,\n//   LoadingOutlined,\n//   ArrowRightOutlined,\n//   CaretRightOutlined,\n// } from \"@ant-design/icons\";\n// import ForwardIcon from \"../../assets/icons/forward-arrows.png\";\n// import Checkbox from \"antd/lib/checkbox/Checkbox\";\n// import Logo from \"../../images/logo.png\";\n// import { Modal, Input, Divider } from \"antd\";\n// import { selectedChallengeContext } from \"../../contexts/PaymentProcessStore\";\n\n// function CreatePayment(props) {\n//   const [userInfo, setUserInfo] = useContext(userInfoContext);\n//   const [selectedChallenge, setSelectedChallenge] = useContext(\n//     selectedChallengeContext\n//   );\n//   const [showCouponModal, setShowCouponModal] = useState(false);\n//   const [challenges, setChallenges] = useState([]);\n//   const [selectedChallenges, setSelectedChallenges] = useState([]);\n//   const [pack, setPack] = useState(\"\");\n//   const [packInfo, setPackInfo] = useState({\n//     noOfChallenges: \"\",\n//     save: \"\",\n//     price: \"\",\n//     billed: \"\",\n//   });\n\n//   const [loading, setLoading] = useState(false);\n//   const [challengeLoading, setChallengeLoading] = useState(false);\n\n//   useEffect(() => {\n//     const pack = localStorage.getItem(\"package-type\");\n\n//     if (pack === \"CHALLENGE_12\") {\n//       setPackInfo({\n//         noOfChallenges: \"12\",\n//         save: \"40%\",\n//         price: \"19.99\",\n//         billed: \"12\",\n//       });\n//     }\n//     if (pack === \"CHALLENGE_1\") {\n//       setPackInfo({\n//         noOfChallenges: \"1\",\n//         save: \"\",\n//         price: selectedChallenge.price ? selectedChallenge.price : \"\",\n//         billed: \"1\",\n//       });\n//     }\n//     if (pack === \"CHALLENGE_3\") {\n//       setPackInfo({\n//         noOfChallenges: \"3\",\n//         save: \"20%\",\n//         price: \"26.00\",\n//         billed: \"3\",\n//       });\n//     }\n//     setPack(pack.replace(\"_\", \" \"));\n//     selectedChallenge._id &&\n//       setSelectedChallenges([selectedChallenge, ...selectedChallenges]);\n\n//     fetchRecommandedChallenges();\n//   }, []);\n\n//   const fetchRecommandedChallenges = async () => {\n//     console.log(userInfo.id);\n//     setChallengeLoading(true);\n//     const challenges = await getRecommandedChallenges(userInfo.id);\n//     if (challenges) {\n//       const filterFreeChallenges =\n//         challenges.recommendedchallenge &&\n//         challenges.recommendedchallenge.filter(\n//           (c) => !c.access.includes(\"FREE\")\n//         );\n//       console.log(\"filterFreeChallenges\", filterFreeChallenges);\n//       setChallenges(filterFreeChallenges);\n//     }\n//     setChallengeLoading(false);\n//     // console.log(challenges);\n//   };\n\n//   const isChallengeChecked = (d) => {\n//     const checked = selectedChallenges.filter((f) => f._id === d._id);\n//     if (checked.length > 0) {\n//       return true;\n//     } else {\n//       return false;\n//     }\n//   };\n\n//   const addChallengeToArray = (value, d) => {\n//     if (pack === \"CHALLENGE 1\") {\n//       if (value) {\n//         if (selectedChallenges.length < 1) {\n//           !isChallengeChecked(d) &&\n//             setSelectedChallenges([...selectedChallenges, d]);\n//         } else {\n//           alert(\"You can only choose 1 challenges at a single time.\");\n//         }\n//       } else {\n//         const f = isChallengeChecked(d)\n//           ? selectedChallenges.filter((f) => f._id !== d._id)\n//           : selectedChallenges;\n//         setSelectedChallenges(f);\n//       }\n//     } else {\n//       if (value) {\n//         if (selectedChallenges.length <= 2) {\n//           !isChallengeChecked(d) &&\n//             setSelectedChallenges([...selectedChallenges, d]);\n//         } else {\n//           alert(\"You can only choose 3 challenges at a single time.\");\n//         }\n//       } else {\n//         const f = isChallengeChecked(d)\n//           ? selectedChallenges.filter((f) => f._id !== d._id)\n//           : selectedChallenges;\n//         setSelectedChallenges(f);\n//       }\n//     }\n\n//     console.log(value, d);\n//     console.log(\"asdasdasd\", selectedChallenges);\n//   };\n\n//   const sendRequestToMollie = async () => {\n//     setLoading(true);\n//     const pack = localStorage.getItem(\"package-type\");\n//     var data = {\n//       id: userInfo.id,\n//       name: userInfo.username,\n//       email: userInfo.email,\n//       currency: \"EUR\",\n//       value: packInfo.price ? parseFloat(packInfo.price).toFixed(2) : \"\",\n//       description: pack,\n//       redirectUrl: `${process.env.REACT_APP_FRONTEND_SERVER}/mollie/create-subscribtion/redirect`,\n//     };\n//     if (pack === \"CHALLENGE_1\") {\n//       if (selectedChallenges[0]) {\n//         data = {\n//           ...data,\n//           currency:\n//             selectedChallenges[0].currency &&\n//             selectedChallenges[0].currency === \"€\"\n//               ? \"EUR\"\n//               : \"USD\",\n//           value: selectedChallenges[0].price.toFixed(2),\n//         };\n//       } else {\n//         alert(\"Please select the challenge that you want to pay for.\");\n//         setLoading(false);\n//         return;\n//       }\n//     }\n//     console.log(data);\n//     var storeForLaterUse = {\n//       currency: data.currency,\n//       value: data.value,\n//       // times: packInfo.billed,\n//       interval: \"1 month\",\n//       description: pack,\n//     };\n//     const res = await createPayment(data);\n//     setLoading(false);\n//     if (res) {\n//       const link = res._links.checkout.href;\n//       storeForLaterUse = {\n//         ...storeForLaterUse,\n//         custId: res.customerId,\n//         id: userInfo.id,\n//       };\n//       localStorage.setItem(\"subObject\", JSON.stringify(storeForLaterUse));\n//       localStorage.setItem(\n//         \"selectedChallenges\",\n//         JSON.stringify(selectedChallenges)\n//       );\n//       window.location = link;\n//     }\n//     console.log(\"to be\", res);\n//   };\n\n//   const getPackagePaymentInfo = () => (\n//     <div className=\"create-payment-create-payment-info\">\n//       <h1 className=\"create-payment-font-heading-white\">Payment Overview</h1>\n//       <h3 className=\"create-payment-font-subheading-white\">\n//         Selected Package:{\" \"}\n//         {pack === \"CHALLENGE 1\"\n//           ? \"CHALLENGE ONE\"\n//           : pack === \"CHALLENGE 12\"\n//           ? \"CHALLENGE TWELVE\"\n//           : pack === \"CHALLENGE 3\"\n//           ? \"CHALLENGE THREE\"\n//           : \"\"}\n//       </h3>\n//       {pack === \"CHALLENGE 1\" ? (\n//         <div>\n//           <h3 className=\"create-payment-font-subheading-white\">{`Challenge Name: ${\n//             selectedChallenges[0] ? selectedChallenges[0].challengeName : \"-\"\n//           }`}</h3>\n//           <h3 className=\"create-payment-font-heading-white\">{`Total Price: ${\n//             selectedChallenges[0]\n//               ? selectedChallenges[0].currency + selectedChallenges[0].price\n//               : \"-\"\n//           }`}</h3>\n//         </div>\n//       ) : (\n//         <>\n//           <h3 className=\"create-payment-font-subheading-white\">{`Package Price: € ${packInfo.price} / month`}</h3>\n//           {selectedChallenges.length > 0 && (\n//             <div>\n//               <h3 className=\"create-payment-font-subheading-white\">Selected Challenges:</h3>\n\n//               {selectedChallenges.map((s) => (\n//                 <p className=\"create-payment-font-heading-white\">\n//                   <CaretRightOutlined style={{ color: \"#ff7700\" }} />{\" \"}\n//                   {s.challengeName}\n//                 </p>\n//               ))}\n//             </div>\n//           )}\n//           <Divider style={{ borderTop: \"1px solid #171e27\" }} />\n//           <h3 className=\"create-payment-font-heading-white\">{`Total Price: € ${packInfo.price} / month`}</h3>\n//         </>\n//       )}\n//       <div style={{ marginTop: \"30px\" }}>\n//         <button\n//           className=\"create-payment-common-orange-button font-paragraph-white\"\n//           onClick={() => setShowCouponModal(true)}\n//           style={{ marginRight: \"10px\" }}\n//         >\n//           Add Coupon Code\n//         </button>\n//         {loading ? (\n//           <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"35px\" }} />\n//         ) : (\n//           <button\n//             className=\"create-payment-common-orange-button font-paragraph-white\"\n//             onClick={() => sendRequestToMollie()}\n//           >\n//             Checkout <ArrowRightOutlined />\n//           </button>\n//         )}\n//       </div>\n//     </div>\n//   );\n\n//   return (\n//     <>\n//       <Modal\n//         visible={showCouponModal}\n//         onCancel={() => setShowCouponModal(false)}\n//         footer={false}\n//       >\n//         <h1 className=\"create-payment-font-heading-white\">Enter Coupon Code</h1>\n//         <Input />\n//         <button\n//           className=\"create-payment-common-orange-button font-paragraph-white\"\n//           style={{ marginTop: \"10px\" }}\n//         >\n//           Verify Code\n//         </button>\n//       </Modal>\n//       <div className=\"create-payment-create-payment-page\">\n//         <img\n//           src={Logo}\n//           alt=\"real-challenge\"\n//           height=\"50px\"\n//           style={{ marginBottom: \"10px\" }}\n//         />\n//         <div className=\"create-payment-create-payment-container\">\n//           {console.log(\"selected challenges\", selectedChallenges)}\n//           <div className=\"create-payment-create-payment-card\">\n//             <h1 className=\"create-payment-font-heading-white\">\n//               Recommanded Challenges For You\n//             </h1>\n//             <p\n//               className=\"create-payment-font-paragraph-white\"\n//               style={{ marginBottom: \"20px\" }}\n//             >\n//               {`Please select ${\n//                 pack === \"CHALLENGE 1\"\n//                   ? \"1 challenge that you want to get access to.\"\n//                   : \"any 3 challenges that you want to get access to or move on with payment process\"\n//               } `}\n//             </p>\n\n//             <Scrollbars\n//               style={{\n//                 height: \"450px\",\n//                 border: \"2px solid var(--color-orange)\",\n//                 backgroundColor: \"var(--color-gray)\",\n//                 position: \"relative\",\n//               }}\n//             >\n//               {challengeLoading ? (\n//                 <LoadingOutlined\n//                   style={{\n//                     color: \"#ff7700\",\n//                     fontSize: \"55px\",\n//                     padding: \"50px\",\n//                   }}\n//                 />\n//               ) : (\n//                 <div className=\"create-payment-dashboard-challenges-mychallenge-body\">\n//                   {challenges && challenges.length > 0 ? (\n//                     challenges.map((d) => (\n//                       <div\n//                         style={{ display: \"flex\", alignItems: \"center\" }}\n//                         key={d._id}\n//                       >\n//                         <div style={{ width: \"100%\" }}>\n//                           <Link to={`/challenge/${d._id}`}>\n//                             <div\n//                               className=\"create-payment-dashboard-challenges-mychallenge-body-box\"\n//                               style={{\n//                                 background: `url(${process.env.REACT_APP_SERVER}/api${d.thumbnailLink})`,\n//                                 backgroundSize: \"cover\",\n//                                 backgroundPosition: \"50% 50%\",\n//                                 position: \"relative\",\n//                               }}\n//                             >\n//                               {d.difficulty && (\n//                                 <div\n//                                   className=\"create-payment-dashboard-feed-container-card-row2-tag font-paragraph-white\"\n//                                   style={{\n//                                     position: \"absolute\",\n//                                     top: \"0\",\n//                                     left: \"0\",\n//                                   }}\n//                                 >\n//                                   <FlagOutlined\n//                                     style={{ paddingRight: \"2px\" }}\n//                                   />\n//                                   {d.difficulty}\n//                                 </div>\n//                               )}\n//                               <div className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox\">\n//                                 <span className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox-name font-heading-white\">\n//                                   {d.challengeName}\n//                                 </span>\n//                                 <span className=\"create-payment-dashboard-challenges-mychallenge-body-box-insidebox-about font-paragraph-white\">\n//                                   {d.description}\n//                                 </span>\n//                                 <img\n//                                   src={ForwardIcon}\n//                                   style={{ marginTop: \"5px\" }}\n//                                   alt=\"forward\"\n//                                   height=\"15px\"\n//                                   width=\"40px\"\n//                                 />\n//                               </div>\n//                             </div>\n//                           </Link>\n//                         </div>\n//                         {selectedChallenges.includes(d.id)}\n//                         <Checkbox\n//                           style={{ marginLeft: \"10px\" }}\n//                           checked={isChallengeChecked(d)}\n//                           onClick={(value) =>\n//                             addChallengeToArray(value.target.checked, d)\n//                           }\n//                         />\n//                       </div>\n//                     ))\n//                   ) : (\n//                     <h2 className=\"create-payment-font-heading-white\">No Challenges Found.</h2>\n//                   )}\n//                 </div>\n//               )}\n//             </Scrollbars>\n//           </div>\n\n//           {getPackagePaymentInfo()}\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default withRouter(CreatePayment);\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { Link, withRouter, useHistory } from \"react-router-dom\";\nimport PaymentPoints from \"../../assets/icons/payment-points-logo.png\";\n\nimport {\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  DownOutlined,\n  LoadingOutlined,\n  UpOutlined,\n} from \"@ant-design/icons\";\nimport { Collapse, Input } from \"antd\";\n\nimport { userInfoContext, userPointsContext } from \"../../contexts/UserStore\";\nimport { selectedChallengeContext } from \"../../contexts/PaymentProcessStore\";\n\nimport \"../../assets/createPayment.css\";\nimport VerifyUser from \"../UserDashboard/VerifyUser\";\nimport { createPayment } from \"../../services/payment\";\nimport { getCouponByCode, getCouponDiscount } from \"../../services/coupons\";\nimport { availMyPoints } from \"../../services/users\";\n\nfunction CreatePayment(props) {\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [newPrice, setNewPrice] = useState({ success: false, price: 0 });\n  const [showCouponModal, setShowCouponModal] = useState([]);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [userPoints, setUserPoints] = useContext(userPointsContext);\n  const [selectedChallenge, setSelectedChallenge] = useContext(\n    selectedChallengeContext\n  );\n  const [loading, setLoading] = useState(false);\n  const [pack, setPack] = useState(\"\");\n  const [packInfo, setPackInfo] = useState({\n    name: \"\",\n    noOfChallenges: \"\",\n    save: \"\",\n    price: \"\",\n    billed: \"\",\n  });\n  const [couponButtonLoading, setCouponButtonLoading] = useState(false);\n  const history = useHistory();\n\n  const getDiscountFromPoints = async () => {\n    if (userPoints >= 100) {\n      const d = userPoints;\n      const res = await availMyPoints(setUserPoints);\n      if (res) {\n        setPackInfo({\n          ...packInfo,\n          price: packInfo.price - d / 100,\n        });\n        const c = { ...selectedChallenge, price: selectedChallenge.price - 1 };\n        setSelectedChallenge(c);\n      }\n      console.log(d, packInfo, res, packInfo.price - d / 100, userPoints);\n    } else {\n      console.log(\"here\");\n    }\n  };\n  const checkCouponCode = async () => {\n    setCouponButtonLoading(true);\n    const couponInfo = await getCouponByCode(couponCode);\n\n    if (couponInfo.success) {\n      const coupon = couponInfo.data.coupon;\n      console.log(coupon, packInfo, pack);\n      if (\n        packInfo.name === \"One-Time Challenge\" &&\n        coupon.applicableOn.includes(\"CHALLENGE ONE\")\n      ) {\n        if (\n          coupon.challengesApplicableOn &&\n          !coupon.challengesApplicableOn.includes(selectedChallenge._id)\n        ) {\n          alert(\"Coupon isnt available for the selected challenge!\");\n          return;\n        }\n        // console.log(\"valid\");\n        const res = await getCouponDiscount(coupon._id);\n        if (res.success) {\n          setPackInfo({\n            ...packInfo,\n            price: packInfo.price - packInfo.price * (coupon.discount / 100),\n          });\n        }\n        setCouponButtonLoading(false);\n        return;\n      } else if (\n        packInfo.name === \"3 Months Plan\" &&\n        coupon.applicableOn.includes(\"CHALLENGE THREE\")\n      ) {\n        const res = await getCouponDiscount(coupon._id);\n        if (res && res.success) {\n          console.log(\n            coupon,\n            packInfo,\n            packInfo.price - packInfo.price * (coupon.discountPercent / 100)\n          );\n          setPackInfo({\n            ...packInfo,\n            price:\n              packInfo.price - packInfo.price * (coupon.discountPercent / 100),\n          });\n        }\n        setCouponButtonLoading(false);\n        return;\n      } else if (\n        packInfo.name === \"12 Months Plan\" &&\n        coupon.applicableOn.includes(\"CHALLENGE TWELVE\")\n      ) {\n        const res = await getCouponDiscount(coupon._id);\n        if (res.success) {\n          setPackInfo({\n            ...packInfo,\n            price: packInfo.price - packInfo.price * (coupon.discount / 100),\n          });\n        }\n        setCouponButtonLoading(false);\n        return;\n      } else {\n        alert(\"This code is not valid for these subscribtion package\");\n      }\n\n      // setNewPrice({success: true, })\n      // const res = await useCoupon(id);\n    }\n    setCouponButtonLoading(false);\n    // console.log(\"resssssss\", res);\n  };\n  useEffect(() => {\n    const pack = localStorage.getItem(\"package-type\");\n\n    if (pack === \"CHALLENGE_12\") {\n      setPackInfo({\n        name: \"12 Months Plan\",\n        noOfChallenges: \"12\",\n        save: \"40%\",\n        price: \"19.99\",\n        billed: \"12\",\n      });\n    }\n    if (pack === \"CHALLENGE_1\") {\n      setPackInfo({\n        name: \"One-Time Challenge\",\n        noOfChallenges: \"1\",\n        save: \"\",\n        price: selectedChallenge.price ? selectedChallenge.price : \"\",\n        billed: \"1\",\n      });\n    }\n    if (pack === \"CHALLENGE_3\") {\n      setPackInfo({\n        name: \"3 Months Plan\",\n        noOfChallenges: \"3\",\n        save: \"20%\",\n        price: \"26.00\",\n        billed: \"3\",\n      });\n    }\n    setPack(pack.replace(\"_\", \" \"));\n  }, []);\n\n  const sendRequestToMollie = async () => {\n    setLoading(true);\n    const pack = localStorage.getItem(\"package-type\");\n    var data = {\n      id: userInfo.id,\n      name: userInfo.username,\n      email: userInfo.email,\n      currency: \"EUR\",\n      value: packInfo.price ? parseFloat(packInfo.price).toFixed(2) : \"\",\n      description: pack,\n      redirectUrl: `${process.env.REACT_APP_FRONTEND_SERVER}/mollie/create-subscribtion/redirect`,\n    };\n    if (pack === \"CHALLENGE_1\") {\n      if (selectedChallenge) {\n        data = {\n          ...data,\n          currency:\n            selectedChallenge.currency && selectedChallenge.currency === \"€\"\n              ? \"EUR\"\n              : \"USD\",\n          value: selectedChallenge.price.toFixed(2),\n        };\n      } else {\n        alert(\"Please select the challenge that you want to pay for.\");\n        setLoading(false);\n        return;\n      }\n    }\n    console.log(data);\n    var storeForLaterUse = {\n      currency: data.currency,\n      value: data.value,\n      // times: packInfo.billed,\n      interval: \"1 month\",\n      description: pack,\n    };\n    const res = await createPayment(data);\n    setLoading(false);\n    if (res) {\n      const link = res._links.checkout.href;\n      storeForLaterUse = {\n        ...storeForLaterUse,\n        custId: res.customerId,\n        id: userInfo.id,\n      };\n      localStorage.setItem(\"subObject\", JSON.stringify(storeForLaterUse));\n      localStorage.setItem(\n        \"selectedChallenges\",\n        JSON.stringify([selectedChallenge])\n      );\n      window.location = link;\n    }\n    console.log(\"to be\", res);\n  };\n\n  return (\n    <div\n      style={{\n        backgroundColor: \"#2a2f36\",\n        minHeight: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <VerifyUser fromNewWelcomeScreen={true} />\n      <div style={{ display: \"flex\" }}>\n        <Link to=\"\"></Link>\n      </div>\n      <button\n        onClick={() => history.goBack()}\n        className=\"font-paragraph-white\"\n        style={{\n          color: \"#fff\",\n          fontSize: \"18px\",\n          backgroundColor: \"var(--mirage)\",\n          padding: \"10px \",\n          margin: \"10px 0 0 50px\",\n          position: \"absolute\",\n          border: \"none\",\n          cursor: \"pointer\",\n          top: \"0\",\n          left: \"0\",\n        }}\n      >\n        <ArrowLeftOutlined /> Back\n      </button>\n      <div className=\"create-payment-overlap-group-1\">\n        <h1 className=\"font-heading-white\" style={{ marginBottom: \"40px\" }}>\n          Overview\n        </h1>\n        {/* ---- */}\n        <div className=\"create-payment-undercover\">\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\n            {packInfo.name}\n          </div>\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\n            {packInfo.noOfChallenges === \"1\"\n              ? `${selectedChallenge.currency} ${selectedChallenge.price}`\n              : `€ ${packInfo.price}`}\n          </div>\n        </div>\n        {/* ---- */}\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginTop: \"10px\",\n          }}\n        >\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"rgba(196, 196, 196, 1)\", cursor: \"pointer\" }}\n            onClick={() => {\n              if (packInfo.noOfChallenges === \"1\" && selectedChallenge._id) {\n                const win = window.open(\n                  `challenge/${selectedChallenge._id}`,\n                  \"_blank\"\n                );\n                win.focus();\n              }\n            }}\n          >\n            {packInfo.noOfChallenges === \"1\"\n              ? selectedChallenge.challengeName\n              : packInfo.noOfChallenges === \"3\"\n              ? \"Unlock all features for 3 months\"\n              : packInfo.noOfChallenges === \"12\"\n              ? \"Unlock all features for 12 months\"\n              : \"\"}\n          </div>\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"rgba(196, 196, 196, 1)\" }}\n          >\n            {packInfo.noOfChallenges === \"1\"\n              ? \"One Time Payment\"\n              : \"Automatically Monthly Payment\"}\n          </div>\n        </div>\n        {/* ---- */}\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            fontWeight: \"500\",\n            fontStyle: \"normal\",\n            fontSize: \"20px\",\n            lineHeight: \"20px\",\n            marginTop: \"30px\",\n          }}\n        >\n          <div className=\"font-paragraph-white\" style={{ fontWeight: \"600\" }}>\n            Challenge Points\n          </div>\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"rgba(196, 196, 196, 1)\", fontSize: \"14px\" }}\n          >\n            <span>\n              Your balance is <img src={PaymentPoints} alt=\"\" /> {userPoints}{\" \"}\n              points\n              {userPoints > 0 &&\n                `(€${userPoints / 100} or $${userPoints / 100})`}\n            </span>{\" \"}\n            <br />\n            <span> Minimum Balance in order to redeem: 100</span>\n          </div>\n        </div>\n        <button\n          style={{\n            color: \"#676868\",\n            fontSize: \"14px\",\n            border: \"1px solid #676868\",\n            backgroundColor: \"transparent\",\n            width: \"120px\",\n            padding: \"5px\",\n            marginTop: \"10px\",\n            cursor: \"pointer\",\n          }}\n          onClick={() => getDiscountFromPoints()}\n        >\n          Redeem Points\n        </button>\n        {/* ---- */}\n\n        <Collapse\n          // defaultActiveKey={[\"1\"]}\n          onChange={(e) => setShowCouponModal(e)}\n        >\n          <Collapse.Panel\n            style={{ backgroundColor: \"var(--mirage)\" }}\n            showArrow={false}\n            header={\n              <>\n                <div\n                  style={{\n                    fontWeight: \"500\",\n                    fontStyle: \"normal\",\n                    fontSize: \"20px\",\n                    lineHeight: \"20px\",\n                    marginTop: \"30px\",\n                    marginLeft: \"-12px\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                  className=\"font-paragraph-white\"\n                >\n                  <span>Coupon Code</span>\n                  <span>\n                    {showCouponModal.length > 0 ? (\n                      <DownOutlined />\n                    ) : (\n                      <UpOutlined />\n                    )}\n                  </span>\n                </div>\n                <div className=\"create-payment-rectangle-1885\"></div>\n              </>\n            }\n            key=\"1\"\n          >\n            <div\n              style={{\n                background: \"var(--mirage)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n              }}\n            >\n              <Input\n                value={couponCode}\n                onChange={(e) => setCouponCode(e.target.value)}\n                placeholder=\"Enter Voucher\"\n                style={{ width: \"70%\" }}\n              />\n              {couponButtonLoading ? (\n                <LoadingOutlined style={{ color: \"#fff\", fontSize: \"30px\" }} />\n              ) : (\n                <button\n                  style={{\n                    color: \"#676868\",\n                    fontSize: \"14px\",\n                    border: \"1px solid #676868\",\n                    backgroundColor: \"transparent\",\n                    width: \"120px\",\n                    padding: \"5px\",\n                    marginLeft: \"10px\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => checkCouponCode()}\n                >\n                  Redeem Code\n                </button>\n              )}\n            </div>\n          </Collapse.Panel>\n        </Collapse>\n        {/* ----- */}\n        <div\n          className=\"font-paragraph-white\"\n          style={{\n            color: \"rgba(196, 196, 196, 1)\",\n            fontSize: \"14px\",\n            marginTop: \"30px\",\n          }}\n        >\n          SUMMARY\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            fontWeight: \"600\",\n            fontStyle: \"normal\",\n            fontSize: \"20px\",\n            lineHeight: \"20px\",\n          }}\n        >\n          <div className=\"font-paragraph-white\">Order Total</div>\n          <div className=\"font-paragraph-white\">\n            {packInfo.noOfChallenges === \"1\"\n              ? `${selectedChallenge.currency} ${selectedChallenge.price}`\n              : `€ ${packInfo.price}`}\n            {/* {`€ ${packInfo.price}`} */}\n          </div>\n        </div>\n        {/* ----- */}\n        <div\n          style={{\n            width: \"100%\",\n            marginTop: \"30px\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {loading ? (\n            <LoadingOutlined style={{ color: \"#e67936\", fontSize: \"30px\" }} />\n          ) : (\n            <div\n              className=\"create-payment-check-out poppins-medium-white-20px\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                cursor: \"pointer\",\n                letterSpacing: \"1px\",\n              }}\n              onClick={sendRequestToMollie}\n            >\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontSize: \"18px\", fontWeight: \"600\" }}\n              >\n                Check out\n              </span>\n              <ArrowRightOutlined\n                style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(CreatePayment);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\ChoosePlan.js",["882","883","884","885"],"import React, { useEffect, useContext } from \"react\";\nimport \"../../assets/newWelcome.css\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport PackageSelector from \"./PackageSelector\";\n\nfunction ChoosePlan(props) {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"jwtToken\")) {\n      props.history.push(\"/login\");\n    }\n  }, []);\n\n  const onChoosePlan = (pack) => {\n    console.log(\"here\", pack);\n    localStorage.setItem(\"package-type\", pack);\n    props.history.push(\"/create-payment\");\n  };\n  return (\n    <>\n      <div className=\"new-welcome-page choose-plan-page\">\n        <div className=\"new-welcome-container\">\n          <h1 className=\"font-heading-white\">Our Plans</h1>\n          <p className=\"font-paragraph-white\">\n            Our plans are created by expert trainers that helps you achive your\n            goals.\n          </p>\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        >\n          <PackageSelector onChoosePlan={onChoosePlan} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default withRouter(ChoosePlan);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Translate.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\payment.js",["886","887","888"],"import axios from \"axios\";\nimport { notification } from \"antd\";\nimport { getUserProfileInfo } from \"./users\";\nimport { Modal, Button, Space } from \"antd\";\n\nconst openNotificationWithIcon = (type, message, description) => {\n  notification[type]({\n    message: message,\n    description: description,\n  });\n};\n\nfunction errorPopup(title, text) {\n  Modal.info({\n    title: <div className=\"font-paragraph-white\">{title}</div>,\n    content: <div className=\"font-paragraph-white\">{text}</div>,\n    icon: null,\n    okButtonProps: {\n      style: { background: \"#ff7700\", border: \"none\" },\n    },\n    onOk() {},\n  });\n}\n\nexport function mollieAuthUser() {\n  return axios\n    .get(`${process.env.REACT_APP_SERVER}/api/auth/mollie/oauth2/authorize`)\n    .then((res) => res.data)\n    .catch((err) => {\n      openNotificationWithIcon(\n        \"error\",\n        \"Unable to access mollie server at the moment.\"\n      );\n      console.log(err);\n    });\n}\n\nexport function createPayment(values) {\n  return axios\n    .post(\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/create/first/payment`,\n      values\n    )\n    .then((res) => res.data)\n    .catch((err) => {\n      if (err.response && err.response.data) {\n        console.log(err.response.data.message);\n        openNotificationWithIcon(\"error\", `${err.response.data.message}`);\n      } else {\n        openNotificationWithIcon(\n          \"error\",\n          \"Unable to access mollie server at the moment.\"\n        );\n        console.log(err);\n      }\n    });\n}\n\nexport function createSubscribtion(values) {\n  return axios\n    .post(\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/create/subscription`,\n      values\n    )\n    .then((res) => res.data)\n    .catch((err) => {\n      errorPopup(\n        \"Error\",\n        <div>\n          Unable to create subscribtion, please contact the realchallenge for\n          more information.\n        </div>\n      );\n      console.log(err);\n    });\n}\n\nconst checkIfUserAlreadyHaveAFreeChallenge = (customer) => {\n  if (customer.customerDetails.challenges.length <= 0) {\n    return false;\n  } else {\n    const c = customer.customerDetails.challenges.filter((c) =>\n      c.access.includes(\"FREE\")\n    );\n    if (c.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nconst alreadySubscribedToSpecificNumberOfChallenges = (\n  customer,\n  noOfChallengesAllowed\n) => {\n  if (customer.customerDetails.challenges.length <= 0) {\n    return false;\n  } else {\n    const c = customer.customerDetails.challenges.filter(\n      (c) => !c.access.includes(\"FREE\")\n    );\n    if (c.length >= noOfChallengesAllowed) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nexport function checkUserPackage(\n  customer,\n  challenge,\n  pack,\n  history,\n  setSelectedChallenge,\n  setReplaceFreeChallengePopupVisible\n) {\n  if (customer.role === \"admin\") {\n    return {\n      success: true,\n      message: \"SUBSCRIBE\",\n    };\n  }\n  console.log(challenge);\n  console.log(customer.customerDetails.membership[0]);\n  // check if user is free subscriber\n  if (customer.customerDetails.membership[0] === undefined) {\n    // if has not subscribed to any package. They can only have one free challenge.\n    // first we if the comming challenge is free or not.\n    if (challenge.access.includes(\"FREE\")) {\n      // if free we check if they already have a free challenge\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\n        // if they already have a free challenge\n        // openNotificationWithIcon(\n        //   \"error\",\n        //   `You can only subscribe to one free challenge at a time.`\n        // );\n        setReplaceFreeChallengePopupVisible(true);\n        return {\n          success: false,\n        };\n      } else {\n        // if they dont have a free challenge\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    } else {\n      // if not free\n\n      if (pack) {\n        setSelectedChallenge(challenge);\n        localStorage.setItem(\"package-type\", pack);\n        history.push(\"/create-payment\");\n      } else {\n        errorPopup(\n          \"Unable to subscribe\",\n          <div>\n            You can only subscribe to free challenges. This is a paid challenge.\n            Please subscribe to get this challenge.\n          </div>\n        );\n      }\n      return {\n        success: false,\n      };\n    }\n  }\n\n  // check if user is challenge 1 subscriber\n  if (\n    customer.customerDetails.membership[0] &&\n    customer.customerDetails.membership[0].name === \"CHALLENGE_1\"\n  ) {\n    // if has not subscribed to any package. They can only have one free challenge.\n    // first we if the comming challenge is free or not.\n    if (challenge.access.includes(\"FREE\")) {\n      // if free we check if they already have a free challenge\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\n        // if they already have a free challenge\n        // openNotificationWithIcon(\n        //   \"error\",\n        //   `You can only subscribe to one free challenge at a time.`\n        // );\n        setReplaceFreeChallengePopupVisible(true);\n        return {\n          success: false,\n        };\n      } else {\n        // if they dont have a free challenge\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    } else {\n      // if not free we check if user is already subscirbed to 1 challenge.\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\n\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 1)) {\n        errorPopup(\n          \"Unable to subscribe\",\n          <div>\n            You have already bought a challenge. You can only buy new challenge\n            once that challenge expires.\n          </div>\n        );\n        return { success: false };\n      } else {\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    }\n  }\n\n  // check if user is challenge 3 subscriber\n  if (\n    customer.customerDetails.membership[0] &&\n    customer.customerDetails.membership[0].name === \"CHALLENGE_3\"\n  ) {\n    // if has not subscribed to any package. They can only have one free challenge.\n    // first we if the comming challenge is free or not.\n    if (challenge.access.includes(\"FREE\")) {\n      // if free we check if they already have a free challenge\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\n        // if they already have a free challenge\n        // openNotificationWithIcon(\n        //   \"error\",\n        //   `You can only subscribe to one free challenge at a time.`\n        // );\n        setReplaceFreeChallengePopupVisible(true);\n        return {\n          success: false,\n        };\n      } else {\n        console.log(\"penis\");\n        // if they dont have a free challenge\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    } else {\n      console.log(\"poop\");\n      // if not free we check if user is already subscirbed to 2 challenge.\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\n\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 2)) {\n        errorPopup(\n          \"Unable to subscribe\",\n          <div>\n            You are already enrolled in 2 challenge. You can only enroll new\n            challenge once those challenges expires.\n          </div>\n        );\n        return { success: false };\n      } else {\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    }\n  }\n\n  // check if user is challenge 12 subscriber\n  if (\n    customer.customerDetails.membership[0] &&\n    customer.customerDetails.membership[0].name === \"CHALLENGE_12\"\n  ) {\n    // if has not subscribed to any package. They can only have one free challenge.\n    // first we if the comming challenge is free or not.\n    if (challenge.access.includes(\"FREE\")) {\n      // if free we check if they already have a free challenge\n      if (checkIfUserAlreadyHaveAFreeChallenge(customer)) {\n        // if they already have a free challenge\n        // openNotificationWithIcon(\n        //   \"error\",\n        //   `You can only subscribe to one free challenge at a time.`\n        // );\n        setReplaceFreeChallengePopupVisible(true);\n        return {\n          success: false,\n        };\n      } else {\n        console.log(\"penis\");\n        // if they dont have a free challenge\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    } else {\n      console.log(\"poop\");\n      // if not free we check if user is already subscirbed to 2 challenge.\n      // alreadySubscribedToSpecificNumberOfChallenges function check if the user has already subscribed to specific\n      // number of challenges other than free challenge. So challenge 1 wala user can subscribe to only 1 more challenge other than free\n      // where are challenge 3 wala can subscribe to 2 challenges other than free, where are 12 months wala can subscribe to 3 other than free.\n\n      if (alreadySubscribedToSpecificNumberOfChallenges(customer, 3)) {\n        errorPopup(\n          \"Unable to subscibe\",\n          <div>\n            You are already enrolled in 3 challenges. You can only enroll new\n            challenge once those challenges expires.\n          </div>\n        );\n\n        // openNotificationWithIcon(\n        //   \"error\",\n        //   `You are already enrolled in 3 challenges. You can only enroll new challenge once those challenges expires.`\n        // );\n        return { success: false };\n      } else {\n        return {\n          success: true,\n          message: \"SUBSCRIBE\",\n        };\n      }\n    }\n  }\n}\n\nexport function getSubscribtionInformation(customerId) {\n  return axios\n    .get(\n      `${process.env.REACT_APP_SERVER}/api/auth/mollie/subscription/customer/${customerId}`\n    )\n    .then((res) => {\n      console.log(res.data);\n      return res.data;\n    })\n    .catch((err) => console.log(err));\n}\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Footer.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Navbar.js",["889"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../assets/navbar.css\";\nimport {\n  MenuOutlined,\n  CloseOutlined,\n  CaretDownOutlined,\n  UserOutlined,\n  BellOutlined,\n} from \"@ant-design/icons\";\nimport Logo from \"../images/logo.png\";\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\nimport { Avatar, Popover, Badge } from \"antd\";\nimport { logoutUser } from \"../services/authentication\";\nimport { withRouter } from \"react-router-dom\";\nimport Coins from \"../assets/icons/coins.svg\";\nimport LanguageSelector from \"./LanguageSelector/LanguageSelector\";\nimport { T } from \"./Translate\";\n\nfunction Navbar({ color, history }) {\n  const [click, setClick] = useState(false);\n  const [navbar, setNavbar] = useState(false);\n  const [button, setButton] = useState(true);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const userPoints = useContext(userPointsContext)[0];\n\n  const handleClick = () => setClick(!click);\n  const closeMobileMenu = () => setClick(false);\n  const notificationContent = (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      {userInfo.notifications.map((v) => (\n        <span className=\"font-paragraph-white\">{v.value}</span>\n      ))}\n    </div>\n  );\n  const content = (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Link to=\"/user/dashboard\" className=\"font-paragraph-white nav-links\">\n        <T>navbar.success_overview</T>\n      </Link>\n      <Link to=\"/user/update\" className=\"font-paragraph-white nav-links\">\n        <T>navbar.update</T>\n      </Link>\n\n      <Link to=\"/user/settings\" className=\"font-paragraph-white nav-links\">\n        <T>navbar.setting</T>\n      </Link>\n      <Link\n        className=\"font-paragraphw-white nav-links\"\n        onClick={() => logoutUser(history, setUserInfo)}\n      >\n        <T>navbar.logout</T>\n      </Link>\n    </div>\n  );\n  const contentAdmin = (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Link to=\"/admin/dashboard\" className=\"font-paragraph-white nav-links\">\n        <T>navbar.admin_dashboard</T>\n      </Link>\n      <Link\n        className=\"font-paragraphw-white nav-links\"\n        onClick={() => logoutUser(history, setUserInfo)}\n      >\n        {\" \"}\n        <T>navbar.logout</T>\n      </Link>\n    </div>\n  );\n\n  const showButton = () => {\n    if (window.innerWidth <= 960) {\n      setButton(false);\n    } else {\n      setButton(true);\n    }\n  };\n\n  useEffect(() => {\n    showButton();\n  }, []);\n\n  window.addEventListener(\"resize\", showButton);\n  const changeBackground = () => {\n    if (window.scrollY >= 85) {\n      setNavbar(true);\n    } else {\n      setNavbar(false);\n    }\n  };\n  window.addEventListener(\"scroll\", changeBackground);\n  return (\n    <>\n      <nav\n        className={\n          navbar\n            ? `navbar active ${\n                color === \"dark\" && \"navbar-for-white-background\"\n              }`\n            : `navbar  ${color === \"dark\" && \"navbar-for-white-background\"}`\n        }\n      >\n        <div className=\"navbar-container\">\n          <Link to=\"/\" className=\"navbar-logo\" onClick={closeMobileMenu}>\n            <img src={Logo} alt=\"logo\" className=\"logo\" />\n          </Link>\n\n          <div className=\"menu-icon\" onClick={handleClick}>\n            {click ? (\n              <CloseOutlined style={{ color: \"#fff\", fontSize: \"2rem\" }} />\n            ) : (\n              <MenuOutlined style={{ color: \"#fff\", fontSize: \"2rem\" }} />\n            )}\n          </div>\n          <div style={{ position: \"absolute\", right: \"60px\", top: \"30px\" }}>\n            {!userInfo.authenticated && !button && (\n              <Link to=\"/new\" className=\"nav-button font-paragraph-white\">\n                <T>navbar.start_now</T>\n              </Link>\n            )}\n            {!userInfo.authenticated && !button && (\n              <Link\n                to=\"/login\"\n                className=\"nav-button-login font-paragraph-white\"\n              >\n                <T>navbar.log_in</T>\n              </Link>\n            )}\n          </div>\n          <ul className={click ? \"nav-menu active\" : \"nav-menu\"}>\n            <li className=\"nav-item font-paragraph-white\">\n              <Link\n                to=\"/challenges\"\n                style={{ fontWeight: \"600\" }}\n                className=\"nav-links\"\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.challenges</T>\n              </Link>\n              {/* </li> */}\n              {/* <li className=\"nav-item font-paragraph-white\"> */}\n              <Link\n                style={{ fontWeight: \"600\" }}\n                to=\"/trainers\"\n                className=\"nav-links\"\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.trainers</T>\n              </Link>\n              {/* </li> */}\n              {/* <li className=\"nav-item font-paragraph-white\"> */}\n              <Link\n                style={{ fontWeight: \"600\" }}\n                to=\"/nutrition\"\n                className=\"nav-links\"\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.nutrient</T>\n              </Link>\n            </li>\n            <li\n              className=\"nav-item font-paragraph-white\"\n              style={{ justifyContent: !click && \"flex-end\" }}\n            >\n              <Link\n                to=\"/how-it-works\"\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\n                className=\"nav-links\"\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.how_it_works</T>\n              </Link>\n              {/* </li>\n            <li className=\"nav-item font-paragraph-white\"> */}\n              <Link\n                to=\"/pricing\"\n                className=\"nav-links\"\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.pricing</T>\n              </Link>\n              {/* </li>\n            <li className=\"nav-item font-paragraph-white\"> */}\n              <Link\n                to=\"/magazine\"\n                className=\"nav-links\"\n                style={{ fontWeight: \"400\", fontSize: \"13px\" }}\n                onClick={closeMobileMenu}\n              >\n                <T>navbar.magazine</T>\n              </Link>\n              <div className=\"loggedin-nav-userinfo\">\n                <LanguageSelector />\n              </div>\n            </li>\n          </ul>\n          {userInfo.authenticated ? (\n            <div className=\"loggedin-nav-userinfo\">\n              <Popover\n                placement=\"bottom\"\n                content={notificationContent}\n                trigger=\"click\"\n              >\n                <Badge\n                  count={userInfo.notifications.length}\n                  style={{\n                    backgroundColor: \"var(--color-orange)\",\n                    marginRight: \"20px\",\n                  }}\n                >\n                  <BellOutlined\n                    style={{\n                      fontSize: \"2.5rem\",\n                      color: \"#677182\",\n                      cursor: \"pointer\",\n                      backgroundColor: \"#171E27\",\n                      padding: \"5px\",\n                      marginRight: \"20px\",\n                    }}\n                  />\n                </Badge>\n              </Popover>\n\n              <Avatar\n                shape=\"square\"\n                src={userInfo.avatar}\n                icon={<UserOutlined />}\n                style={{\n                  marginRight: \"20px\",\n                }}\n              />\n\n              <Popover\n                placement=\"bottom\"\n                content={userInfo.role === \"customer\" ? content : contentAdmin}\n                trigger=\"click\"\n              >\n                <div className=\"loggedin-nav-name font-paragraph-white\">\n                  <span>\n                    {userInfo.username} <CaretDownOutlined />\n                  </span>\n                  <span style={{ color: \"#677182\", fontSize: \"1.6rem\" }}>\n                    <img src={Coins} /> {userPoints}\n                  </span>\n                </div>\n              </Popover>\n            </div>\n          ) : (\n            <div style={{ width: \"200px\" }}>\n              {button && (\n                <Link to=\"/new\" className=\"nav-button font-paragraph-white\">\n                  <T>navbar.start_now</T>\n                </Link>\n              )}\n              {button && (\n                <Link\n                  to=\"/login\"\n                  className=\"nav-button-login font-paragraph-white\"\n                >\n                  <T>navbar.log_in</T>\n                </Link>\n              )}\n            </div>\n          )}\n\n          {/* <div\n            className=\"loggedin-nav-userinfo\"\n            style={{ width: \"fit-content\" }}\n          >\n            <Avatar\n              shape=\"square\"\n              src={userInfo.avatar}\n              icon={<UserOutlined />}\n              style={{\n                marginRight: \"20px\",\n              }}\n            />\n            <Popover placement=\"bottom\" content={content} trigger=\"click\">\n              <div className=\"loggedin-nav-name font-paragraph-white\">\n                <span>\n                  {userInfo.username} <CaretDownOutlined />\n                </span>\n                <span>\n                  <RocketOutlined style={{ color: \"var(--color-orange)\" }} />{\" \"}\n                  {userInfo.points}\n                </span>\n              </div>\n            </Popover>\n          </div> */}\n        </div>\n      </nav>\n    </>\n  );\n}\n\nexport default withRouter(Navbar);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\trainers.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\customer.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\LoggedinNavbar.js",["890","891"],"import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../assets/navbar.css\";\nimport {\n  UserOutlined,\n  BellOutlined,\n  CaretDownOutlined,\n} from \"@ant-design/icons\";\nimport { Badge, Avatar, Popover, Divider } from \"antd\";\nimport { userInfoContext, userPointsContext } from \"../contexts/UserStore\";\nimport Logo from \"../images/logo_orange.png\";\n\nimport Coins from \"../assets/icons/coins.svg\";\nimport { logoutUser } from \"../services/authentication\";\n\nimport { withRouter } from \"react-router-dom\";\nimport { T } from \"./Translate\";\nimport { markNotificationsAsRead } from \"../services/users\";\n\nfunction LoggedinNavbar(props) {\n  const { notifications, unreadNotifications } = props.notifications || {};\n  // eslint-disable-next-line\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const userPoints = useContext(userPointsContext)[0];\n\n  const readNotification = async (id, notification) => {\n    try {\n      await markNotificationsAsRead(id);\n      props.markNotificationAsRead(id, notification);\n    } catch (error) {\n      console.error(\"Failed to mark notifications as read:\", error);\n    }\n  };\n\n  const content = (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <Link to=\"/user/dashboard\" className=\"font-paragraph-white hover-orange\">\n        <T>navbar.success_overview</T>\n      </Link>\n      <Link to=\"/user/update\" className=\"font-paragraph-white hover-orange\">\n        <T>navbar.update</T>\n      </Link>\n      <Link to=\"/user/settings\" className=\"font-paragraph-white hover-orange\">\n        <T>navbar.setting</T>\n      </Link>\n      <Link\n        className=\"font-paragraphw-white hover-orange\"\n        onClick={() => logoutUser(props.history, setUserInfo)}\n      >\n        <T>navbar.logout</T>\n      </Link>\n    </div>\n  );\n\n  const notificationContent = (\n    <div className=\"notification-container\">\n      {notifications?.map((v, key) => (\n        <>\n          <span\n            className={`font-paragraph-white notification-row ${\n              v.read ? \"notification-row-read\" : \"notification-row-unread\"\n            }`}\n            onClick={() => readNotification(v._id, v)}\n          >\n            {v.title}\n          </span>\n          {key !== notifications.length - 1 && <div className=\"divider\"></div>}\n        </>\n      ))}\n    </div>\n  );\n\n  return (\n    <>\n      <nav className=\"loggedin-nav-container\">\n        <div>\n          <Link to=\"/\" className=\"navbar-logo\">\n            <img src={Logo} alt=\"logo\" className=\"logo small-screenlogo\" />\n          </Link>\n        </div>\n        <div className=\"loggedin-nav-userinfo\">\n          <Popover\n            placement=\"bottom\"\n            content={notificationContent}\n            trigger=\"click\"\n          >\n            <Badge\n              count={unreadNotifications}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                marginRight: \"20px\",\n              }}\n            >\n              <BellOutlined\n                style={{\n                  fontSize: \"2.5rem\",\n                  color: \"#677182\",\n                  cursor: \"pointer\",\n                  backgroundColor: \"#171E27\",\n                  padding: \"5px\",\n                  marginRight: \"20px\",\n                }}\n              />\n            </Badge>\n          </Popover>\n          <Avatar\n            shape=\"square\"\n            src={userInfo.avatar}\n            icon={<UserOutlined />}\n            style={{\n              marginRight: \"20px\",\n            }}\n          />\n          <Popover placement=\"bottom\" content={content} trigger=\"click\">\n            <div className=\"loggedin-nav-name font-paragraph-white\">\n              <span>\n                {userInfo.username} <CaretDownOutlined />\n              </span>\n              <span style={{ color: \"#677182\", fontSize: \"1.6rem\" }}>\n                <img src={Coins} /> {userPoints}\n                {console.log(\"ammar\", userPoints)}\n              </span>\n            </div>\n          </Popover>\n        </div>\n      </nav>\n    </>\n  );\n}\n\nexport default withRouter(LoggedinNavbar);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Cards\\ChallengeCard.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Payment\\PackageSelector.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\coupons.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\VerifyUser.js",["892"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { Button, Modal } from \"antd\";\nimport { MailOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport { withRouter } from \"react-router-dom\";\nimport ForwardArrow from \"../../assets/icons/forward-arrows.png\";\n\nimport \"../../assets/verifyUser.css\";\nimport {\n  checkEmailVerified,\n  logoutUser,\n  sendEmailVerification,\n} from \"../../services/authentication\";\n\nfunction VerifyUser(props) {\n  const [showModal, setShowModal] = useState(false);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    localStorage.getItem(\"isActive\") === \"true\"\n      ? setShowModal(false)\n      : setShowModal(true);\n  });\n  //   if user is on dashboard and still needs to verify its email\n  const onClickVeriyButton = async () => {\n    const res = await sendEmailVerification(userInfo.email);\n    if (res?.success) {\n      logoutUser(props.history, setUserInfo);\n    }\n  };\n\n  //   if user is in new welcome screen, an email as already been sent to their addresss\n  // fromNewWelcomeScreen\n  const onClickCheckEmailVerifiedButton = async () => {\n    setLoading(true);\n    const res = await checkEmailVerified(userInfo.email);\n\n    if (res?.success) {\n      localStorage.removeItem(\"userRecentlySignedUp\");\n      localStorage.setItem(\"isActive\", true);\n    }\n    setLoading(false);\n    // console.log(userInfo.email);\n  };\n\n  const sendEmailAgain = async () => {\n    setLoading(true);\n    const res = await sendEmailVerification(userInfo.email);\n    localStorage.setItem(\"userRecentlySignedUp\", true);\n    setLoading(false);\n    console.log(\"res\", res);\n  };\n  const dashboardScreenModal = () => (\n    <div className=\"verify-user-container\">\n      <MailOutlined\n        style={{ fontSize: \"80px\", color: \"#fff\", marginBottom: \"20px\" }}\n      />\n      <h2 className=\"font-paragraph-white\">\n        <img src={ForwardArrow} alt=\"\" style={{ marginRight: \"10px\" }} />\n        Please verify your email.\n      </h2>\n      <p className=\"font-paragraph-white\" style={{ letterSpacing: \"0.2\" }}>\n        Thank you for signing up for realchallenge. Please verify your email to\n        continue your access to dashboard.\n      </p>\n      <button\n        className=\"font-paragraph-white common-orange-button\"\n        style={{ width: \"50%\" }}\n        onClick={onClickVeriyButton}\n      >\n        Verify Email\n      </button>\n    </div>\n  );\n\n  const welcomScreenModal = () => (\n    <div className=\"verify-user-container\">\n      <MailOutlined\n        style={{ fontSize: \"80px\", color: \"#fff\", marginBottom: \"20px\" }}\n      />\n      <h2 className=\"font-paragraph-white\">\n        <img src={ForwardArrow} alt=\"\" style={{ marginRight: \"10px\" }} />\n        Please verify your email\n      </h2>\n      <p className=\"font-paragraph-white\" style={{ letterSpacing: \"0.2\" }}>\n        An email has been sent to your account, please verify your email address\n        to continue access to realchallenge.\n      </p>\n      {!loading ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          {\" \"}\n          <button\n            className=\"font-paragraph-white common-orange-button\"\n            style={{ width: \"50%\" }}\n            onClick={onClickCheckEmailVerifiedButton}\n          >\n            Complete\n          </button>\n          <Button\n            type=\"link\"\n            style={{ marginTop: \"10px\" }}\n            onClick={sendEmailAgain}\n          >\n            I did not received any email\n          </Button>\n        </div>\n      ) : (\n        <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"30px\" }} />\n      )}\n    </div>\n  );\n\n  return (\n    <Modal footer={false} visible={showModal} closable={false}>\n      {props.fromNewWelcomeScreen\n        ? welcomScreenModal()\n        : dashboardScreenModal()}\n      {/* {console.log(localStorage.getItem(\"isActive\") === \"true\")} */}\n    </Modal>\n  );\n}\n\nexport default withRouter(VerifyUser);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\MediaManager\\MediaManager.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Trainer\\CreateGoalsModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\mediaManager.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\useWindowDimensions.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Community.js",["893","894","895","896","897","898","899","900"],"import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport {\n  CommentOutlined,\n  FireOutlined,\n  UserOutlined,\n  ClockCircleOutlined,\n  FlagFilled,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { Avatar, Modal, Pagination } from \"antd\";\nimport CommentSection from \"./CommentSection\";\n\nimport ChatWhite from \"../../assets/icons/chat-white.svg\";\nimport Clap from \"../../assets/icons/clap-orange.svg\";\nimport Clock from \"../../assets/icons/feed-clock.svg\";\nimport ClapGray from \"../../assets/icons/clap-gray.svg\";\nimport {\n  addLikeToPost,\n  addUnlikePost,\n  getPostsWithPagination,\n} from \"../../services/communityPosts\";\n// import ReactHTMLParser from \"react-html-parser\";\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\n\nfunction Community({ userInfo }) {\n  const { language } = useContext(LanguageContext);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [totalPosts, setTotalPosts] = useState(0);\n  // eslint-disable-next-line\n  const [data, setData] = useState([]);\n  const [selectedPost, setSelectedPost] = useState({});\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const fetchData = async () => {\n    setLoading(true);\n    const res = await getPostsWithPagination(pageNumber, language);\n    setLoading(false);\n    setData(res.posts);\n    setTotalPosts(6 * res.lastPage);\n    console.log(res);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [pageNumber, language]);\n\n  const addLike = async (id) => {\n    const res = await addLikeToPost(id);\n    if (res) {\n      const d = data.map((i) => {\n        if (i._id === id) {\n          i.likes = res;\n        }\n        return i;\n      });\n      setData(d);\n    }\n    // fetchData();\n    console.log(\"like\", res);\n  };\n  const unlikePost = async (id) => {\n    const res = await addUnlikePost(id);\n    if (res) {\n      const d = data.map((i) => {\n        if (i._id === id) {\n          i.likes = res;\n        }\n        return i;\n      });\n      setData(d);\n    }\n  };\n  function itemRender(current, type, originalElement) {\n    if (type === \"prev\") {\n      return (\n        <a className=\"orange-button-pagination font-paragraph-white\">\n          Previous\n        </a>\n      );\n    }\n    if (type === \"next\") {\n      return (\n        <a className=\"green-button-pagination font-paragraph-white\">Next</a>\n      );\n    }\n    return originalElement;\n  }\n\n  const updatePosts = (id, comments) => {\n    const p = data.map((post) => {\n      if (post._id === id) {\n        post.comments = comments;\n        return post;\n      }\n      return post;\n    });\n    setData(p);\n  };\n\n  return (\n    <>\n      <CommentSection\n        post={selectedPost}\n        updatePosts={updatePosts}\n        visible={open}\n        setVisible={setOpen}\n        community={true}\n      />\n      <div\n        className=\"dashboard-feed-container\"\n        style={{ justifyItems: \"center\" }}\n      >\n        {loading ? (\n          <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\n        ) : data ? (\n          data.map((d) => (\n            <div className=\"dashboard-feed-container-card\">\n              {console.log(\"d\", d)}\n              <Link to={`${d.url ? d.url : \"#\"}`}>\n                <div\n                  className=\"dashboard-feed-container-card-row1\"\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <Avatar\n                    shape=\"square\"\n                    size=\"large\"\n                    src={d.avatar ? d.avatar : \"\"}\n                    icon={<UserOutlined />}\n                  />\n\n                  <div className=\"dashboard-feed-container-card-row1-col2 font-paragraph-white\">\n                    <span>{d.username ? d.username : \"\"}</span>\n                    <span\n                      style={{\n                        opacity: \"0.8\",\n                        color: \"#8e9298\",\n                        fontSize: \"13px\",\n                      }}\n                    >\n                      <img src={Clock} alt=\"\" /> {moment(d.date).fromNow()}\n                    </span>\n                  </div>\n                </div>\n              </Link>\n              {/* <Link to={`/${d.type}/${d.id}`}> */}\n              <Link to={`${d.url ? d.url : \"#\"}`}>\n                <div\n                  className=\"dashboard-feed-container-card-row2\"\n                  style={{\n                    background: `url(${\n                      d.image ? d.image.replaceAll(\" \", \"%20\") : \"\"\n                    })`,\n                    backgroundSize: \"cover\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <div className=\"dashboard-feed-container-card-row2-tag font-paragraph-white\">\n                    {d.type}\n                  </div>\n                </div>\n                {/* </Link> */}\n                <div className=\"dashboard-feed-container-card-row3\">\n                  <div className=\"dashboard-feed-container-card-row3-heading font-paragraph-white\">\n                    {/* {ReactHTMLParser(d.title)} */}\n                  </div>\n                  <div className=\"dashboard-feed-container-card-row3-text font-paragraph-white\">\n                    {/* {ReactHTMLParser(d.text)} */}\n                  </div>\n                </div>\n              </Link>\n              <div className=\"dashboard-feed-container-card-row4\">\n                <span\n                  className=\"dashboard-feed-container-card-row4-click\"\n                  onClick={() => {\n                    if (d.likes.some((like) => like[\"user\"] === userInfo.id)) {\n                      unlikePost(d._id);\n                    } else {\n                      addLike(d._id);\n                    }\n                  }}\n                >\n                  <img\n                    src={\n                      d.likes.some((like) => like[\"user\"] === userInfo.id)\n                        ? Clap\n                        : ClapGray\n                    }\n                    alt=\"\"\n                  />{\" \"}\n                  {d.likes.length}\n                </span>\n                <span\n                  className=\"dashboard-feed-container-card-row4-click\"\n                  onClick={() => {\n                    setOpen(true);\n                    setSelectedPost(d);\n                  }}\n                >\n                  <img src={ChatWhite} alt=\"\" /> {d.comments.length}\n                </span>\n              </div>\n            </div>\n          ))\n        ) : (\n          <h2 className=\"font-heading-white\">No posts here!</h2>\n        )}\n      </div>\n      <div className=\"pagination-container\">\n        <div className=\"pagination-container-inside\">\n          {data && (\n            <Pagination\n              current={pageNumber}\n              onChange={(page) => setPageNumber(page)}\n              itemRender={itemRender}\n              total={totalPosts}\n              pageSize={6}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Community;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\blogs.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Feed.js",["901","902","903","904"],"import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport { UserOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { Avatar, Modal, Pagination } from \"antd\";\nimport CommentSection from \"./CommentSection\";\nimport ChatWhite from \"../../assets/icons/chat-white.svg\";\nimport Clap from \"../../assets/icons/clap-orange.svg\";\nimport Clock from \"../../assets/icons/feed-clock.svg\";\nimport ClapGray from \"../../assets/icons/clap-gray.svg\";\nimport {\n  getPostsWithPagination,\n  addLikeToPost,\n  addUnlikePost,\n} from \"../../services/posts\";\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\n// import ReactHTMLParser from \"react-html-parser\";\n\nfunction Feed({ userInfo }) {\n  const { language } = useContext(LanguageContext);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [totalPosts, setTotalPosts] = useState(0);\n  // eslint-disable-next-line\n  const [data, setData] = useState([]);\n  const [selectedPost, setSelectedPost] = useState({});\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const fetchData = async () => {\n    setLoading(true);\n    const res = await getPostsWithPagination(pageNumber, language);\n    setLoading(false);\n    setData(res.posts);\n    setTotalPosts(6 * res.lastPage);\n    console.log(res);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [pageNumber, language]);\n\n  const addLike = async (id) => {\n    const res = await addLikeToPost(id);\n    if (res) {\n      const d = data.map((i) => {\n        if (i._id === id) {\n          i.likes = res;\n        }\n        return i;\n      });\n      setData(d);\n    }\n    // fetchData();\n    console.log(\"like\", res);\n  };\n  const unlikePost = async (id) => {\n    const res = await addUnlikePost(id);\n    if (res) {\n      const d = data.map((i) => {\n        if (i._id === id) {\n          i.likes = res;\n        }\n        return i;\n      });\n      setData(d);\n    }\n  };\n  function itemRender(current, type, originalElement) {\n    if (type === \"prev\") {\n      return (\n        <a className=\"orange-button-pagination font-paragraph-white\">\n          Previous\n        </a>\n      );\n    }\n    if (type === \"next\") {\n      return (\n        <a className=\"green-button-pagination font-paragraph-white\">Next</a>\n      );\n    }\n    return originalElement;\n  }\n\n  const updatePosts = (id, comments) => {\n    const p = data.map((post) => {\n      if (post._id === id) {\n        post.comments = comments;\n        return post;\n      }\n      return post;\n    });\n    setData(p);\n  };\n  return (\n    <>\n      <CommentSection\n        post={selectedPost}\n        updatePosts={updatePosts}\n        visible={open}\n        setVisible={setOpen}\n      />\n      <div\n        className=\"dashboard-feed-container\"\n        style={{ justifyItems: \"center\" }}\n      >\n        {loading ? (\n          <LoadingOutlined style={{ fontSize: \"30px\", color: \"#ff7700\" }} />\n        ) : data ? (\n          data.map((d) => (\n            <div className=\"dashboard-feed-container-card\">\n              {console.log(\"d\", d)}\n              <Link to={`${d.url ? d.url : \"#\"}`}>\n                <div\n                  className=\"dashboard-feed-container-card-row1\"\n                  style={{ cursor: \"pointer\" }}\n                >\n                  <Avatar\n                    shape=\"square\"\n                    size=\"large\"\n                    src={d.avatar ? d.avatar : \"\"}\n                    icon={<UserOutlined />}\n                  />\n\n                  <div className=\"dashboard-feed-container-card-row1-col2 font-paragraph-white\">\n                    <span>{d.username ? d.username : \"\"}</span>\n                    <span\n                      style={{\n                        opacity: \"0.8\",\n                        color: \"#8e9298\",\n                        fontSize: \"13px\",\n                      }}\n                    >\n                      <img src={Clock} alt=\"\" /> {moment(d.date).fromNow()}\n                    </span>\n                  </div>\n                </div>\n              </Link>\n              {/* <Link to={`/${d.type}/${d.id}`}> */}\n              <Link to={`${d.url ? d.url : \"#\"}`}>\n                <div\n                  className=\"dashboard-feed-container-card-row2\"\n                  style={{\n                    background: `url(${\n                      d.image ? d.image.replaceAll(\" \", \"%20\") : \"\"\n                    })`,\n                    backgroundSize: \"cover\",\n                    cursor: \"pointer\",\n                  }}\n                >\n                  <div className=\"dashboard-feed-container-card-row2-tag font-paragraph-white\">\n                    {d.type}\n                  </div>\n                </div>\n                {/* </Link> */}\n                <div className=\"dashboard-feed-container-card-row3\">\n                  <div className=\"dashboard-feed-container-card-row3-heading font-paragraph-white\">\n                    {/* {ReactHTMLParser(d.title)} */}\n                  </div>\n                  <div className=\"dashboard-feed-container-card-row3-text font-paragraph-white\">\n                    {/* {ReactHTMLParser(d.text)} */}\n                  </div>\n                </div>\n              </Link>\n              <div className=\"dashboard-feed-container-card-row4\">\n                <span\n                  className=\"dashboard-feed-container-card-row4-click\"\n                  onClick={() => {\n                    if (d.likes.some((like) => like[\"user\"] === userInfo.id)) {\n                      unlikePost(d._id);\n                    } else {\n                      addLike(d._id);\n                    }\n                  }}\n                >\n                  <img\n                    src={\n                      d.likes.some((like) => like[\"user\"] === userInfo.id)\n                        ? Clap\n                        : ClapGray\n                    }\n                    alt=\"\"\n                  />{\" \"}\n                  {d.likes.length}\n                </span>\n                <span\n                  className=\"dashboard-feed-container-card-row4-click\"\n                  onClick={() => {\n                    setOpen(true);\n                    setSelectedPost(d);\n                  }}\n                >\n                  <img src={ChatWhite} alt=\"\" /> {d.comments.length}\n                </span>\n              </div>\n            </div>\n          ))\n        ) : (\n          <h2 className=\"font-heading-white\">No posts here!</h2>\n        )}\n      </div>\n      <div className=\"pagination-container\">\n        <div className=\"pagination-container-inside\">\n          {data && (\n            <Pagination\n              current={pageNumber}\n              onChange={(page) => setPageNumber(page)}\n              itemRender={itemRender}\n              total={totalPosts}\n              pageSize={6}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Feed;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Challenges.js",["905","906","907","908","909"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FlagOutlined } from \"@ant-design/icons\";\nimport MaleBody from \"../../images/Asset-514@4x-1.png\";\nimport FemaleBody from \"../../images/Group 9879.png\";\n// import {\n//   VictoryPie,\n//   VictoryChart,\n//   VictoryBar,\n//   VictoryLabel,\n//   VictoryAxis,\n// } from \"victory\";\n// import { Scrollbars } from \"react-custom-scrollbars\";\nimport \"../../assets/userDashboard.css\";\n\nimport { ReactCompareSlider } from \"react-compare-slider\";\n\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport ForwardIcon from \"../../assets/icons/forward-arrows.png\";\nimport WhiteClock from \"../../assets/icons/clock-white.svg\";\nimport StarOrange from \"../../assets/icons/star-orange.svg\";\nimport PlayerIcon from \"../../assets/icons/player-icon.svg\";\nimport Carousel from \"react-multi-carousel\";\nimport slug from \"elegant-slug\";\nimport { getChallengeProgress } from \"../../services/users\";\nimport { T } from \"../Translate\";\n\nconst responsive = {\n  superLargeDesktop: {\n    // the naming can be any, depends on you.\n    breakpoint: { max: 4000, min: 3000 },\n    items: 4,\n  },\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 2,\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 800 },\n    items: 2,\n  },\n  tablet1: {\n    breakpoint: { max: 800, min: 750 },\n    items: 2,\n  },\n  mobile: {\n    breakpoint: { max: 464, min: 0 },\n    items: 1,\n  },\n};\n\nfunction Challenges({ userProfile, gender, recommandedChal }) {\n  const { height, width } = useWindowDimensions();\n  // eslint-disable-next-line\n  const [myChallenges, setMyChallenges] = useState([]);\n  // eslint-disable-next-line\n  const [myBody, setMybody] = useState({});\n  // eslint-disable-next-line\n  const [myDevelopment, setMyDevelopment] = useState({});\n  const [pics, setPics] = useState([\"\", \"\"]);\n  // eslint-disable-next-line\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\n  const [challengeProgress, setChallengeProgress] = useState([]);\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  useEffect(() => {\n    // -----------------------------------------------------------\n    console.log(\"recommadnchallnge\", recommandedChal.recommendedchallenge);\n    console.log(\"user profile\", userProfile);\n    // -----------------------------------------------------\n\n    setMyDevelopment({\n      weightChart: userProfile.weight.map((w, i) => ({ x: months[i], y: w })),\n      bodyFat: userProfile.bmir,\n    });\n    setPics([userProfile.beforeImageLink, userProfile.afterImageLink]);\n    setMyChallenges(userProfile.challenges);\n\n    recommandedChal &&\n      setRecommandedChallenges(recommandedChal.recommendedchallenge);\n    setMybody({\n      gender: gender,\n      waist: userProfile.waistSize,\n      hip: userProfile.hipSize,\n      breast: userProfile.chestSize,\n      shoulders: userProfile.shoulderSize,\n    });\n  }, [userProfile]);\n\n  useEffect(() => {\n    async function getAllMyChallengeProgress() {\n      console.log(\"yallah\", myChallenges);\n      const res = myChallenges.map(\n        async (c) => await getChallengeProgress(c._id)\n      );\n      const progress = await Promise.all(res);\n      setChallengeProgress(progress);\n      console.log(\"yallah\", progress);\n      console.log(myChallenges);\n      // const res = await getChallengeProgress()\n    }\n    getAllMyChallengeProgress();\n  }, [myChallenges]);\n\n  return (\n    <div>\n      <div className=\"dashboard-feed-container\">\n        <div className=\"dashboard-challenges-row1\">\n          <div className=\"dashboard-challenges-mychallenge\">\n            <div\n              className=\"user-update-container-box-row2-heading font-card-heading-light\"\n              style={{ marginTop: \"8px\" }}\n            >\n              <T>userDashboard.challenges.mcc</T>\n            </div>\n            <div className=\"divider\"></div>\n            {/* todo do later */}\n            {/* <Scrollbars style={{ height: \"500px\" }}>\n              <div className=\"dashboard-challenges-mychallenge-body\">\n                {myChallenges && myChallenges.length > 0 ? (\n                  myChallenges.map((d, i) => (\n                    <Link\n                      to={`/challenge/${slug(d.challengeName)}/${d._id}`}\n                      key={i}\n                    >\n                      <div\n                        className=\"dashboard-challenges-mychallenge-body-box\"\n                        style={{\n                          background: `url(${d.thumbnailLink})`,\n                          backgroundSize: \"cover\",\n                          backgroundPosition: \"50% 50%\",\n                          position: \"relative\",\n                        }}\n                      >\n                        <div\n                          className=\"dashboard-feed-container-card-row2-tag font-paragraph-white\"\n                          style={{ position: \"absolute\", top: \"0\", left: \"0\" }}\n                        >\n                          {d.difficulty && (\n                            <FlagOutlined style={{ paddingRight: \"2px\" }} />\n                          )}\n                          {d.difficulty}\n                        </div>\n                        <div className=\"dashboard-challenges-mychallenge-body-box-insidebox\">\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-name font-heading-white\">\n                            {d.challengeName}\n                          </span>\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-about font-paragraph-white\">\n                            {d.description}\n                          </span>\n                          <img\n                            src={ForwardIcon}\n                            style={{ marginTop: \"5px\" }}\n                            alt=\"forward\"\n                            height=\"15px\"\n                            width=\"40px\"\n                          />\n                        </div>\n                        <div className=\"dashboard-challenges-mychallenge-body-box-insidebox-info\">\n                          <span className=\"dashboard-challenges-mychallenge-body-box-insidebox-completed font-paragraph-white\">\n                            <img\n                              src={WhiteClock}\n                              style={{ marginRight: \"5px\" }}\n                              alt=\"\"\n                            />\n                            Completed{\" \"}\n                            {challengeProgress[i]?.data?.challengeCompletionRate\n                              ? challengeProgress[i]?.data\n                                  ?.challengeCompletionRate\n                              : 0}{\" \"}\n                            %\n                          </span>\n                        </div>\n                      </div>\n                    </Link>\n                  ))\n                ) : (\n                  <h2 className=\"font-heading-white\">\n                    You have not enrolled in any challenges.\n                  </h2>\n                )}\n              </div>\n            </Scrollbars> */}\n          </div>\n          <div className=\"dashboard-challenges-myshape\">\n            <div\n              className=\"dashboard-challenges-mychallenge-heading\"\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                flexWrap: \"wrap\",\n              }}\n            >\n              <span className=\"user-update-container-box-row2-heading font-card-heading-light\">\n                <T>userDashboard.challenges.ms</T>\n              </span>\n\n              <div style={{ marginBottom: \"10px\" }}>\n                <Link\n                  to=\"/user/update\"\n                  className=\"font-paragraph-white hover-orange\"\n                  style={{ fontSize: \"15px\" }}\n                >\n                  <T>userDashboard.challenges.update</T>\n                </Link>\n              </div>\n              <div className=\"divider\"></div>\n            </div>\n            <div className=\"dashboard-challenges-myshape-container\">\n              <ReactCompareSlider\n                itemOne={\n                  <div\n                    className=\"font-paragraph-white\"\n                    style={{ backgroundColor: \"#2F3E50\", height: \"100%\" }}\n                  >\n                    <img src={`${pics[0]}`} alt=\"users-before\" />\n                  </div>\n                }\n                itemTwo={\n                  <div\n                    className=\"font-paragraph-white\"\n                    style={{ backgroundColor: \"#3C618F\", height: \"100%\" }}\n                  >\n                    <img src={`${pics[1]}`} alt=\"users-after\" />\n                  </div>\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"dashboard-challenges-row2\">\n        <div className=\"dashboard-challenges-row2-mydevelopment\">\n          <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\n            <T>userDashboard.challenges.mydev</T>\n          </div>\n          <div className=\"divider\"></div>\n          <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-1\">\n            {/* <VictoryContainer style={{ width: \"50%\" }}> */}\n            {/* <svg viewBox=\"0 0 200 350\"> */}\n            <div style={{ width: \"50%\" }}>\n              {/* todo do later */}\n              {/* <VictoryPie\n                innerRadius={30}\n                padding={10}\n                height={200}\n                width={350}\n                labels={({ datum }) => ``}\n                colorScale={[\"#F37720\", \"#171e27\"]}\n                data={[\n                  { x: \"Body Weight\", y: myDevelopment.bodyFat },\n                  { x: \"\", y: 100 - myDevelopment.bodyFat },\n                ]}\n              /> */}\n            </div>\n            {/* </svg> */}\n            {/* </VictoryContainer> */}\n            <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-1-text\">\n              <span className=\"font-paragraph-white\">\n                {\" \"}\n                <T>userDashboard.challenges.bf</T>\n              </span>\n              <span\n                className=\"font-paragraph-white\"\n                style={{ fontSize: \"4rem\", paddingTop: \"10px\" }}\n              >\n                {myDevelopment.bodyFat} %\n              </span>\n            </div>\n          </div>\n          <div className=\"dashboard-challenges-row2-mydevelopment-insidebox-2\">\n            {/* todo do later */}\n            {/* <VictoryChart\n              // domainPadding={10}\n              height={250}\n            >\n              <VictoryLabel\n                // text=\"Weight Chart\"\n                x={225}\n                y={30}\n                textAnchor=\"middle\"\n                style={{ fill: \"#fff\", opacity: \"0.8\", fontSize: \"1.4rem\" }}\n              />\n              <VictoryBar\n                style={{ data: { fill: \"#F37720\" }, labels: { fill: \"white\" } }}\n                data={myDevelopment.weightChart}\n                labels={({ datum }) => datum.y}\n              />\n              <VictoryAxis\n                style={{\n                  tickLabels: {\n                    fontSize: \"14px\",\n                    fill: \"#fff\",\n                    opacity: \"0.8\",\n                  },\n                }}\n              />\n            </VictoryChart> */}\n          </div>\n        </div>\n        <div className=\"dashboard-challenges-row2-mybody\">\n          <div className=\"user-update-container-box-row2-heading font-card-heading-light\">\n            <T>userDashboard.challenges.mybody</T>\n          </div>\n          <div className=\"divider\"></div>\n          <div style={{ paddingTop: \"30px\" }}>\n            <div style={{ textAlign: \"center\", position: \"relative\" }}>\n              <img\n                src={gender === \"male\" ? MaleBody : FemaleBody}\n                alt=\"human-body\"\n              />\n              {console.log(gender)}\n              <div className=\"body-line body-line1\">\n                <span className=\"font-paragraph-white\">\n                  <T>userDashboard.challenges.breast</T> ({myBody.breast})\n                </span>{\" \"}\n                <div></div>\n              </div>\n              <div className=\"body-line body-line2\">\n                <span className=\"font-paragraph-white\">\n                  <T>userDashboard.challenges.hips</T> ({myBody.hip})\n                </span>{\" \"}\n                <div></div>\n              </div>\n              <div className=\"body-line body-line3\">\n                <div></div>\n                <span className=\"font-paragraph-white\">\n                  <T>userDashboard.challenges.shoulders</T> ({myBody.shoulders})\n                </span>{\" \"}\n              </div>\n              <div className=\"body-line body-line4\">\n                <div></div>\n                <span className=\"font-paragraph-white\">\n                  <T>userDashboard.challenges.waist</T> ({myBody.waist})\n                </span>{\" \"}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"dashboard-challenges-row3\">\n        <div\n          className=\"dashboard-challenges-mychallenge-heading\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          <span className=\"user-update-container-box-row2-heading font-card-heading-light\">\n            <T>userDashboard.challenges.ccfy</T>\n          </span>\n\n          {width > 700 && (\n            <div style={{ marginBottom: \"10px\" }}>\n              <Link\n                to=\"/challenges\"\n                className=\"common-orange-button font-paragraph-white\"\n              >\n                <T>userDashboard.challenges.vac</T>\n              </Link>\n              <Link\n                to=\"/pricing\"\n                style={{ marginLeft: \"10px\" }}\n                className=\"common-transparent-button font-paragraph-white\"\n              >\n                <T>userDashboard.challenges.sp</T>\n              </Link>\n            </div>\n          )}\n          <div className=\"divider\"></div>\n        </div>\n        <div className=\"dashboard-challenges-row3-inbox\">\n          {recommandedChallenges ? (\n            <Carousel responsive={responsive}>\n              {recommandedChallenges.map((challenge) => (\n                <Link\n                  to={`/challenge/${slug(challenge.challengeName)}/${\n                    challenge._id\n                  }`}\n                >\n                  <div\n                    className=\"dashboard-challenges-row3-inbox-challenge\"\n                    style={{\n                      background: `url(${challenge.thumbnailLink})`,\n                      backgroundSize: \"cover\",\n                      backgroundPosition: \"50% 50%\",\n                      position: \"relative\",\n                      height: \"100%\",\n                    }}\n                  >\n                    <div className=\"dashboard-challenges-row3-inbox-challenge-textbox\">\n                      <span\n                        className=\"font-paragraph-white\"\n                        style={{ fontSize: \"2rem\" }}\n                      >\n                        {challenge.challengeName}\n                      </span>\n                      <span\n                        className=\"font-paragraph-white\"\n                        style={{\n                          width: \"70%\",\n                          height: \"50px\",\n                          overflow: \"hidden\",\n                        }}\n                      >\n                        {challenge.description}\n                      </span>\n                      <div>\n                        <img\n                          src={ForwardIcon}\n                          style={{ marginTop: \"5px\" }}\n                          alt=\"forward\"\n                          height=\"15px\"\n                          width=\"40px\"\n                        />\n                      </div>\n                      <div>\n                        {new Array(challenge.rating).fill(0).map((c) => (\n                          <img src={StarOrange} alt=\"\" />\n                        ))}\n                      </div>\n                    </div>\n                    <img\n                      src={PlayerIcon}\n                      style={{\n                        fontSize: \"4rem\",\n                        color: \"var(--color-gray-dark)\",\n                        opacity: \"0.8\",\n                        display: \"flex\",\n                        alignSelf: \"center\",\n                        paddingRight: \"50px\",\n                      }}\n                      alt=\"\"\n                    />\n                  </div>\n                </Link>\n              ))}\n            </Carousel>\n          ) : (\n            <div\n              className=\"font-paragraph-white\"\n              style={{ marginLeft: \"10px\" }}\n            >\n              No challenges found\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Challenges;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\setAuthToken.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\Nutrient.js",["910","911","912","913","914"],"import React, { useState, useEffect, useContext } from \"react\";\nimport \"react-multi-carousel/lib/styles.css\";\nimport \"../../assets/userDashboard.css\";\nimport { Switch, Modal, Checkbox } from \"antd\";\nimport {\n  CaretDownOutlined,\n  CloseSquareFilled,\n  PlusOutlined,\n  HeartFilled,\n} from \"@ant-design/icons\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport { Link } from \"react-router-dom\";\nimport Carousel from \"react-multi-carousel\";\nimport NoFavs from \"../../images/Frame.png\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\n\n// icons\nimport Fire from \"../../assets/icons/fire-orange.svg\";\nimport Weight from \"../../assets/icons/weight-orange.svg\";\nimport Fat from \"../../assets/icons/fat-orange.svg\";\nimport Avacdado from \"../../assets/icons/avocado-light-orange.png\";\nimport Icecream from \"../../assets/icons/icecream.png\";\nimport Sweat from \"../../assets/icons/sweat.png\";\nimport KnifeFork from \"../../assets/icons/knifefork.png\";\nimport Supplements from \"../../assets/icons/supplements.png\";\nimport Carrot from \"../../assets/icons/carrot.png\";\nimport pin from \"../../assets/icons/pushpin.png\";\nimport GrayFire from \"../../assets/icons/gray-fire.png\";\nimport SwapIcon from \"../../assets/icons/swapIcon.png\";\nimport GrayPin from \"../../assets/icons/pushpin-gray.png\";\n\n// import { Scrollbars } from \"react-custom-scrollbars\";\n\nimport {\n  getAllDietTypes,\n  getAllRecipes,\n  getAllFavouriteRecipes,\n  unFavouriteRecipeById,\n} from \"../../services/recipes\";\nimport { createCustomerDetails } from \"../../services/customer\";\nimport { swapRecipeInRecommandedNutrients } from \"../../services/users\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../Translate\";\n\nconst iconsStyle = {\n  color: \"var(--color-orange)\",\n  fontSize: \"3rem\",\n  padding: \"5px\",\n  marginRight: \"10px\",\n  backgroundColor: \"var(--color-gray-dark)\",\n  width: \"35px\",\n  height: \"38px\",\n};\nconst iconsListStyle = {\n  color: \"var(--color-orange)\",\n  fontSize: \"3rem\",\n  padding: \"5px\",\n  marginRight: \"10px\",\n  backgroundColor: \"var(--color-gray-light)\",\n};\nconst responsive = {\n  superLargeDesktop: {\n    // the naming can be any, depends on you.\n    breakpoint: { max: 4000, min: 3000 },\n    items: 5,\n  },\n  desktop: {\n    breakpoint: { max: 3000, min: 1024 },\n    items: 3,\n  },\n  tablet: {\n    breakpoint: { max: 1024, min: 800 },\n    items: 2,\n  },\n  tablet1: {\n    breakpoint: { max: 800, min: 750 },\n    items: 2,\n  },\n  mobile: {\n    breakpoint: { max: 464, min: 0 },\n    items: 1,\n  },\n};\nfunction Nutrient({\n  userProfile,\n  gender,\n  recommandedWeekDiet,\n  getUserDetails,\n}) {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const { height, width } = useWindowDimensions();\n  const [selectedSuplementType, setSelectedSuplementType] = useState(\"none\");\n  const [suplementModal, setSuplementModal] = useState(false);\n  const [selectedDiet, setSelectedDiet] = useState(\"\");\n  // eslint-disable-next-line\n  const [dietSetupModal, setDietSetupModal] = useState(false);\n  // eslint-disable-next-line\n  const [mealsOfTheWeek, setMealsOfTheWeek] = useState({\n    monday: [],\n    tuesday: [],\n    wednesday: [],\n    thursday: [],\n    friday: [],\n    saturday: [],\n    sunday: [],\n  });\n  const [allDiets, setAllDiets] = useState([]);\n  const [currentDay, setCurrentDay] = useState(\"monday\");\n  // eslint-disable-next-line\n  const [bodyOverview, setBodyOverview] = useState({\n    calories: null,\n    bmi: null,\n    bmr: null,\n  });\n  // eslint-disable-next-line\n  const [recommandedNutrition, setRecommandedNutrition] = useState({\n    protein: null,\n    carbohydrates: null,\n    fat: null,\n  });\n  // eslint-disable-next-line\n  const [eatingBehave, setEatingBehave] = useState({\n    eatingLate: false,\n    dietSetup: [],\n  });\n  // eslint-disable-next-line\n  const [selectedrRecipes, setSelectedRecipes] = useState([]);\n  // eslint-disable-next-line\n  const [fav, setFavRecipes] = useState([]);\n  const [ingredientsSummary, setIngredientsSummary] = useState([]);\n  const [pinnedRecipe, setPinnedRecipe] = useState(\"\");\n  // eslint-disable-next-line\n  const [suggestedSupplements, setSuggestedSupplements] = useState([]);\n  const [selectedSupplements, setSelectedSupplements] = useState([]);\n\n  // =\n  useEffect(() => {\n    fetchData();\n    let ingredients = selectedrRecipes.map((recipe) => recipe.ingredients);\n    ingredients = ingredients.flat();\n    ingredients = ingredients.filter(\n      (thing, index, self) =>\n        index === self.findIndex((t) => t.name === thing.name)\n    );\n    const {\n      bmi,\n      bmir,\n      caloriesPerDay,\n      amountOfCarbohydrate,\n      amountOfFat,\n      amountOfProtein,\n      lateMeal,\n      myDiet,\n      supplementIntake,\n    } = userProfile;\n    setIngredientsSummary(ingredients);\n    setBodyOverview({\n      bmi: bmi,\n      bmr: bmir,\n      calories: caloriesPerDay,\n    });\n    setRecommandedNutrition({\n      protein: amountOfProtein,\n      fat: amountOfFat,\n      carbohydrates: amountOfCarbohydrate,\n    });\n    setEatingBehave({\n      ...eatingBehave,\n      eatingLate: lateMeal ? lateMeal : false,\n    });\n    myDiet && myDiet[0] && setSelectedDiet(myDiet[0]._id);\n    supplementIntake &&\n      setSelectedSuplementType(supplementIntake.supplementOption);\n    supplementIntake && setSelectedSupplements(supplementIntake.recipes);\n\n    // setSelectedSuplementType();\n    console.log(\"user profile\", userProfile);\n    console.log(\"recommnaded diet\", recommandedWeekDiet);\n    recommandedWeekDiet &&\n      recommandedWeekDiet.weeklyDietPlan &&\n      setMealsForTheWeek(recommandedWeekDiet.weeklyDietPlan);\n  }, []);\n\n  async function fetchData() {\n    const res = await getAllDietTypes();\n    const rec = await getAllRecipes(localStorage.getItem(\"locale\"));\n    const allFavs = await getAllFavouriteRecipes(userInfo.id);\n    allFavs && setFavRecipes(allFavs.favRecipes);\n\n    setAllDiets(res.diets);\n    setSuggestedSupplements(rec.recipes);\n  }\n\n  const givenObjectFindArray = (obj) => {\n    const g = Object.entries(obj).map((l) => ({ ...l[1], foodType: l[0] }));\n    return g;\n  };\n\n  const swapRecipe = async (meal) => {\n    const res = await swapRecipeInRecommandedNutrients(userInfo.id, meal);\n    console.log(\"swap\", res);\n  };\n\n  const pinRecipe = (id) => {\n    // console.log(id);\n    setPinnedRecipe(id);\n  };\n  const unfouriteReceipe = async (id) => {\n    await unFavouriteRecipeById({ recipeId: id }, userInfo.id);\n    fetchData();\n  };\n  const setMealsForTheWeek = (recipes) => {\n    const obj = {\n      monday: recipes[0] ? givenObjectFindArray(recipes[0]) : [],\n      tuesday: recipes[1] ? givenObjectFindArray(recipes[1]) : [],\n      wednesday: recipes[2] ? givenObjectFindArray(recipes[2]) : [],\n      thursday: recipes[3] ? givenObjectFindArray(recipes[3]) : [],\n      friday: recipes[4] ? givenObjectFindArray(recipes[4]) : [],\n      saturday: recipes[5] ? givenObjectFindArray(recipes[5]) : [],\n      sunday: recipes[6] ? givenObjectFindArray(recipes[6]) : [],\n    };\n    setMealsOfTheWeek(obj);\n    console.log(\"booo\", obj);\n  };\n  const getDietNameFromId = (id) => {\n    const s = allDiets\n      .map((g) => {\n        if (g._id === id) {\n          return g;\n        }\n      })\n      .filter((l) => l !== undefined);\n    return s[0];\n  };\n\n  function remmoveFromSelectedSuplemets(id) {\n    let t = selectedSupplements.filter((s) => s._id !== id);\n    setSelectedSupplements(t);\n  }\n\n  async function saveUserSupplementSettings() {\n    if (selectedSuplementType !== \"none\") {\n      if (selectedSupplements.length < 2) {\n        window.alert(\"Please add atleast 2 supplements\");\n        return;\n      }\n    }\n    const res = await createCustomerDetails(\n      {\n        supplementIntake: {\n          supplementOption: selectedSuplementType,\n          recipes: selectedSuplementType === \"none\" ? [] : selectedSupplements,\n        },\n      },\n      userInfo.id\n    );\n    console.log(\"work please dient\", res);\n    getUserDetails();\n    setSuplementModal(false);\n  }\n\n  async function saveUserDietSetup() {\n    const res = await createCustomerDetails(\n      { myDiet: [selectedDiet] },\n      userInfo.id\n    );\n    // if(res.success === true){\n    //   setS\n    // }\n    getUserDetails();\n    setDietSetupModal(false);\n    console.log(\"work please dient\", res);\n  }\n\n  async function saveUserEatingLateSetting() {\n    setEatingBehave({\n      ...eatingBehave,\n      eatingLate: !eatingBehave.eatingLate,\n    });\n    const res = await createCustomerDetails(\n      { lateMeal: !eatingBehave.eatingLate },\n      userInfo.id\n    );\n    getUserDetails();\n    console.log(\"work please eating late\", res);\n  }\n\n  const addToShoppingCart = (day, meal) => {\n    setSelectedRecipes([\n      ...selectedrRecipes,\n      { id: meal._id, name: meal.name, ingredients: meal.ingredients },\n    ]);\n    console.log(\"mealing\", meal);\n    meal.ingredients &&\n      setIngredientsSummary([...ingredientsSummary, ...meal.ingredients]);\n  };\n\n  const removeFromShoppingCart = (id, ingredients) => {\n    const s = selectedrRecipes.filter((g) => g.id !== id);\n    let i = ingredientsSummary.map((p) => {\n      if (ingredients.some((item) => item._id === p._id)) {\n        // console.log(ingredients.filter((item) => item.id === p._id));\n        return undefined;\n      } else {\n        return p;\n      }\n    });\n\n    i = i.filter(function (el) {\n      return el != null;\n    });\n    setIngredientsSummary(i);\n\n    setSelectedRecipes(s);\n  };\n\n  return (\n    <>\n      {console.log(\"selected\", selectedSupplements, suggestedSupplements)}\n      {/* suplemet modal starts */}\n      <Modal\n        title={\n          <>\n            <div className=\"font-card-heading\">\n              <T>userDashboard.nutrient.sup</T>\n            </div>\n            <div className=\"divider\"></div>\n          </>\n        }\n        bodyStyle={{ marginTop: \"-40px\" }}\n        visible={suplementModal}\n        width={width >= 600 ? \"60%\" : \"100%\"}\n        onCancel={() => setSuplementModal(false)}\n        footer={false}\n      >\n        <div className=\"supplement-container\">\n          <div\n            className=\"diet-setup-container-inbox\"\n            onClick={() => setSelectedSuplementType(\"none\")}\n          >\n            <span className=\"font-paragraph-white\">\n              <T>userDashboard.nutrient.none</T>\n            </span>\n            <Checkbox\n              checked={selectedSuplementType === \"none\" ? true : false}\n              style={{ marginLeft: \"auto\", paddingLeft: \"10px\" }}\n            />\n          </div>\n          <div\n            className=\"diet-setup-container-inbox\"\n            onClick={() => setSelectedSuplementType(\"during-the-day\")}\n          >\n            <span className=\"font-paragraph-white\">\n              <T>userDashboard.nutrient.du</T>\n            </span>\n            <Checkbox\n              checked={\n                selectedSuplementType === \"during-the-day\" ? true : false\n              }\n              style={{ marginLeft: \"auto\", paddingLeft: \"10px\" }}\n            />\n          </div>\n          <div\n            className=\"diet-setup-container-inbox\"\n            onClick={() => setSelectedSuplementType(\"extra-meal\")}\n          >\n            <span className=\"font-paragraph-white\">\n              <T>userDashboard.nutrient.meal</T>\n            </span>\n            <Checkbox\n              checked={selectedSuplementType === \"extra-meal\" ? true : false}\n              style={{ marginLeft: \"auto\", paddingLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n        {selectedSuplementType === \"extra-meal\" ||\n        selectedSuplementType === \"during-the-day\" ? (\n          <>\n            <div className=\"selected-meals-container\">\n              {selectedSupplements.map((meal) => (\n                <div className=\"suggested-meal-container\">\n                  <div\n                    style={{\n                      height: \"150px\",\n                      background: `url(${meal.image})`,\n                      backgroundSize: \"cover\",\n                    }}\n                  ></div>\n                  <div\n                    className=\"font-paragraph-white\"\n                    style={{ fontSize: \"1.8rem\" }}\n                  >\n                    {meal.name}\n                  </div>\n                  <div\n                    className=\"font-paragraph-white\"\n                    style={{ fontSize: \"1.3rem\", opacity: \"0.8\" }}\n                  >\n                    {meal.kCalPerPerson}\n                  </div>\n                  <button\n                    className=\"common-orange-button font-paragraph-white\"\n                    onClick={() => remmoveFromSelectedSuplemets(meal._id)}\n                  >\n                    <T>userDashboard.nutrient.unselect</T>\n                  </button>\n                  <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\n                    <button\n                      className=\"common-transparent-button font-paragraph-white\"\n                      onClick={() => console.log(false)}\n                      style={{ marginLeft: \"10px\" }}\n                    >\n                      <T>userDashboard.nutrient.mi</T>\n                    </button>\n                  </Link>\n                </div>\n              ))}\n            </div>\n            {/* todo do later */}\n            {/* <Scrollbars style={{ height: \"400px\" }}>\n              <div className=\"meals-list-container\">\n                <h3 className=\"font-card-heading\">\n                  <T>userDashboard.nutrient.selectPi</T>\n                </h3>\n                <div className=\"divider\"></div>\n                {suggestedSupplements.map((meal) => (\n                  <div className=\"suggested-meal-container\">\n                    <div\n                      style={{\n                        height: \"150px\",\n                        background: `url(${meal.image})`,\n                        backgroundSize: \"cover\",\n                      }}\n                    ></div>\n                    <div\n                      className=\"font-paragraph-white\"\n                      style={{ fontSize: \"1.8rem\" }}\n                    >\n                      {meal.name}\n                    </div>\n                    <div\n                      className=\"font-paragraph-white\"\n                      style={{ fontSize: \"1.3rem\", opacity: \"0.8\" }}\n                    >\n                      {meal.kCalPerPerson}\n                    </div>\n                    <button\n                      className=\"common-orange-button font-paragraph-white\"\n                      onClick={() => {\n                        if (selectedSupplements.length >= 4) {\n                          window.alert(\"Only 4 supplements can be choosen!\");\n                          return;\n                        }\n                        setSelectedSupplements([...selectedSupplements, meal]);\n                      }}\n                    >\n                      <T>userDashboard.nutrient.select</T>\n                    </button>\n                    <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\n                      <button\n                        className=\"common-transparent-button font-paragraph-white\"\n                        onClick={() => console.log(false)}\n                        style={{ marginLeft: \"10px\" }}\n                      >\n                        <T>userDashboard.nutrient.moreInfo</T>\n                      </button>\n                    </Link>\n                  </div>\n                ))}\n              </div>\n            </Scrollbars> */}\n          </>\n        ) : (\n          \"\"\n        )}\n        <button\n          style={{ marginTop: \"10px\" }}\n          className=\"common-orange-button font-paragraph-white\"\n          onClick={() => saveUserSupplementSettings()}\n        >\n          <T>userDashboard.nutrient.done</T>\n        </button>\n      </Modal>\n      {/* suplemet modal ends */}\n      {/* diet setup modal starts */}\n      <Modal\n        title={\n          <>\n            <div className=\"font-card-heading\">\n              <T>userDashboard.nutrient.ds</T>\n            </div>\n            <div className=\"divider\"></div>\n          </>\n        }\n        bodyStyle={{ marginTop: \"-40px\" }}\n        visible={dietSetupModal}\n        width=\"30%\"\n        onOk={() => saveUserDietSetup()}\n        onCancel={() => saveUserDietSetup()}\n        footer={false}\n      >\n        <div className=\"diet-setup-container\">\n          {allDiets.map((p) => (\n            <div\n              className=\"diet-setup-container-inbox\"\n              onClick={() => setSelectedDiet(p._id)}\n            >\n              {/* <AppleOutlined style={iconsListStyle} /> */}\n              <span className=\"font-paragraph-white\">{p.name}</span>\n              <Checkbox\n                checked={selectedDiet === p._id ? true : false}\n                style={{ marginLeft: \"auto\", paddingLeft: \"10px\" }}\n              />\n            </div>\n          ))}\n        </div>\n        <button\n          className=\"common-orange-button font-paragraph-white\"\n          onClick={() => saveUserDietSetup()}\n        >\n          <T>userDashboard.nutrient.done</T>\n        </button>\n      </Modal>\n      {/* diet setup modal ends */}\n      <div className=\"dashboard-feed-container\">\n        <div className=\"dashboard-nutrient-row1\">\n          <div className=\"dashboard-challenges-mychallenge-heading font-card-heading\">\n            <T>userDashboard.nutrient.currentV</T>\n          </div>\n          <div className=\"divider\"></div>\n          <div className=\"dashboard-nutrient-row1-container\">\n            <div className=\"dashboard-nutrient-row1-col dashboard-nutrient-row1-col1\">\n              <div className=\"dashboard-nutrient-row1-col-heading font-card-heading-light\">\n                <T>userDashboard.nutrient.bodyV</T>\n              </div>\n              <div className=\"divider\"></div>\n              <div className=\"dashboard-nutrient-row1-col-container\">\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Fire} style={iconsStyle} alt=\"\" />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{bodyOverview.calories}</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.calories</T>\n                    </span>\n                  </div>\n                </div>\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Weight} style={iconsStyle} alt=\"\" />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{bodyOverview.bmi}</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.your-bmi</T>\n                    </span>\n                  </div>\n                </div>\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Fat} style={iconsStyle} alt=\"\" />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{bodyOverview.bmr}</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.your-bmr</T>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"dashboard-nutrient-row1-col dashboard-nutrient-row1-col2\">\n              <div className=\"dashboard-nutrient-row1-col-heading font-card-heading-light\">\n                <T>userDashboard.nutrient.nr</T>\n              </div>\n              <div className=\"divider\"></div>\n              <div className=\"dashboard-nutrient-row1-col-container\">\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Avacdado} style={iconsStyle} alt=\"\" />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{recommandedNutrition.protein} %</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.protein</T>\n                    </span>\n                  </div>\n                </div>\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Icecream} alt=\"\" style={iconsStyle} />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{recommandedNutrition.carbohydrates} %</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.carbohydrates</T>\n                    </span>\n                  </div>\n                </div>\n                <div className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\">\n                  <img src={Sweat} alt=\"\" style={iconsStyle} />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>{recommandedNutrition.fat} %</span>\n                    <span style={{ fontSize: \"1.5rem\" }}>\n                      <T>userDashboard.nutrient.fat</T>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"dashboard-nutrient-row1-col dashboard-nutrient-row1-col3\">\n              <div className=\"dashboard-nutrient-row1-col-heading font-card-heading-light\">\n                <T>userDashboard.nutrient.eb</T>\n              </div>\n              <div className=\"divider\"></div>\n              <div className=\"dashboard-nutrient-row1-col-container\">\n                <div\n                  className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"var(--color-gray-dark)\",\n                    borderBottom: \"2px solid black\",\n                    padding: \"15px 0\",\n                  }}\n                >\n                  <img src={KnifeFork} alt=\"\" style={iconsStyle} />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>I'm eating too late</span>\n                    <span style={{ fontSize: \"1.2rem\" }}>\n                      {\" \"}\n                      <Switch\n                        checkedChildren=\"ON\"\n                        checked={eatingBehave.eatingLate}\n                        unCheckedChildren=\"OFF\"\n                        onChange={(e) => saveUserEatingLateSetting()}\n                      />\n                    </span>\n                  </div>\n                  <CaretDownOutlined\n                    style={{\n                      position: \"absolute\",\n                      right: 0,\n                      marginRight: \"10px\",\n                    }}\n                  />\n                </div>\n                <div\n                  className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"var(--color-gray-dark)\",\n                    borderBottom: \"2px solid black\",\n                    cursor: \"pointer\",\n                    padding: \"15px 0\",\n                  }}\n                  onClick={() => setSuplementModal(true)}\n                >\n                  <img src={Supplements} alt=\"\" style={iconsStyle} />\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>Supplement Options</span>\n                    <span style={{ fontSize: \"1.6rem\" }}>\n                      {selectedSuplementType}\n                    </span>\n                  </div>\n                  <CaretDownOutlined\n                    style={{\n                      position: \"absolute\",\n                      right: 0,\n                      marginRight: \"10px\",\n                    }}\n                  />\n                </div>\n                <div\n                  className=\"dashboard-nutrient-row1-col-container-insideBox font-paragraph-white\"\n                  style={{\n                    backgroundColor: \"var(--color-gray-dark)\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => setDietSetupModal(true)}\n                >\n                  <img src={Carrot} alt=\"\" style={iconsStyle} />\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                    }}\n                  >\n                    <span>My diet setup</span>\n                    <span style={{ fontSize: \"1.6rem\" }}>\n                      {getDietNameFromId(selectedDiet)\n                        ? getDietNameFromId(selectedDiet).name\n                        : \"\"}\n                    </span>\n                  </div>\n                  <CaretDownOutlined\n                    style={{\n                      position: \"absolute\",\n                      right: 0,\n                      marginRight: \"10px\",\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* 2nd rpw */}\n      <div className=\"dashboard-nutrient-row2\">\n        <div\n          className=\"dashboard-challenges-mychallenge-heading\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            flexWrap: \"wrap-reverse\",\n          }}\n        >\n          <span className=\"font-card-heading\">\n            <T>userDashboard.nutrient.nfrw</T>\n          </span>\n\n          {width > 700 && (\n            <div style={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\n              <Link\n                to=\"/nutrition\"\n                className=\"common-orange-button font-paragraph-white\"\n              >\n                <T>userDashboard.nutrient.discoverR</T>\n              </Link>\n              <Link\n                to=\"/pricing\"\n                style={{ marginLeft: \"10px\" }}\n                className=\"common-transparent-button font-paragraph-white\"\n              >\n                <T>userDashboard.nutrient.seeP</T>\n              </Link>\n            </div>\n          )}\n        </div>\n\n        <div className=\"dashboard-nutrient-row2-container-days font-paragraph-whites\">\n          <span\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            style={{\n              color:\n                currentDay === \"monday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            onClick={() => setCurrentDay(\"monday\")}\n          >\n            {currentDay === \"monday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.monday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"tuesday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"tuesday\")}\n          >\n            {\" \"}\n            {currentDay === \"tuesday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.tuesday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"wednesday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"wednesday\")}\n          >\n            {currentDay === \"wednesday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.wednesday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"thursday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"thursday\")}\n          >\n            {currentDay === \"thursday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n\n            <T>userDashboard.nutrient.thursday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"friday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"friday\")}\n          >\n            {currentDay === \"friday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.friday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"saturday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"saturday\")}\n          >\n            {currentDay === \"saturday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.saturday</T>\n          </span>\n          <span\n            style={{\n              color:\n                currentDay === \"sunday\" ? \"var(--color-orange)\" : \"#677182\",\n            }}\n            className=\"dashboard-nutrient-row2-container-day font-paragraph-white\"\n            onClick={() => setCurrentDay(\"sunday\")}\n          >\n            {currentDay === \"sunday\" && (\n              <img src={pin} alt=\"\" style={{ marginRight: \"10px\" }} />\n            )}\n            <T>userDashboard.nutrient.sunday</T>\n          </span>\n        </div>\n        <div className=\"divider\"></div>\n        <div className=\"dashboard-nutrient-row2-container\">\n          <Carousel responsive={responsive}>\n            {mealsOfTheWeek[currentDay].length > 0 ? (\n              mealsOfTheWeek[currentDay].map((meal) => (\n                <div\n                  className=\"dashboard-nutrient-row2-container-card\"\n                  style={{\n                    border:\n                      pinnedRecipe === meal._id ? \"3px solid #f37720\" : \"\",\n                  }}\n                  key={meal._id}\n                >\n                  <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\n                    <div\n                      style={{\n                        background: `url(${process.env.REACT_APP_SERVER}/api${meal.image})`,\n                        backgroundSize: \"cover\",\n                        height: \"200px\",\n                      }}\n                    ></div>\n                    <div className=\"dashboard-nutrient-row2-container-card-bob font-paragraph-black\">\n                      {meal.foodType.replace(/[0-9]/g, \"\")}\n                    </div>\n                    <div className=\"dashboard-nutrient-row2-container-card-heading font-paragraph-white\">\n                      {meal.name}\n                    </div>\n                    <div className=\"dashboard-nutrient-row2-container-card-about font-paragraph-white\">\n                      {meal.description}\n                    </div>\n                  </Link>\n                  <div className=\"dashboard-nutrient-row2-container-card-buttons\">\n                    <div className=\"font-paragraph-white\">\n                      <img\n                        src={GrayFire}\n                        alt=\"\"\n                        height=\"16px\"\n                        style={{ margin: \"0 5px\" }}\n                      />\n                      <span>{meal.kCalPerPerson} kCAL</span>\n                    </div>\n                    <div\n                      style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                      onClick={() => pinRecipe(meal._id)}\n                    >\n                      <img\n                        src={meal._id === pinnedRecipe ? pin : GrayPin}\n                        alt=\"\"\n                        height=\"16px\"\n                      />\n                    </div>\n                    <div\n                      style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                      onClick={() => swapRecipe(meal)}\n                    >\n                      <img src={SwapIcon} alt=\"\" height=\"16px\" />\n                    </div>\n                    <button\n                      className=\"font-paragraph-white\"\n                      onClick={() => addToShoppingCart(currentDay, meal)}\n                    >\n                      <PlusOutlined style={{ color: \"#fff\" }} />\n                      <T>userDashboard.nutrient.atsl</T>\n                    </button>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div\n                style={{\n                  margin: \"50px 0\",\n                }}\n              >\n                <h3 className=\"font-paragraph-white\">\n                  {userProfile.myDiet && userProfile.supplementIntake\n                    ? `Sorry, cant find recipes that fills your diet plan. We are\n                    working on making new recipes possible!`\n                    : `Please complete your diet setup so that we can show you, your recommanded recipes`}\n                </h3>\n              </div>\n            )}\n          </Carousel>\n        </div>\n        {width < 700 && (\n          <div\n            style={{\n              marginBottom: \"10px\",\n              marginTop: \"10px\",\n              paddingLeft: \"15px\",\n            }}\n          >\n            <Link\n              to=\"/nutrition\"\n              className=\"common-orange-button font-paragraph-white\"\n            >\n              <T>userDashboard.nutrient.discoverR</T>\n            </Link>\n            <Link\n              to=\"/pricing\"\n              style={{ marginLeft: \"10px\" }}\n              className=\"common-transparent-button font-paragraph-white\"\n            >\n              <T>userDashboard.nutrient.seeP</T>\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"dashboard-nutrient-row3\">\n        <div className=\"dashboard-challenges-mychallenge-heading font-card-heading\">\n          <T>userDashboard.nutrient.mysl</T>\n        </div>\n        <div className=\"divider\"></div>\n        <div className=\"dashboard-nutrient-row3-container\">\n          <div className=\"dashboard-nutrient-row3-container-selectedRecipes\">\n            <div\n              className=\"font-paragraph-white\"\n              style={{ fontSize: \"1.8rem\" }}\n            >\n              <T>userDashboard.nutrient.sr</T>\n            </div>\n            <div className=\"dashboard-nutrient-row3-container-selectedRecipes-container\">\n              {selectedrRecipes.map((recipe) => (\n                <div className=\"recipe-block font-paragraph-white\">\n                  <span style={{ color: \"#f37720\", opacity: \"1\" }}>\n                    {recipe.name}\n                  </span>{\" \"}\n                  <CloseSquareFilled\n                    style={{\n                      fontSize: \"2.4rem\",\n                      cursor: \"pointer\",\n                      color: \"#f37720\",\n                      marginLeft: \"10px\",\n                    }}\n                    onClick={() =>\n                      removeFromShoppingCart(recipe.id, recipe.ingredients)\n                    }\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n          <div className=\"dashboard-nutrient-row3-container-ingredientsSummary\">\n            <div\n              className=\"font-paragraph-white\"\n              style={{ fontSize: \"1.8rem\" }}\n            >\n              <T>userDashboard.nutrient.ingres</T>\n            </div>\n            <div className=\"dashboard-nutrient-row3-container-ingredientsSummary-container\">\n              {ingredientsSummary.map((ingredient) => (\n                <div className=\"ingredientContainer font-paragraph-white\">\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {console.log(\"ingre\", ingredient)}\n                    {ingredient.name.name}\n                  </span>\n                  <span>{ingredient.weight} g</span>\n                </div>\n              ))}\n            </div>\n            <div className=\"dashboard-nutrient-row2-container-card-buttons\">\n              <button\n                className=\"font-paragraph-white\"\n                style={{ width: \"200px\", padding: \"10px\", margin: \"10px\" }}\n              >\n                <T>userDashboard.nutrient.ogl</T>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"dashboard-nutrient-row4\">\n        <div className=\"dashboard-challenges-mychallenge-heading font-card-heading\">\n          <T>userDashboard.nutrient.mfr</T>\n        </div>\n        <div className=\"divider\"></div>\n        {fav.length <= 0 ? (\n          <div className=\"dashboard-nutrient-row4-container\">\n            <div style={{ textAlign: \"center\" }}>\n              <img src={NoFavs} alt=\"no-favs\" />\n              <div\n                className=\"font-paragraph-white\"\n                style={{\n                  color: \"var(--color-orange)\",\n                  fontSize: \"2rem\",\n                  paddingTop: \"5px\",\n                }}\n              >\n                <T>userDashboard.nutrient.nrf</T>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"favourite-recipes-container\">\n            {fav.map((meal) => (\n              <div\n                style={{ width: \"35rem\" }}\n                className=\"dashboard-nutrient-row2-container-card\"\n                key={meal._id}\n              >\n                <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\n                  <div\n                    style={{\n                      background: `url(${meal.image})`,\n                      backgroundSize: \"cover\",\n                      height: \"200px\",\n                    }}\n                  ></div>\n                  <div className=\"dashboard-nutrient-row2-container-card-heading font-paragraph-white\">\n                    {meal.name}\n                  </div>\n                  <div className=\"dashboard-nutrient-row2-container-card-about font-paragraph-white\">\n                    {meal.description}\n                  </div>\n                </Link>\n                <div\n                  className=\"dashboard-nutrient-row2-container-card-buttons\"\n                  style={{ gridTemplateColumns: \"1fr 1fr\" }}\n                >\n                  <div className=\"font-paragraph-white\">\n                    <img src={GrayFire} alt=\"\" style={{ margin: \"0 5px\" }} />\n                    <span>{meal.kCalPerPerson} kCAL</span>\n                  </div>\n                  <div\n                    style={{ cursor: \"pointer\", textAlign: \"center\" }}\n                    onClick={() => unfouriteReceipe(meal._id)}\n                  >\n                    <HeartFilled\n                      style={{\n                        fontSize: \"3rem\",\n                        cursor: \"pointer\",\n                        color: \"#ff7700\",\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default Nutrient;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\VideoCreator.js",["915"],"import React from \"react\";\nimport PlayerState from \"../../../../contexts/PlayerState\";\nimport Workout from \"../Workout/Workout\";\nimport { useBrowserEvents } from \"../../../../helpers/useBrowserEvents\";\n\nfunction VideoCreator({ workoutInfo, handleOnBackToBasicInformation }) {\n  const { reloadWithoutConfirmation } = useBrowserEvents({\n    enableBeforeUnloadConfirm: true,\n    hasUnsavedChanges: true,\n    backForwardMessage:\n      \"You have unsaved changes. Are you sure you want to leave?\",\n    confirmMessage: \"Any unsaved work will be lost. Continue?\",\n    onPopState: (e) => {\n      console.log(\"Navigation detected\", e);\n    },\n    onBeforeUnload: () => {\n      console.log(\"Page is about to unload\");\n    },\n    onPageHide: (e) => {\n      console.log(\"Page hidden, persisted:\", e.persisted);\n    },\n    onVisibilityChange: (state) => {\n      console.log(\"Tab visibility changed:\", state);\n    },\n  });\n\n  return (\n    <PlayerState>\n      <Workout />\n    </PlayerState>\n  );\n}\n\nexport default VideoCreator;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Home\\Hero.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\LanguageSelector\\LanguageSelector.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\BasicInformation.js",["916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932"],"import React, { useState, useEffect, useContext, useCallback } from \"react\";\nimport \"../../../../assets/trainerprofile.css\";\nimport \"../../../../assets/home.css\";\nimport \"../../../../assets/challengeProfile.css\";\nimport Navbar from \"../../../../components/Navbar\";\nimport {\n  LoadingOutlined,\n  DeleteFilled,\n  DownOutlined,\n  UpOutlined,\n} from \"@ant-design/icons\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport {\n  Tooltip,\n  Select,\n  Modal,\n  Input,\n  Button,\n  List,\n  Collapse,\n  Checkbox,\n  notification,\n} from \"antd\";\n\nimport { userInfoContext } from \"../../../../contexts/UserStore\";\nimport { selectedChallengeContext } from \"../../../../contexts/PaymentProcessStore\";\nimport { getUserProfileInfo } from \"../../../../services/users\";\nimport HelpIcon from \"../../../../assets/icons/Help-icon.png\";\nimport ChallengeProfileSubtract from \"../../../../assets/icons/challenge-profile-subtract.svg\";\nimport { T } from \"../../../../components/Translate\";\nimport { LanguageContext } from \"../../../../contexts/LanguageContext\";\nimport \"../../../../assets/adminDashboardV2.css\";\nimport RemoteMediaManager from \"../../MediaManager/RemoteMediaManager\";\nimport PopupPlayer from \"../../../PopupPlayer/PopupPlayer\";\nimport AddNewButton from \"./AddNewButton\";\nimport {\n  createBodyFocus,\n  deleteChallengeBodyfocus,\n  getAllBodyFocus,\n} from \"../../../../services/createChallenge/bodyFocus\";\nimport { getAllChallengeGoals } from \"../../../../services/createChallenge/goals\";\nimport {\n  createTrainerGoal,\n  deleteTrainerGoals,\n  getAllTrainerGoals,\n  getAllTrainers,\n} from \"../../../../services/trainers\";\nimport { getAllChallengeTags } from \"../../../../services/createChallenge/tags\";\nimport EditTypeName from \"../../ChallengeManager/EditTypeName\";\nimport slug from \"elegant-slug\";\nimport WorkoutStudioIcon from \"../../../../assets/icons/workout-studio.svg\";\nimport { useChallenge } from \"../../../../contexts/ChallengeCreatorV2\";\nimport { v4 } from \"uuid\";\nimport {\n  createChallenge,\n  createWorkout,\n  getAllExercises,\n  getAllUserExercises,\n  getChallengeById,\n  updateChallenge,\n  updateWorkoutOnBackend,\n} from \"../../../../services/createChallenge/main\";\nimport { useBrowserEvents } from \"../../../../helpers/useBrowserEvents\";\nimport DragAndDropIcon from \"../../../../assets/icons/drag-drop.svg\";\nimport CopyIcon from \"../../../../assets/icons/copy-icon.svg\";\nimport DeleteIcon from \"../../../../assets/icons/delete_icon.svg\";\nimport DeleteWhite from \"../../../../assets/icons/delete-icon-white.svg\";\nimport CopyIconWhite from \"../../../../assets/icons/copy-icon-white.svg\";\nimport DragAndDropIconWhite from \"../../../../assets/icons/drag-drop-icon-white.svg\";\nimport {\n  DraggableArea,\n  DraggableItem,\n  DraggableHandle,\n  ItemTypeWeek,\n  ItemTypeWorkout,\n} from \"../../../../helpers/DndWrapper.jsx\";\nimport { debounce } from \"lodash\";\n\nconst tooltipText = `\nIf you don’t choose any plan and hit start now, you can go through the wizard, get your free intake, make a free account and enjoy our free challenges collection and one week meal plan. \n`;\nconst iconStyle = {\n  cursor: \"pointer\",\n  height: \"20px\",\n  width: \"20px\",\n};\n\nfunction BasicInformation(props) {\n  const { language, updateLanguage } = useContext(LanguageContext);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [isUpdate, setIsUpdate] = useState(false);\n  const {\n    showVideoCreator,\n    setShowVideoCreator,\n    usereDtails,\n    setUserDetails,\n    loading,\n    setLoading,\n    thumbnail,\n    setThumbnail,\n    videoThumbnail,\n    setVideoThumbnail,\n    challengeName,\n    setChallengeName,\n    challengeDescription,\n    setChallengeDescription,\n    difficulty,\n    setDifficulty,\n    duration,\n    setDuration,\n    openPopupPlayer,\n    setOpenPopupPlayer,\n    pack,\n    setPack,\n    customPrice,\n    setCustomPrice,\n    challengeInfo,\n    setChallengeInfo,\n    result,\n    setResult,\n    selectedFitnessInterest,\n    setSelectedFitnessInterest,\n    selectedBodyFocus,\n    setSelectedBodyFocus,\n    selectedGoals,\n    setSelectedGoals,\n    seletedTrainers,\n    setSelectedTrainers,\n    allTrainers,\n    setAllTrainers,\n    allFitnessInterests,\n    setAllFitnessInterests,\n    allBodyFocus,\n    setAllBodyFocus,\n    showChangePanel,\n    setShowChangePanel,\n    allGoals,\n    setAllGoals,\n    weeks,\n    setWeeks,\n    musics,\n    setMusics,\n    selectedWorkoutForStudioId,\n    setSelectedWorkoutForStudioId,\n    allExercises,\n    setAllExercises,\n    populateChallengeInfo,\n    isFirstRender,\n    setIsFirstRender,\n  } = useChallenge();\n  const [dataLoaded, setDataLoaded] = useState(false); // Track when all setters are done\n\n  // media manager\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // update\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n  // manage\n  const [fitnessInterestModal, setFitnessInterestModal] = useState(false);\n  const [newTrainerFitnessInterest, setNewTrainerFitnessInterest] =\n    useState(\"\");\n  const [bodyFocusModal, setBodyfocusModal] = useState(false);\n  const [newBodyFocus, setNewBodyFocus] = useState(\"\");\n  const [goalsModal, setGoalsModal] = useState(false);\n  const [trainerModal, setTrainerModal] = useState(false);\n  const [errors, setErrors] = useState({});\n  const { reloadWithoutConfirmation } = useBrowserEvents({\n    enableBeforeUnloadConfirm: true,\n    hasUnsavedChanges: true,\n    backForwardMessage:\n      \"You have unsaved changes in this challenge. Are you sure you want to leave?\",\n    confirmMessage: \"Any unsaved work will be lost. Continue?\",\n    onPopState: (e) => {\n      console.log(\"Navigation detected\", e);\n    },\n    onBeforeUnload: () => {\n      console.log(\"Page is about to unload\");\n    },\n    onPageHide: (e) => {\n      console.log(\"Page hidden, persisted:\", e.persisted);\n    },\n    onVisibilityChange: (state) => {\n      console.log(\"Tab visibility changed:\", state);\n    },\n  });\n\n  const fetchDataV2 = async () => {\n    setLoading(true);\n    // if user is trainer we need to get his info\n    if (userInfo.role === \"trainer\") {\n      const uInfo = await getUserProfileInfo(userInfo.id);\n      uInfo &&\n        seletedTrainers.length <= 0 &&\n        setSelectedTrainers((prev) => [...prev, uInfo.customer]);\n      setUserDetails(uInfo.customer);\n    }\n    const bodyFocus = await getAllBodyFocus(language);\n    const trainers = await getAllTrainers(language);\n    const res = await getAllTrainerGoals(language);\n    const allExercises = await getAllExercises(language);\n    setAllBodyFocus(bodyFocus.body);\n    setAllTrainers(trainers.trainers);\n    setAllFitnessInterests(res.goals);\n    setAllExercises(allExercises.exercises);\n\n    setDataLoaded(true); // Set dataLoaded to true after all setters are done\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    console.log(\"isFirstRender\", isFirstRender);\n    // Call populateChallengeInfo only when data is loaded\n    if (dataLoaded && props.match.params.challengeId) {\n      setIsUpdate(true);\n    }\n    if (dataLoaded && props.match.params.challengeId && !isFirstRender) {\n      const fetchChallenge = async () => {\n        setLoading(true);\n        const challenge = await getChallengeById(\n          props.match.params.challengeId,\n          language\n        );\n\n        populateChallengeInfo(challenge);\n        setLoading(false);\n        setIsFirstRender(true);\n      };\n      fetchChallenge();\n    }\n  }, [dataLoaded, props.match.params.challengeId, language]);\n\n  useEffect(() => {\n    if (userInfo) {\n      fetchDataV2();\n    }\n  }, [userInfo, language]);\n\n  const openForThumbnail = () => {\n    setErrors((prev) => ({\n      ...prev,\n      thumbnail: \"\",\n    }));\n    setMediaManagerVisible(true);\n    setMediaManagerType(\"images\");\n    setMediaManagerActions([thumbnail, setThumbnail]);\n  };\n\n  const openForTrailer = () => {\n    setErrors((prev) => ({\n      ...prev,\n      videoThumbnail: \"\",\n    }));\n    setMediaManagerVisible(true);\n    setMediaManagerType(\"videos\");\n    setMediaManagerActions([videoThumbnail, setVideoThumbnail]);\n  };\n  const openTailerPlayer = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (videoThumbnail) {\n      // show video player\n      setOpenPopupPlayer(true);\n    }\n  };\n\n  const onAddTrainer = () => {\n    setTrainerModal(true);\n  };\n\n  const onAddBodyFocus = () => {\n    setBodyfocusModal(true);\n  };\n\n  const onAddGoals = () => {\n    setErrors((prev) => ({\n      ...prev,\n      selectedGoals: \"\",\n    }));\n\n    setGoalsModal(true);\n  };\n\n  const onAddFitnessInterests = () => {\n    setFitnessInterestModal(true);\n  };\n\n  const onAddInfo = () => {\n    const newChallengeInfo = challengeInfo ? [...challengeInfo] : [];\n    newChallengeInfo.push(\"\");\n    setChallengeInfo(newChallengeInfo);\n  };\n\n  const onAddWeek = () => {\n    const newWeeks = weeks ? [...weeks] : [];\n    newWeeks.push({\n      id: v4(),\n      weekName: \"\",\n      weekSubtitle: \"\",\n      workouts: [],\n    });\n    setWeeks(newWeeks);\n  };\n\n  const onAddWorkout = (weekId) => {\n    const newWeeks = [...weeks];\n    const weekIndex = newWeeks.findIndex(\n      (week) => week.id === weekId || week._id === weekId\n    );\n    if (weekIndex !== -1) {\n      newWeeks[weekIndex].workouts.push({\n        id: v4(),\n        title: \"\",\n        subtitle: \"\",\n        renderWorkout: false,\n        exercises: [\n          {\n            break: 5,\n            createdAt: \"\",\n            exerciseGroupName: \"Introduction\",\n            exerciseLength: 0,\n            title: \"Introduction to workout\",\n            videoURL: \"\",\n            voiceOverLink: \"\",\n            id: v4(),\n          },\n        ],\n        equipments: [],\n        infoFile: null,\n      });\n      setWeeks(newWeeks);\n    }\n  };\n\n  const handleSaveChallenge = async () => {\n    setLoading(true);\n\n    const errors = [];\n    const errorToShow = {};\n    if (!challengeName) {\n      errors.push(\"Challenge Name is required\");\n      errorToShow.challengeName = \"Challenge Name is required\";\n    }\n    // if (!challengeDescription) {\n    //   errors.push(\"Description is required\");\n    //   errorToShow.challengeDescription = \"Description is required\";\n    // }\n    if (!pack) {\n      errors.push(\"Select a pack\");\n      errorToShow.pack = \"Select a pack\";\n    }\n    if (\n      pack === \"CHALLENGE_1\" &&\n      (customPrice === \"\" ||\n        customPrice === null ||\n        customPrice === undefined ||\n        customPrice < 0)\n    ) {\n      errors.push(\"Price is required\");\n      errorToShow.customPrice = \"Price is required\";\n    }\n\n    // if (!thumbnail) {\n    //   errors.push(\"Thumbnail is required\");\n    //   errorToShow.thumbnail = \"Thumbnail is required\";\n    // }\n    // if (!videoThumbnail) {\n    //   errorToShow.videoThumbnail = \"Video Thumbnail is required\";\n    //   errors.push(\"Video Thumbnail is required\");\n    // }\n    // if (!duration) {\n    //   errorToShow.duration = \"Duration is required\";\n    //   errors.push(\"Duration is required\");\n    // }\n    // if (!difficulty) errors.push(\"Difficulty is required\");\n    if (!seletedTrainers || seletedTrainers.length === 0)\n      errors.push(\"At least one Trainer is required\");\n    // if (!selectedGoals || selectedGoals.length === 0) {\n    //   errors.push(\"At least one Goal is required\");\n    //   errorToShow.selectedGoals = \"At least one Goal is required\";\n    // }\n\n    setErrors(errorToShow);\n    if (errors.length > 0) {\n      notification.error({\n        message: \"Please fill all required fields\",\n        description: (\n          <ul>\n            {errors.map((err, idx) => (\n              <li key={idx}>{err}</li>\n            ))}\n          </ul>\n        ),\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const obj = {\n        language: language,\n        challengeName: challengeName,\n        description: challengeDescription,\n        price: customPrice,\n        points: 100,\n        currency: \"€\",\n        thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\n        videoThumbnailLink:\n          typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\n        trainers: seletedTrainers,\n        trainersFitnessInterest: selectedFitnessInterest,\n        challengeGoals: selectedGoals.map((s) => {\n          if (typeof s === \"object\") {\n            return s.name;\n          } else {\n            return s;\n          }\n        }),\n        difficulty: difficulty,\n        body: selectedBodyFocus,\n        access: pack,\n        duration: duration,\n        videoLink:\n          typeof videoThumbnail === \"object\"\n            ? videoThumbnail.link\n            : videoThumbnail,\n        weeks: await handleWeeksForUpdate(weeks, isUpdate),\n        music: musics.map((m) => ({\n          name: m.name,\n          url: m.link,\n        })),\n        additionalProducts: [],\n        results: result,\n        informationList: challengeInfo\n          ? challengeInfo.map((i) => ({\n              info: i,\n              icon: \"\",\n            }))\n          : [],\n        allowComments: true,\n        allowReviews: true,\n        isPublic: true,\n      };\n      console.log(\"us update\", isUpdate);\n      if (isUpdate) {\n        await updateChallenge(obj, props.match.params.challengeId);\n        reloadWithoutConfirmation();\n      } else {\n        const res = await createChallenge(obj);\n        props.history.push(`/admin/v2/challenge-studio/${res.weeks._id}`);\n      }\n    } catch (err) {\n      console.log(\"Error saving challenge:\", err);\n      setLoading(false);\n    }\n    setLoading(false);\n  };\n\n  const handleWeeksForUpdate = async (weeks, isUpdate) => {\n    // Helper function to transform workout data to be consistent format for both create and update\n    const transformWorkout = (workout) => {\n      // Extract intro exercise if it exists\n      const introExercise = workout.exercises[0];\n      const remainingExercises = introExercise\n        ? workout.exercises.slice(1)\n        : workout.exercises;\n\n      return {\n        // Include _id only when updating existing workout\n        ...(workout._id && { _id: workout._id }),\n        title: workout.title,\n        subtitle: workout.subtitle,\n        infotitle: \"Workout info file\",\n        infoFile:\n          workout.infoFile && typeof workout.infoFile === \"object\"\n            ? workout.infoFile.link\n            : \"\",\n        relatedEquipments: workout.equipments\n          ? workout.equipments.map((eq) => eq._id)\n          : [],\n        relatedProducts: [],\n        introVideoLink: introExercise ? introExercise.videoURL : \"\",\n        introVideoLength: introExercise ? introExercise.exerciseLength : \"\",\n        isRendered: workout.renderWorkout,\n        exercises: workout.renderWorkout\n          ? remainingExercises.map((e) => ({\n              exerciseId: e.exerciseId,\n              exerciseLength: e.exerciseLength,\n              break: e.break,\n              groupName: e.exerciseGroupName,\n            }))\n          : remainingExercises.map((e) => ({\n              renderedWorkoutExerciseName: e.title,\n              renderedWorkoutExerciseVideo: e.videoURL,\n            })),\n      };\n    };\n\n    // Helper function to transform week data into desired format\n    const transformWeek = (week) => {\n      const { id, weekId, weekTitle, workouts, ...weekData } = week;\n      return weekData;\n    };\n\n    if (isUpdate) {\n      const weekPromises = weeks.map(async (week) => {\n        // Process each workout inside this week\n        const workoutPromises = week.workouts.map(async (workout) => {\n          const transformedWorkout = transformWorkout(workout);\n\n          if (workout._id) {\n            await updateWorkoutOnBackend([transformedWorkout]);\n            return workout._id;\n          } else {\n            const newWorkout = await updateWorkoutOnBackend([\n              transformedWorkout,\n            ]);\n            const ids = newWorkout.map((w) => w.data.data);\n            return ids[0];\n          }\n        });\n\n        // Wait for all workouts to be processed\n        const workoutIds = await Promise.all(workoutPromises);\n        console.log(\"workoutIds\", workoutIds, workoutPromises);\n\n        // Return transformed week data with workout IDs\n        const transformedWeek = transformWeek(week);\n        transformedWeek.workouts = workoutIds;\n\n        return transformedWeek;\n      });\n\n      // Wait for all weeks to be processed\n      return Promise.all(weekPromises);\n    } else {\n      // For non-update mode, transform without API calls\n      return weeks.map((week) => {\n        const transformedWeek = transformWeek(week);\n        transformedWeek.workout = week.workouts.map((workout) =>\n          transformWorkout(workout)\n        );\n        return transformedWeek;\n      });\n    }\n  };\n\n  const duplicateWeek = (week) => {\n    const duplicateWeek = {\n      id: v4(),\n      weekName: week.weekName,\n      weekSubtitle: week.weekSubtitle,\n      workouts: week.workouts.map((workout) => ({\n        title: workout.title,\n        subtitle: workout.subtitle,\n        renderWorkout: workout.renderWorkout,\n        equipments: [],\n        infoFile: workout.infoFile,\n        exercises: workout.exercises.map((exercise) => ({\n          ...exercise,\n          id: v4(),\n        })),\n        id: v4(),\n      })),\n    };\n\n    setWeeks((prevWeeks) => [...prevWeeks, duplicateWeek]);\n  };\n\n  const duplicateWorkout = (weekId, workout) => {\n    const newWorkout = {\n      title: workout.title,\n      subtitle: workout.subtitle,\n      renderWorkout: workout.renderWorkout,\n      equipments: workout.equipments || [],\n      infoFile: workout.infoFile,\n      id: v4(),\n      exercises: workout.exercises.map((exercise) => ({\n        ...exercise,\n        id: v4(),\n      })),\n    };\n\n    setWeeks((prevWeeks) =>\n      prevWeeks.map((week) =>\n        week.id === weekId || week._id === weekId\n          ? { ...week, workouts: [...week.workouts, newWorkout] }\n          : week\n      )\n    );\n  };\n\n  const handleWorkoutReorder = (newworkoutOrder, weekIndex) => {\n    // new workout ordered ids\n    const newOrderIds = newworkoutOrder.map((workout) => workout.key);\n    // now order workouts in week\n    setWeeks((prevWeeks) => {\n      const updatedWeeks = [...prevWeeks];\n      const week = updatedWeeks[weekIndex];\n      // Map the new order of ids to the actual workout objects\n      week.workouts = newOrderIds.map((key) =>\n        week.workouts.find((w) => (w.id || w._id) === key)\n      );\n      return updatedWeeks;\n    });\n  };\n\n  const handleWeekReorder = (newWeekOrder) => {\n    // new week ordered ids\n    const newOrderIds = newWeekOrder.map((week) => week.key);\n    // console.log(\"newOrderIds\", newOrderIds, newWeekOrder);\n    // now order weeks\n    setWeeks((prevWeeks) => {\n      const updatedWeeks = [...prevWeeks];\n      // Map the new order of ids to the actual week objects\n      return newOrderIds.map((key) =>\n        updatedWeeks.find((w) => (w.id || w._id) === key)\n      );\n    });\n  };\n\n  return (\n    <div>\n      {loading && (\n        <div\n          style={{\n            background: \"traceparent\",\n            height: \"100vh\",\n            zIndex: \"9999\",\n            position: \"fixed\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n\n            width: \"100%\",\n          }}\n        >\n          <LoadingOutlined style={{ fontSize: \"80px\", color: \"#ff7700\" }} />\n        </div>\n      )}\n      <Navbar />\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fetchDataV2}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n\n      <PopupPlayer\n        open={openPopupPlayer}\n        onCancel={() => setOpenPopupPlayer(false)}\n        video={videoThumbnail?.link}\n      />\n\n      {/* modal to create a new trainer goal */}\n      <Modal\n        onCancel={() => setFitnessInterestModal(false)}\n        footer={false}\n        visible={fitnessInterestModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\"> Create A New Fitness Interest</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newTrainerFitnessInterest}\n            onChange={(e) => setNewTrainerFitnessInterest(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newTrainerFitnessInterest.length > 0) {\n                await createTrainerGoal({\n                  name: newTrainerFitnessInterest,\n                  language: language,\n                });\n                // setShowBodyfocusModal(false);\n                fetchDataV2();\n              }\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Fitness Interests</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allFitnessInterests}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{g.name}</span>\n\n                <span>\n                  <Button\n                    onClick={() => {\n                      setSelectedFitnessInterest((prev) => {\n                        const isExist = prev.find((item) => item._id === g._id);\n                        if (isExist) {\n                          return prev.filter((item) => item._id !== g._id);\n                        } else {\n                          return [...prev, g];\n                        }\n                      });\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                  >\n                    {selectedFitnessInterest.find((item) => item._id === g._id)\n                      ? \"Unselect\"\n                      : \"Select\"}\n                  </Button>\n\n                  <Button\n                    onClick={async () => {\n                      await deleteTrainerGoals(g._id);\n                      setSelectedFitnessInterest((prev) =>\n                        prev.filter((item) => item._id !== g._id)\n                      );\n                      fetchDataV2();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Fitness Interest\");\n                      setSelectedItemForUpdate(g);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      <Modal\n        onCancel={() => setBodyfocusModal(false)}\n        footer={false}\n        visible={bodyFocusModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\"> Create A New Body focus</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newBodyFocus}\n            onChange={(e) => setNewBodyFocus(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newBodyFocus.length > 0) {\n                await createBodyFocus(newBodyFocus);\n\n                fetchDataV2();\n              }\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Body Focus</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allBodyFocus}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{g.name}</span>\n\n                <span>\n                  <Button\n                    onClick={() => {\n                      setSelectedBodyFocus((prev) => {\n                        const isExist = prev.find((item) => item._id === g._id);\n                        if (isExist) {\n                          return prev.filter((item) => item._id !== g._id);\n                        } else {\n                          return [...prev, g];\n                        }\n                      });\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                  >\n                    {selectedBodyFocus.find((item) => item._id === g._id)\n                      ? \"Unselect\"\n                      : \"Select\"}\n                  </Button>\n\n                  <Button\n                    onClick={async () => {\n                      await deleteChallengeBodyfocus(g._id);\n                      setSelectedBodyFocus((prev) =>\n                        prev.filter((item) => item._id !== g._id)\n                      );\n                      fetchDataV2();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Body Focus\");\n                      setSelectedItemForUpdate(g);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      <Modal\n        onCancel={() => setGoalsModal(false)}\n        footer={false}\n        visible={goalsModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\">All Body Focus</p>\n        <div style={{ height: \"200px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allGoals}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{g.name}</span>\n\n                <span>\n                  <Button\n                    onClick={() => {\n                      setSelectedGoals((prev) => {\n                        const isExist = prev.find((item) => item._id === g._id);\n                        if (isExist) {\n                          return prev.filter((item) => item._id !== g._id);\n                        } else {\n                          return [...prev, g];\n                        }\n                      });\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                  >\n                    {selectedGoals.find((item) => item._id === g._id)\n                      ? \"Unselect\"\n                      : \"Select\"}\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      <Modal\n        onCancel={() => setTrainerModal(false)}\n        footer={false}\n        visible={trainerModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\">All Trainers</p>\n        <div style={{ height: \"200px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allTrainers}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>\n                  {g.firstName} {g.lastName}\n                </span>\n\n                <span>\n                  {g._id !== usereDtails._id && (\n                    <Button\n                      onClick={() => {\n                        setSelectedTrainers((prev) => {\n                          const isExist = prev.find(\n                            (item) => item._id === g._id\n                          );\n                          if (isExist) {\n                            return prev.filter((item) => item._id !== g._id);\n                          } else {\n                            return [...prev, g];\n                          }\n                        });\n                      }}\n                      style={{ marginRight: \"10px\" }}\n                      type=\"primary\"\n                    >\n                      {seletedTrainers.find((item) => item._id === g._id)\n                        ? \"Unselect\"\n                        : \"Select\"}\n                    </Button>\n                  )}\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      {/* end */}\n\n      {/* main page starts now */}\n      <div\n        style={{\n          background: \"#2a2f37\",\n        }}\n      >\n        <div className=\"trainer-profile-container\">\n          <div\n            className=\"trainer-profile-container-column1 adminV2-bi-trainer-profile-container-column1\"\n            onClick={openForThumbnail}\n            style={{\n              background: `linear-gradient(rgba(23, 30, 39, 0), rgb(23, 30, 39)), url(${thumbnail?.link})`,\n              border: errors.thumbnail && \"2px solid red\",\n              cursor: \"pointer\",\n            }}\n          >\n            <div\n              className=\"profile-box adminV2-bi-profile-box\"\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n              }}\n            >\n              <div className=\"challenge-profile-box-1 adminV2-bi-challenge-profile-box-1\">\n                <div\n                  onClick={openForTrailer}\n                  style={{\n                    border: errors.videoThumbnail && \"2px solid red\",\n                  }}\n                >\n                  <p className=\"font-paragraph-white adminV2-bi-trailername\">\n                    {videoThumbnail ? videoThumbnail.link : \"Add Trailer\"}\n                  </p>\n                  <img\n                    src={ChallengeProfileSubtract}\n                    alt=\"\"\n                    onClick={openTailerPlayer}\n                    style={{ cursor: \"pointer\" }}\n                  />\n                </div>\n                <input\n                  placeholder=\"Challenge Name\"\n                  style={{\n                    border: errors.challengeName && \"2px solid red\",\n                  }}\n                  className=\"font-heading-white adminV2-bi-input\"\n                  onChange={(e) => {\n                    if (errors.challengeName) {\n                      setErrors((prev) => ({\n                        ...prev,\n                        challengeName: \"\",\n                      }));\n                    }\n                    setChallengeName(e.target.value);\n                  }}\n                  value={challengeName}\n                />\n              </div>\n              <div className=\"challenge-profile-box-2 adminV2-bi-challenge-profile-box-2\">\n                <div className=\"challenge-profile-box-2-info\">\n                  <Select\n                    defaultValue={difficulty}\n                    style={{ width: \"100%\" }}\n                    placeholder=\"Please select\"\n                    value={difficulty}\n                    onChange={(e) => setDifficulty(e)}\n                    className=\"font-paragraph-white adminV2-bi-input\"\n                  >\n                    <Select.Option value=\"high\">High</Select.Option>\n                    <Select.Option value=\"medium\">Medium</Select.Option>\n                    <Select.Option value=\"low\">Low</Select.Option>\n                  </Select>\n\n                  <input\n                    placeholder=\"Duration in minutes\"\n                    className=\"font-paragraph-white adminV2-bi-input\"\n                    onChange={(e) => {\n                      if (errors.duration) {\n                        setErrors((prev) => ({\n                          ...prev,\n                          duration: \"\",\n                        }));\n                      }\n                      setDuration(e.target.value);\n                    }}\n                    value={duration}\n                    type=\"number\"\n                    style={{\n                      border: errors.duration && \"2px solid red\",\n                    }}\n                  />\n                </div>\n\n                <textarea\n                  rows={4}\n                  placeholder=\"Add challenge description\"\n                  className=\"font-paragraph-white adminV2-bi-input\"\n                  onChange={(e) => {\n                    if (errors.challengeDescription) {\n                      setErrors((prev) => ({\n                        ...prev,\n                        challengeDescription: \"\",\n                      }));\n                    }\n                    setChallengeDescription(e.target.value);\n                  }}\n                  value={challengeDescription}\n                  style={{\n                    height: \"auto\",\n                    width: \"100%\",\n                    resize: \"vertical\",\n                    border: errors.challengeDescription && \"2px solid red\",\n                  }} // Optional: Allow resizing vertically\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"trainer-profile-container-column2\">\n            {/* trainers */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                <T>challenge_profile.trainers</T>\n              </div>\n\n              <div className=\"challenge-trainers-container\">\n                {seletedTrainers.map((trainer) => (\n                  <div\n                    className=\"challenge-trainer-box\"\n                    style={{ background: \"#283443\", position: \"relative\" }}\n                  >\n                    <span\n                      style={{\n                        backgroundImage: `url(${trainer.avatarLink})`,\n                        backgroundPosition: \"center center\",\n                        backgroundSize: \"cover\",\n                        backgroundRepeat: \"no-repeat\",\n                        height: \"50px\",\n                        width: \"60px\",\n                      }}\n                    ></span>\n\n                    <a\n                      href={`/trainer/${slug(trainer.firstName)}/${\n                        trainer._id\n                      }`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\" // For security reasons\n                      className=\"challenge-trainer-box-text font-paragraph-white\"\n                    >\n                      {trainer.firstName + \" \" + trainer.lastName}\n                    </a>\n                    {trainer._id !== usereDtails._id && (\n                      <img\n                        src={DeleteWhite}\n                        alt=\"delete\"\n                        onClick={() => {\n                          const newSelectedFitnessInterest =\n                            seletedTrainers.filter(\n                              (item) => item._id !== trainer._id\n                            );\n                          setSelectedTrainers(newSelectedFitnessInterest);\n                        }}\n                        style={{\n                          color: \"#ff7700\",\n                          fontSize: \"16px\",\n                          position: \"absolute\",\n                          right: \"20px\",\n                          cursor: \"pointer\",\n                          zIndex: \"9999\",\n                          height: \"20px\",\n                          width: \"20px\",\n                        }}\n                      />\n                    )}\n                  </div>\n                ))}\n\n                <AddNewButton\n                  style={{ margin: \"5px\" }}\n                  onClick={onAddTrainer}\n                />\n              </div>\n            </div>\n            {/* fitness interest */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                FITNESS INTERESTS\n              </div>\n              <div className=\"trainer-profile-goals-container\">\n                {selectedFitnessInterest.map((interest) => (\n                  <div\n                    className=\"trainer-profile-goal font-paragraph-white\"\n                    style={{\n                      marginRight: \"1px\",\n                      background: \"#283443\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                    }}\n                    key={interest._id}\n                  >\n                    <span>{interest.name}</span>\n                    <DeleteFilled\n                      onClick={() => {\n                        const newSelectedFitnessInterest =\n                          selectedFitnessInterest.filter(\n                            (item) => item !== interest\n                          );\n                        setSelectedFitnessInterest(newSelectedFitnessInterest);\n                      }}\n                      style={{\n                        color: \"#ff7700\",\n                        fontSize: \"14px\",\n                        marginLeft: \"5px\",\n                        cursor: \"pointer\",\n                      }}\n                    />\n                  </div>\n                ))}\n\n                <AddNewButton\n                  onClick={onAddFitnessInterests}\n                  type=\"small\"\n                  style={{\n                    marginLeft: \"10px\",\n                    height: \"36px\",\n                    marginTop: \"5px\",\n                  }}\n                />\n              </div>\n            </div>\n            {/* body focus */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                BODY FOCUS\n              </div>\n              <div className=\"trainer-profile-goals-container\">\n                {selectedBodyFocus.map((interest) => (\n                  <div\n                    className=\"trainer-profile-goal font-paragraph-white\"\n                    style={{\n                      marginRight: \"1px\",\n                      background: \"#283443\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                    }}\n                    key={interest._id}\n                  >\n                    <span>{interest.name}</span>\n                    <DeleteFilled\n                      onClick={() => {\n                        const newSelectedFitnessInterest =\n                          selectedBodyFocus.filter(\n                            (item) => item._id !== interest._id\n                          );\n                        setSelectedBodyFocus(newSelectedFitnessInterest);\n                      }}\n                      style={{\n                        color: \"#ff7700\",\n                        fontSize: \"14px\",\n                        marginLeft: \"5px\",\n                        cursor: \"pointer\",\n                      }}\n                    />\n                  </div>\n                ))}\n\n                <AddNewButton\n                  onClick={onAddBodyFocus}\n                  type=\"small\"\n                  style={{\n                    marginLeft: \"10px\",\n                    height: \"36px\",\n                    marginTop: \"5px\",\n                  }}\n                />\n              </div>\n            </div>\n            {/* goals */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                GOALS\n              </div>\n              <div className=\"trainer-profile-goals-container\">\n                {selectedGoals.map((interest) => (\n                  <div\n                    className=\"trainer-profile-goal font-paragraph-white\"\n                    style={{\n                      marginRight: \"1px\",\n                      background: \"#283443\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                    }}\n                    key={interest._id}\n                  >\n                    <span>{interest.name}</span>\n                    <DeleteFilled\n                      onClick={() => {\n                        const newSelectedFitnessInterest =\n                          selectedBodyFocus.filter(\n                            (item) => item._id !== interest._id\n                          );\n                        setSelectedGoals(newSelectedFitnessInterest);\n                      }}\n                      style={{\n                        color: \"#ff7700\",\n                        fontSize: \"14px\",\n                        marginLeft: \"5px\",\n                        cursor: \"pointer\",\n                      }}\n                    />\n                  </div>\n                ))}\n\n                <AddNewButton\n                  onClick={onAddGoals}\n                  type=\"small\"\n                  style={{\n                    marginLeft: \"10px\",\n                    height: \"36px\",\n                    marginTop: \"5px\",\n                    border: errors.selectedGoals && \"2px solid red\",\n                  }}\n                />\n              </div>\n            </div>\n            {/* results */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                RESULTS\n              </div>\n              <div>\n                <textarea\n                  rows={3}\n                  placeholder=\"Enter challenge result\"\n                  className=\"font-paragraph-white adminV2-bi-input\"\n                  onChange={(e) => setResult(e.target.value)}\n                  value={result}\n                  style={{ height: \"auto\", width: \"100%\", resize: \"vertical\" }} // Optional: Allow resizing vertically\n                />\n              </div>\n            </div>\n            {/* info */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                INFO\n              </div>\n\n              {challengeInfo &&\n                challengeInfo.map((item, index) => {\n                  return (\n                    <div\n                      key={index}\n                      className=\"trainer-profile-goals-container\"\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        flexWrap: \"nowrap\",\n                      }}\n                    >\n                      <input\n                        style={{\n                          marginTop: \"10px\",\n                        }}\n                        className=\"font-paragraph-white adminV2-bi-input\"\n                        placeholder=\"Add info\"\n                        onChange={(e) => {\n                          const newChallengeInfo = [...challengeInfo];\n                          newChallengeInfo[index] = e.target.value;\n                          setChallengeInfo(newChallengeInfo);\n                        }}\n                        value={item}\n                      />\n                      <DeleteFilled\n                        onClick={() => {\n                          const newChallengeInfo = [...challengeInfo];\n                          newChallengeInfo.splice(index, 1);\n                          setChallengeInfo(newChallengeInfo);\n                        }}\n                        style={{\n                          color: \"#ff7700\",\n                          fontSize: \"20px\",\n                          cursor: \"pointer\",\n                        }}\n                      />\n                    </div>\n                  );\n                })}\n              <div>\n                {/* add body focus here */}\n                <AddNewButton\n                  onClick={onAddInfo}\n                  type=\"big\"\n                  style={{\n                    marginTop: \"10px\",\n                  }}\n                />\n              </div>\n            </div>\n            {/* personal journey */}\n            <div className=\"trainer-profile-goals\">\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                YOUR PERSONAL JOURNEY\n              </div>\n              <div style={{ marginTop: \"10px\" }}>\n                <DraggableArea\n                  onChange={handleWeekReorder}\n                  direction=\"vertical\"\n                  itemType={ItemTypeWeek}\n                >\n                  {weeks &&\n                    weeks.map((w, i) => (\n                      <DraggableItem key={w.id || w._id}>\n                        <Collapse\n                          defaultActiveKey={[]}\n                          onChange={(e) => setShowChangePanel(e)}\n                          style={{\n                            backgroundColor: \"#171e27\",\n                            padding: \"10px\",\n                          }}\n                          key={w.id}\n                        >\n                          <Collapse.Panel\n                            showArrow={false}\n                            style={{\n                              backgroundColor: \"#1b2632\",\n                              marginBottom: \"5px\",\n                            }}\n                            header={\n                              <>\n                                <input\n                                  style={{\n                                    fontSize: \"13px\",\n                                    backgroundColor: \"#f37720\",\n                                    padding: \"0px\",\n                                    width: \"120px\",\n                                    margin: \"0 0 12px 5px\",\n                                  }}\n                                  className=\"adminV2-bi-input font-paragraph-white\"\n                                  value={w.weekName}\n                                  placeholder=\"Name Group\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                  }}\n                                  onChange={(e) => {\n                                    const newWeeks = [...weeks];\n                                    newWeeks[i].weekName = e.target.value;\n                                    setWeeks(newWeeks);\n                                  }}\n                                />\n\n                                <div\n                                  style={{\n                                    fontWeight: \"500\",\n                                    fontSize: \"16px\",\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    justifyContent: \"space-between\",\n\n                                    textTransform: \"uppercase\",\n                                  }}\n                                  className=\"font-paragraph-white\"\n                                >\n                                  <input\n                                    style={{\n                                      fontSize: \"13px\",\n                                      maxWidth: \"300px\",\n                                      margin: \"0 0 12px 5px\",\n                                    }}\n                                    className=\"adminV2-bi-input font-paragraph-white\"\n                                    value={w.weekSubtitle}\n                                    placeholder=\"Add Description\"\n                                    onChange={(e) => {\n                                      const newWeeks = [...weeks];\n                                      newWeeks[i].weekSubtitle = e.target.value;\n                                      setWeeks(newWeeks);\n                                    }}\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                    }}\n                                  />\n                                  <span>\n                                    {showChangePanel.includes(`${i + 1}`) ? (\n                                      <UpOutlined\n                                        style={{ color: \"#ff7700\" }}\n                                      />\n                                    ) : (\n                                      <DownOutlined\n                                        style={{ color: \"#ff7700\" }}\n                                      />\n                                    )}\n                                  </span>\n                                </div>\n                                <div\n                                  style={{\n                                    position: \"absolute\",\n                                    right: \"20px\",\n                                    top: \"10px\",\n                                  }}\n                                >\n                                  <img\n                                    src={DeleteIcon}\n                                    alt=\"delete-icon\"\n                                    onClick={() => {\n                                      const newWeek = weeks.filter(\n                                        (item) => item.id !== w.id\n                                      );\n                                      setWeeks(newWeek);\n                                    }}\n                                    style={iconStyle}\n                                  />\n\n                                  <img\n                                    src={CopyIcon}\n                                    alt=\"\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      duplicateWeek(w);\n                                    }}\n                                    style={{\n                                      ...iconStyle,\n                                      marginLeft: \"10px\",\n                                    }}\n                                  />\n                                  <DraggableHandle>\n                                    <img\n                                      src={DragAndDropIcon}\n                                      alt=\"\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                      }}\n                                      style={{\n                                        ...iconStyle,\n                                        cursor: \"move\",\n                                        marginLeft: \"10px\",\n                                      }}\n                                    />\n                                  </DraggableHandle>\n                                </div>\n                              </>\n                            }\n                            key={i + 1}\n                          >\n                            <div className=\"trainer-profile-goals-container\">\n                              <DraggableArea\n                                onChange={(newOrder) =>\n                                  handleWorkoutReorder(newOrder, i)\n                                }\n                                direction=\"vertical\"\n                                itemType={ItemTypeWorkout}\n                              >\n                                {w.workouts &&\n                                  w.workouts.map((workout) => (\n                                    <DraggableItem key={workout.id}>\n                                      <div\n                                        className=\"challenge-profile-comment font-paragraph-white\"\n                                        key={workout.id}\n                                        style={{\n                                          display: \"flex\",\n                                          flexDirection: \"column\",\n                                          justifyContent: \"space-between\",\n                                          alignItems: \"flex-start\",\n                                          backgroundColor: \"#2A2F368C\",\n                                          position: \"relative\",\n                                        }}\n                                      >\n                                        <input\n                                          style={{\n                                            fontSize: \"13px\",\n                                            padding: \"5px\",\n                                            width: \"200px\",\n                                            margin: \"0 0 12px 5px\",\n                                          }}\n                                          className=\"adminV2-bi-input font-paragraph-white\"\n                                          value={workout.title}\n                                          placeholder=\"Add Workout Title\"\n                                          onChange={(e) => {\n                                            const newWeeks = [...weeks];\n                                            const weekIndex =\n                                              newWeeks.findIndex(\n                                                (week) => week.id === w.id\n                                              );\n                                            if (weekIndex !== -1) {\n                                              const workoutIndex = newWeeks[\n                                                weekIndex\n                                              ].workouts.findIndex(\n                                                (item) => item.id === workout.id\n                                              );\n                                              if (workoutIndex !== -1) {\n                                                newWeeks[weekIndex].workouts[\n                                                  workoutIndex\n                                                ].title = e.target.value;\n                                                setWeeks(newWeeks);\n                                              }\n                                            }\n                                          }}\n                                        />\n                                        <input\n                                          style={{\n                                            fontSize: \"13px\",\n                                            padding: \"5px\",\n                                            width: \"250px\",\n                                            margin: \"0 0 12px 5px\",\n                                          }}\n                                          className=\"adminV2-bi-input font-paragraph-white\"\n                                          value={workout.subtitle}\n                                          placeholder=\"Add More Info\"\n                                          onChange={(e) => {\n                                            const newWeeks = [...weeks];\n                                            const weekIndex =\n                                              newWeeks.findIndex(\n                                                (week) => week.id === w.id\n                                              );\n                                            if (weekIndex !== -1) {\n                                              const workoutIndex = newWeeks[\n                                                weekIndex\n                                              ].workouts.findIndex(\n                                                (item) => item.id === workout.id\n                                              );\n                                              if (workoutIndex !== -1) {\n                                                newWeeks[weekIndex].workouts[\n                                                  workoutIndex\n                                                ].subtitle = e.target.value;\n                                                setWeeks(newWeeks);\n                                              }\n                                            }\n                                          }}\n                                        />\n\n                                        <div\n                                          style={{\n                                            display: \"flex\",\n                                            alignItems: \"center\",\n                                            justifyContent: \"space-between\",\n                                            width: \"100%\",\n                                          }}\n                                        >\n                                          <Checkbox\n                                            style={{\n                                              color: \"#fff\",\n                                              fontSize: \"13px\",\n                                              margin: \"0 0 12px 5px\",\n                                            }}\n                                            checked={workout.renderWorkout}\n                                            onChange={(e) => {\n                                              const newWeeks = [...weeks];\n                                              const weekIndex =\n                                                newWeeks.findIndex(\n                                                  (week) => week.id === w.id\n                                                );\n                                              if (weekIndex !== -1) {\n                                                const workoutIndex = newWeeks[\n                                                  weekIndex\n                                                ].workouts.findIndex(\n                                                  (item) =>\n                                                    item.id === workout.id\n                                                );\n                                                if (workoutIndex !== -1) {\n                                                  newWeeks[weekIndex].workouts[\n                                                    workoutIndex\n                                                  ].renderWorkout =\n                                                    e.target.checked;\n                                                  setWeeks(newWeeks);\n                                                }\n                                              }\n                                            }}\n                                          >\n                                            Render Workout\n                                          </Checkbox>\n\n                                          <div\n                                            style={{\n                                              background: \"#344150B0\",\n                                              padding: \"10px\",\n                                              cursor: \"pointer\",\n                                            }}\n                                            onClick={() => {\n                                              setShowVideoCreator(true);\n                                              setSelectedWorkoutForStudioId({\n                                                workoutId: workout.id,\n                                                weekId: w.id,\n                                              });\n                                            }}\n                                          >\n                                            <img\n                                              src={WorkoutStudioIcon}\n                                              alt=\"\"\n                                            />\n                                          </div>\n                                        </div>\n                                        <div\n                                          style={{\n                                            position: \"absolute\",\n                                            right: \"20px\",\n                                            top: \"10px\",\n                                            display: \"flex\",\n                                            gap: \"14px\",\n                                          }}\n                                        >\n                                          <img\n                                            src={DeleteWhite}\n                                            alt=\"delete\"\n                                            onClick={() => {\n                                              const newWeeks = [...weeks];\n                                              const weekIndex =\n                                                newWeeks.findIndex(\n                                                  (week) => week._id === w._id\n                                                );\n                                              if (weekIndex !== -1) {\n                                                const workoutIndex = newWeeks[\n                                                  weekIndex\n                                                ].workouts.findIndex(\n                                                  (item) =>\n                                                    item._id === workout._id\n                                                );\n                                                if (workoutIndex !== -1) {\n                                                  newWeeks[\n                                                    weekIndex\n                                                  ].workouts.splice(\n                                                    workoutIndex,\n                                                    1\n                                                  );\n                                                  setWeeks(newWeeks);\n                                                }\n                                              }\n                                            }}\n                                            style={iconStyle}\n                                          />\n                                          <img\n                                            src={CopyIconWhite}\n                                            alt=\"drag-drop\"\n                                            onClick={(e) => {\n                                              e.stopPropagation();\n                                              duplicateWorkout(w.id, workout);\n                                            }}\n                                            style={iconStyle}\n                                          />\n                                          <DraggableHandle>\n                                            <img\n                                              src={DragAndDropIconWhite}\n                                              alt=\"drag-drop\"\n                                              onClick={(e) => {\n                                                e.stopPropagation();\n                                                // duplicateWorkout(w.id, workout);\n                                              }}\n                                              style={{\n                                                ...iconStyle,\n                                                cursor: \"move\",\n                                              }}\n                                            />\n                                          </DraggableHandle>\n                                        </div>\n                                      </div>\n                                    </DraggableItem>\n                                  ))}\n                              </DraggableArea>\n                              <AddNewButton\n                                style={{\n                                  margin: \"5px\",\n                                  backgroundColor: \"#2A2F368C\",\n                                  padding: \"5px\",\n                                  width: \"100%\",\n                                }}\n                                onClick={() => onAddWorkout(w._id || w.id)}\n                                type=\"big\"\n                              />\n                            </div>\n                          </Collapse.Panel>\n                        </Collapse>\n                      </DraggableItem>\n                    ))}\n                </DraggableArea>\n                <AddNewButton onClick={onAddWeek} type=\"big\" />\n              </div>\n            </div>\n            {/* subscription */}\n            <>\n              <div\n                className=\"trainer-profile-goals-heading font-paragraph-white\"\n                style={{ color: \"#72777B\", textTransform: \"uppercase\" }}\n              >\n                SUBSCRIPTION\n                <Tooltip placement=\"top\" title={tooltipText}>\n                  <img src={HelpIcon} alt=\"\" style={{ marginLeft: \"5px\" }} />\n                </Tooltip>\n              </div>\n              <div className=\"font-paragraph-white\">Choose your prices</div>\n              <div className=\"unlock-challenge-packages\">\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_1\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_1\");\n                    }\n                    setErrors((prev) => ({\n                      ...prev,\n                      pack: \"\",\n                    }));\n                  }}\n                  style={{\n                    border: errors.pack\n                      ? \"2px solid red\"\n                      : pack === \"CHALLENGE_1\"\n                      ? \"2px solid #f37720\"\n                      : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"30px\",\n                    }}\n                  >\n                    One-Time <br /> Challenge\n                  </span>\n                  <span>\n                    <input\n                      placeholder=\"€00\"\n                      style={{\n                        width: \"100%\",\n                        textAlign: \"center\",\n                        margin: \"0px auto\",\n                        height: \"40px\",\n                        marginTop: \"-5px\",\n                        fontSize: \"20px\",\n                        border: errors.customPrice ? \"2px solid red\" : \"none\",\n                      }}\n                      prefix={\"€\"}\n                      className=\"adminV2-bi-input\"\n                      type=\"number\"\n                      value={customPrice}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      onChange={(e) => {\n                        if (errors.customPrice) {\n                          setErrors((prev) => ({\n                            ...prev,\n                            customPrice: \"\",\n                          }));\n                        }\n                        setCustomPrice(`${e.target.value}`);\n                      }}\n                    />\n                  </span>\n                  <span style={{ margin: \"15px 0\" }}>No subscription</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Once\n                  </span>\n                </div>\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_12\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_12\");\n                    }\n                    setErrors((prev) => ({\n                      ...prev,\n                      pack: \"\",\n                    }));\n                  }}\n                  style={{\n                    border: errors.pack\n                      ? \"2px solid red\"\n                      : pack === \"CHALLENGE_12\"\n                      ? \"2px solid #f37720\"\n                      : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Repeat & Save\n                  </span>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{\n                      fontSize: \"13px\",\n                      backgroundColor: \"#f37720\",\n                      padding: \"5px\",\n                      width: \"120px\",\n                      fontWeight: \"600\",\n                      alignSelf: \"center\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Save up to 60%\n                  </span>\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\n                    €4.5 <span style={{ fontSize: \"14px\" }}>/Week</span>\n                  </span>\n                  <span style={{ margin: \"15px 0\" }}>12 months plan</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Monthly\n                  </span>\n                </div>\n                <div\n                  className=\"unlock-challenge-pack font-paragraph-white\"\n                  onClick={() => {\n                    if (pack === \"CHALLENGE_3\") {\n                      setPack(\"\");\n                    } else {\n                      setPack(\"CHALLENGE_3\");\n                    }\n                    setErrors((prev) => ({\n                      ...prev,\n                      pack: \"\",\n                    }));\n                  }}\n                  style={{\n                    border: errors.pack\n                      ? \"2px solid red\"\n                      : pack === \"CHALLENGE_3\"\n                      ? \"2px solid #f37720\"\n                      : \"2px solid #2a2f36\",\n                  }}\n                >\n                  <span\n                    style={{\n                      fontSize: \"20px\",\n                      fontWeight: \"400\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Repeat & Save\n                  </span>\n                  <span\n                    className=\"font-paragraph-white\"\n                    style={{\n                      fontSize: \"13px\",\n                      backgroundColor: \"#f37720\",\n                      padding: \"5px\",\n                      width: \"120px\",\n                      fontWeight: \"600\",\n                      alignSelf: \"center\",\n                      marginBottom: \"10px\",\n                    }}\n                  >\n                    Save up to 30%\n                  </span>\n                  <span style={{ fontSize: \"26px\", fontWeight: \"600\" }}>\n                    €6 <span style={{ fontSize: \"14px\" }}>/Week</span>\n                  </span>\n                  <span style={{ margin: \"15px 0\" }}>3 months plan</span>\n                  <span style={{ fontSize: \"14px\", color: \"#7e7c79\" }}>\n                    Billed Monthly\n                  </span>\n                </div>\n              </div>\n            </>\n            <button\n              style={{\n                background: \"#f37720\",\n                color: \"white\",\n                border: \"none\",\n                padding: \"10px 20px\",\n                fontSize: \"16px\",\n                cursor: \"pointer\",\n                marginTop: \"20px\",\n                width: \"99%\",\n                borderRadius: \"5px\",\n                margin: \"20px 10px\",\n              }}\n              onClick={() => {\n                handleSaveChallenge();\n              }}\n            >\n              Save Challenge\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(BasicInformation);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\NewFaq.js",["933","934","935"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Form, Input, Button, Select, Modal, List, Checkbox } from \"antd\";\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\nimport { createPost } from \"../../../services/posts\";\nimport {\n  createFaq,\n  createFaqCategory,\n  getAllFaqCategories,\n  removeFaqCategory,\n} from \"../../../services/faqs\";\nimport EditTypeName from \"./EditTypeName\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\nconst { Option } = Select;\n\nfunction NewFaq({ setCurrentSelection, home }) {\n  const [category, setCategory] = useState([]);\n  const [categoryModal, setCategoryModal] = useState(false);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [allCategories, setAllCategories] = useState([]);\n  const [isPublic, setIsPublic] = useState(true);\n\n  // update stuff\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n  const { language } = useContext(LanguageContext);\n\n  const fetchData = async () => {\n    const aC = await getAllFaqCategories(language);\n    // console.log(aC);\n    if (aC) {\n      setAllCategories(aC.categories);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const removeCategory = async (id) => {\n    await removeFaqCategory(id);\n    fetchData();\n  };\n  const onFinish = async (values) => {\n    const data = {\n      ...values,\n      category,\n      isPublic,\n      language,\n    };\n    console.log(data);\n    await createFaq(data);\n    setCurrentSelection(home);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      {/*  */}\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fetchData}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n      {/* modal to create a new goal */}\n      <Modal\n        onCancel={() => setCategoryModal(false)}\n        footer={false}\n        visible={categoryModal}\n      >\n        <p className=\"font-paragraph-white\">Categories</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newCategoryName}\n            onChange={(e) => setNewCategoryName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newCategoryName.length > 0) {\n                await createFaqCategory({ name: newCategoryName, language });\n                // setShowGoalModal(false);\n                fetchData();\n              }\n            }}\n          >\n            Create Category\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Categories</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allCategories}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n                key={cat._id}\n              >\n                <span>{cat.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      removeCategory(cat._id);\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Faq Category\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* ----------------- */}\n      <h2 className=\"font-heading-black\">New FAQ</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <div>\n            <span style={{ marginRight: \"10px\" }}>Select Language</span>\n            <LanguageSelector notFromNav={true} />\n          </div>\n          <Form.Item\n            label=\"Question\"\n            name=\"question\"\n            rules={[{ required: true, message: \"Please input question!\" }]}\n          >\n            <Input.TextArea rows={3} />\n          </Form.Item>\n          <Form.Item\n            label=\"Answer\"\n            name=\"answer\"\n            rules={[{ required: true, message: \"Please input answer!\" }]}\n          >\n            <Input.TextArea rows={6} />\n          </Form.Item>\n\n          <Form.Item label=\"Category\" name=\"category\">\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={category}\n              onChange={(e) => setCategory(e)}\n            >\n              {allCategories.map((cat) => (\n                <Option value={cat._id} key={cat._id}>\n                  {cat.name}\n                </Option>\n              ))}\n            </Select>\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setCategoryModal(true)}\n            >\n              Manage Category\n            </Button>\n          </Form.Item>\n\n          <Form.Item>\n            <Checkbox\n              checked={isPublic}\n              onChange={(e) => setIsPublic(e.target.checked)}\n            >\n              Make public\n            </Checkbox>\n          </Form.Item>\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewFaq;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\AllFaqs.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RequestManager\\AllRequests.js",["936","937","938"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Table, Space, Input, Select, Switch } from \"antd\";\nimport moment from \"moment\";\n\nimport {\n  getAllAdminRequests,\n  updateAdminRequest,\n} from \"../../../services/adminRequests\";\nimport slug from \"elegant-slug\";\nimport { Link } from \"react-router-dom\";\nimport { T } from \"../../Translate\";\n\nfunction AllRequests() {\n  const [filterAllData, setFilterAllData] = useState([]);\n  const [allData, setAllData] = useState([]);\n  const [requestsTypeFilter, setRequestsTypeFilter] = useState(\"challenge\");\n  const [requestsApprovedFilter, setRequestsApprovedFilter] =\n    useState(\"notApproved\");\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function updateRequestStatus(id, type, value) {\n    const res = await updateAdminRequest(\n      id,\n      type,\n      value === \"approved\" ? true : false\n    );\n    console.log(res);\n    fetchData();\n  }\n\n  useEffect(() => {\n    if (requestsTypeFilter === \"challenge\") {\n      if (requestsApprovedFilter === \"approved\") {\n        setFilterAllData(allData?.challenges?.filter((f) => f.adminApproved));\n      }\n      if (requestsApprovedFilter === \"notApproved\") {\n        setFilterAllData(allData?.challenges?.filter((f) => !f.adminApproved));\n      }\n    }\n    if (requestsTypeFilter === \"recipe\") {\n      if (requestsApprovedFilter === \"approved\") {\n        setFilterAllData(allData?.recipes?.filter((f) => f.adminApproved));\n      }\n      if (requestsApprovedFilter === \"notApproved\") {\n        setFilterAllData(allData?.recipes?.filter((f) => !f.adminApproved));\n      }\n    }\n    if (requestsTypeFilter === \"blog\") {\n      if (requestsApprovedFilter === \"approved\") {\n        setFilterAllData(allData?.blogs?.filter((f) => f.adminApproved));\n      }\n      if (requestsApprovedFilter === \"notApproved\") {\n        setFilterAllData(allData?.blogs?.filter((f) => !f.adminApproved));\n      }\n    }\n  }, [requestsApprovedFilter, allData, requestsTypeFilter]);\n\n  const fetchData = async () => {\n    const data = await getAllAdminRequests();\n    setAllData(data.res);\n    console.log(\"all blogs\", data.res);\n  };\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{requestsTypeFilter}</span>\n      ),\n    },\n    {\n      title: \"Name\",\n      key: \"bang\",\n      render: (text, record) =>\n        text.name\n          ? text.name\n          : text.challengeName\n          ? text.challengeName\n          : text.title\n          ? text.title\n          : \"\",\n    },\n    {\n      title: \"Is Public\",\n      dataIndex: \"isPublic\",\n      key: \"isPublic\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\n      ),\n    },\n    {\n      title: \"Admin Approved\",\n      dataIndex: \"adminApproved\",\n      key: \"adminApproved\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\n      ),\n    },\n    {\n      title: \"Updated At\",\n      key: \"updatedAt\",\n      dataIndex: \"updatedAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <>\n          {console.log(\"yas\", text)}\n          <Link\n            to={`/${requestsTypeFilter}/${slug(\n              text.name\n                ? text.name\n                : text.challengeName\n                ? text.challengeName\n                : text.title\n                ? text.title\n                : \"\"\n            )}/${text._id}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {\" \"}\n            <Button type=\"primary\">\n              <T>adminDashboard.preview</T>\n            </Button>\n          </Link>\n\n          <Select\n            style={{ width: 150, marginLeft: \"10px\" }}\n            value={text.adminApproved ? \"approved\" : \"notApproved\"}\n            onChange={(e) =>\n              updateRequestStatus(text._id, requestsTypeFilter, e)\n            }\n          >\n            <Select.Option key={1} value={\"approved\"}>\n              Approved\n            </Select.Option>\n            <Select.Option key={2} value={\"notApproved\"}>\n              Not Approved\n            </Select.Option>\n          </Select>\n        </>\n      ),\n    },\n  ];\n  return (\n    <div>\n      <h2 className=\"font-heading-black\">Manage Requets</h2>\n      <div style={{ display: \"flex\" }}>\n        <div>\n          <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\n            Filter By Type:\n          </span>\n          <Select\n            defaultValue={requestsTypeFilter}\n            style={{ width: 120, marginLeft: \"10px\" }}\n            onChange={(e) => setRequestsTypeFilter(e)}\n          >\n            <Select.Option key={1} value={\"challenge\"}>\n              Challenges\n            </Select.Option>\n            <Select.Option key={2} value={\"recipe\"}>\n              Recipes\n            </Select.Option>\n            <Select.Option key={3} value={\"blog\"}>\n              Blogs\n            </Select.Option>\n          </Select>\n        </div>\n        <div style={{ marginLeft: \"20px\" }}>\n          <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\n            Filter By Status:\n          </span>\n          <Select\n            defaultValue={requestsApprovedFilter}\n            style={{ width: 150, marginLeft: \"10px\" }}\n            onChange={(e) => setRequestsApprovedFilter(e)}\n          >\n            <Select.Option key={1} value={\"notApproved\"}>\n              Not Approved\n            </Select.Option>\n            <Select.Option key={2} value={\"approved\"}>\n              Approved\n            </Select.Option>\n          </Select>\n        </div>\n      </div>\n      <div className=\"admin-allchallenges-list-container\">\n        <Table columns={columns} dataSource={filterAllData} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllRequests;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\NewPost.js",["939"],"import React, { useState } from \"react\";\nimport { Form, Input, Button, Select } from \"antd\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { createPost } from \"../../../services/posts\";\nconst { Option } = Select;\n\nfunction NewPost() {\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [type, setType] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n\n  const onFinish = async (values) => {\n    if (type && image) {\n      const data = {\n        title: values.name,\n        text: values.description,\n        image: typeof image === \"object\" ? image.link : \"\",\n        type: type,\n      };\n      await createPost(data);\n    } else {\n      window.alert(\"All values are requeired to create a post\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <h2 className=\"font-heading-black\">New Post</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Post Title\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Please input post title!\" }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Post Description\"\n            name=\"description\"\n            rules={[\n              { required: true, message: \"Please input post description!\" },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Post Image\" name=\"image\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([image, setImage]);\n              }}\n            >\n              Upload Image\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {image && image.name}\n            </div>\n          </Form.Item>\n          <Form.Item label=\"Post Category\" name=\"category\" required={true}>\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              value={type}\n              placeholder=\"Please select\"\n              onChange={(e) => setType(e)}\n            >\n              {[\"Challenge\", \"Magazine\", \"Recipe\", \"News Updates\"].map(\n                (e, i) => (\n                  <Select.Option key={i + 1} value={e}>\n                    {e}\n                  </Select.Option>\n                )\n              )}\n            </Select>\n          </Form.Item>\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewPost;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\UpdateChallenge.js",["940","941","942","943","944","945","946","947"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Tabs, Modal, Button, Form } from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport NewChallengeMainTab from \"./NewChallengeMainTab\";\nimport NewChallengeWorkoutTab from \"./NewChallengeWorkoutTab\";\nimport NewChallengeMusicTab from \"./NewChallengeMusicTab\";\nimport NewChallengeAdditionalTab from \"./NewChallengeAdditionalTab\";\n\nimport { v4 } from \"uuid\";\n\n// services\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\nimport { getAllChallengeTags } from \"../../../services/createChallenge/tags\";\nimport { getAllChallengeEquipments } from \"../../../services/createChallenge/equipments\";\nimport { getAllBodyFocus } from \"../../../services/createChallenge/bodyFocus\";\nimport { getAllTrainers } from \"../../../services/trainers\";\nimport { getAllChallengeProducts } from \"../../../services/createChallenge/products\";\nimport {\n  createChallenge,\n  getAllChallenges,\n  getAllUserChallenges,\n  updateChallenge,\n} from \"../../../services/createChallenge/main\";\nimport setAuthToken from \"../../../helpers/setAuthToken\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { createPost } from \"../../../services/posts\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nconst { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nfunction UpdateChallenge({ selectedChallengeForUpdate, setCurrentSelection }) {\n  const [form] = Form.useForm();\n  // state of main tab strats\n  const [name, setName] = useState(\"\");\n  const [access, setAccess] = useState([]);\n  const [price, setPrice] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [currency, setCurrency] = useState(\"$\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n  const [videoThumbnail, setVideoThumbnail] = useState(\"\");\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\n  const [trainers, setTrainers] = useState([]);\n  const [allTrainers, setAllTrainers] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [goals, setGoals] = useState([]);\n  const [bodyFocus, setBodyFocus] = useState([]);\n  const [equipments, setEquipments] = useState([]);\n  const [duration, setDuration] = useState(\"\");\n  // we get all goals from backend\n  const [allGoals, setAllGoals] = useState([]);\n  const [newGoalName, setNewGoalName] = useState(\"\");\n  const [showGoalModal, setShowGoalModal] = useState(false);\n  // we get all bodyfocus from backend\n  const [allBodyfocus, setAllBodyfocus] = useState([]);\n  const [newBodyfocusName, setNewBodyfocusName] = useState(\"\");\n  const [showBodyfocusModal, setShowBodyfocusModal] = useState(false);\n  // we get all equipments from backend\n  const [allEquipments, setAllEquipments] = useState([]);\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\n  const [equipmentModal, setEquipmentModal] = useState(false);\n  const [newDurationName, setNewDurationName] = useState(\"\");\n  const [showDurationModal, setShowDurationModal] = useState(false);\n  // we get all tags from backend\n  const [tags, setTags] = useState([]);\n  const [allTags, setAllTags] = useState([]);\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [showTagModal, setShowTagModal] = useState(false);\n\n  //fitness interest\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState([]);\n\n  // state of main tab ends\n\n  // state pf the new challenge tab starts\n  const [weeks, setWeeks] = useState([]);\n  const [addWorkoutModalVisible, setAddWorkoutModalVisible] = useState(false);\n  const [workoutModalFullscreen, setWorkoutModalFullscreen] = useState(false);\n  const [allProducts, setAllProducts] = useState([\n    { id: 1, name: \"Carpet\" },\n    { id: 2, name: \"Mat\" },\n    { id: 3, name: \"Dumbell\" },\n  ]);\n  const [products, setProducts] = useState([]);\n  //   this is for new workout creation process\n  const [workoutToUpdate, setWorkoutToUpdate] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentWeek, setCurrentWeek] = useState(\"\");\n  const [workoutTitle, setWorkoutTile] = useState(\"\");\n  const [workoutSubtitle, setWorkoutSubtile] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [infoTitle, setInfoTile] = useState(\"\");\n  const [infoFile, setInfoFile] = useState(\"\");\n  // const [points, setPoints] = useState(0);\n  const [workoutIntroVideoFile, setWorkoutIntroVideoFile] = useState(\"\");\n  const [workoutIntroVideoLength, setWorkoutIntroVideoLength] = useState(\"\");\n  const [relatedEquipments, setRelatedEquipments] = useState([]);\n  const [renderWorkout, setRenderWorkout] = useState(false);\n  const [workoutIdsThatNeedToBeUpdated, setWorkoutIdsThatNeedToBeUpdated] =\n    useState([]);\n  // this is a rendered workout exercise it wonly takes in full video of the exercise\n  const [renderedWorkoutExercises, setRenderWorkoutExercises] = useState([\n    {\n      exerciseId: v4(),\n      exerciseName: \"\",\n      exerciseVideo: \"\",\n    },\n  ]);\n  // this is a non-rendered workout exercise it will take multiple videos and voiceeover\n  const [nonRenderedWorkoutExercises, setNonRenderedWorkoutExercises] =\n    useState([\n      {\n        exerciseId: v4(),\n        exerciseName: \"\",\n        exerciseVideo: \"\",\n        videoLength: \"\",\n        voiceOverFile: \"\",\n        breakAfterExercise: \"\",\n        exerciseGroupName: \"\",\n      },\n    ]);\n  const [musics, setMusics] = useState([]);\n  // state of the new cha;llenge ends\n\n  // state for additional inform\n  const [results, setResults] = useState(\"\");\n  // const [info, setInfo] = useState(\"\");\n  const [makePublic, setMakePublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n  const [additionalProducts, setAdditionalProducts] = useState([]);\n  const [informationList, setInformationList] = useState([]);\n  const [relatedProducts, setRelatedProducts] = useState([]);\n  // --------------------\n  const [createPostModalVisible, setCreatePostModalVisible] = useState(false);\n  const [weeksToBeUpdated, setWeeksToBeUpdated] = useState([]);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  //\n  const [selectedChallenge, setSelectedChallenge] = useState(\"\");\n  const [allChallenges, setAllChallenges] = useState([]);\n  const { language } = useContext(LanguageContext);\n\n  useEffect(() => {\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\n    addStuffToMainTabForm();\n  }, []);\n\n  useEffect(() => {\n    fethData();\n  }, []);\n  const addStuffToMainTabForm = () => {\n    console.log(\"selected challenge\", selectedChallengeForUpdate);\n    const {\n      challengeName,\n      description,\n      price,\n      points,\n      currency,\n      thumbnailLink,\n      videoThumbnailLink,\n      videoLink,\n      trainers,\n      access,\n      difficulty,\n      challengeGoals,\n      tags,\n      body,\n      duration,\n      music,\n      additionalProducts,\n      results,\n      allowComments,\n      allowReviews,\n      isPublic,\n      informationList,\n      weeks,\n      trainersFitnessInterest,\n      alternativeLanguage,\n    } = selectedChallengeForUpdate;\n\n    console.log(selectedChallengeForUpdate);\n    // return;\n    alternativeLanguage && setSelectedChallenge(alternativeLanguage._id);\n    setName(challengeName);\n    setAccess(access);\n    setPrice(price);\n    setPoints(points);\n    setCurrency(currency);\n    setThumbnail({ name: thumbnailLink, link: thumbnailLink });\n    setVideoThumbnail({ name: videoThumbnailLink, link: videoThumbnailLink });\n    setVideoTrailer({ name: videoLink, link: videoLink });\n    setTrainers(trainers.map((t) => t._id));\n    setDescription(description);\n    setDifficulty(difficulty);\n    setSelectedFitnessInterest(trainersFitnessInterest.map((t) => t._id));\n    setGoals(challengeGoals);\n    setBodyFocus(body.map((t) => t._id));\n    setDuration(duration);\n    setTags(tags.map((t) => t._id));\n    setMusics(\n      music\n        ? music.map((m) => ({\n            _id: m._id,\n            musicId: m._id,\n            file: { name: m.url, link: m.url },\n            name: m.name,\n          }))\n        : []\n    );\n    setAdditionalProducts(additionalProducts.map((t) => t._id));\n    setResults(results);\n    setAllowComments(allowComments);\n    setAllowReviews(allowReviews);\n    setMakePublic(isPublic);\n    setInformationList(\n      informationList.map((j) => ({\n        _id: j._id,\n        id: j._id,\n        text: j.info,\n        file: { link: j.icon },\n      }))\n    );\n    setWeeksToBeUpdated(weeks);\n    // setWeeks(weeks);\n    console.log(\"checking ammar\", weeks);\n    const w = weeks.map((week) => ({\n      _id: week._id,\n      id: week._id,\n      weekId: week._id,\n      weekTitle: week.weekName ? week.weekName : \"\",\n      weekSubtitle: week.weekSubtitle ? week.weekSubtitle : \"\",\n      workouts: week.workouts.map((workout) => ({\n        _id: workout._id,\n        workoutId: workout._id,\n        workoutTitle: workout.title ? workout.title : \"\",\n        workoutSubtitle: workout.subtitle ? workout.subtitle : \"\",\n        renderWorkout: workout.isRendered ? workout.isRendered : false,\n        workoutIntroVideoFile: workout.introVideoLink\n          ? {\n              name: workout.introVideoLink,\n              link: workout.introVideoLink,\n            }\n          : { name: \"\", link: \"\" },\n        workoutIntroVideoLength: workout.introVideoLength\n          ? workout.introVideoLength\n          : \"\",\n        relatedProducts: workout.relatedProducts\n          ? workout.relatedProducts.map((t) => t._id)\n          : \"\",\n        relatedEquipments: workout.relatedEquipments\n          ? workout.relatedEquipments.map((t) => t._id)\n          : \"\",\n        infoTitle: workout.infoTitle ? workout.infoTitle : \"\",\n        infoFile: workout.infoFile\n          ? { name: workout.infoFile, link: workout.infoFile }\n          : \"\",\n        groupName: workout.groupName ? workout.groupName : \"\",\n        exercises: workout.isRendered\n          ? workout.exercises.map((e) => ({\n              _id: e?._id,\n              exerciseId: e?.exerciseId?._id,\n              exerciseName: e?.exerciseId?.title ? e?.exerciseId?.title : \"\",\n              exerciseVideo: e?.exerciseId?.videoURL,\n              voiceOverFile: e?.exerciseId?.voiceOverLink,\n              videoLength: e?.exerciseLength ? e?.exerciseLength : \"\",\n              exerciseGroupName: e?.groupName ? e?.groupName : \"\",\n              breakAfterExercise: e?.break ? e?.break : \"\",\n            }))\n          : workout.exercises.map((e) => ({\n              exerciseName: e?.renderedWorkoutExerciseName,\n              exerciseVideo: e?.renderedWorkoutExerciseVideo,\n            })),\n      })),\n    }));\n    setWeeks(w);\n\n    form.setFieldsValue({\n      challengeName,\n      description,\n      price,\n      points,\n      currency: currency,\n      access: access,\n      duration,\n      goals: challengeGoals,\n    });\n  };\n  async function fethData() {\n    const bodyFocus = await getAllBodyFocus(language);\n    const goals = await getAllChallengeGoals(language);\n    const tags = await getAllChallengeTags(language);\n    const equipments = await getAllChallengeEquipments(language);\n    const trainers = await getAllTrainers(language);\n    const products = await getAllChallengeProducts(language);\n    const challenges = await getAllUserChallenges(\n      language === \"dutch\" ? \"english\" : \"dutch\"\n    );\n\n    setAllBodyfocus(bodyFocus.body);\n    setAllEquipments(equipments.equipments);\n    setAllGoals(goals.challengeGoals);\n    setAllTags(tags.tags);\n    // console.log(\"trainers\", trainers);\n    setAllTrainers(trainers.trainers);\n    setAllProducts(products.products);\n    setAllChallenges(challenges.challenges);\n  }\n\n  // const updateWorkouts = (weeks) => {\n  //   weeks.map((week) => {\n  //     week.workout.map(async (workout) => {\n  //       await updateWorkout(workout, workout._id);\n  //     });\n  //   });\n  // };\n  const parseWeeksForBackend = (weeks) => {\n    const w = weeks.map((week) => {\n      let g = {\n        ...week,\n        weekName: week.weekTitle,\n        weekSubtitle: week.weekSubtitle,\n        workouts: week.workouts\n          .map((wo) => wo._id)\n          .filter(function (el) {\n            return el !== undefined && el !== null;\n          }),\n      };\n      workoutIdsThatNeedToBeUpdated\n        .map((woId) => {\n          if (g._id === woId.weelId || g.weekId === woId.weelId) {\n            g.workouts = [...g.workouts, woId.workout];\n          }\n        })\n        .filter(function (el) {\n          return el !== undefined && el !== null;\n        });\n      console.log(g);\n      return g;\n    });\n\n    console.log(w);\n    return w;\n  };\n  const updateChallengeButton = async () => {\n    const obj = {\n      challengeName: name,\n      description: description,\n      price: price,\n      points: points,\n      currency: currency,\n      thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\n      videoThumbnailLink:\n        typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\n      trainers: trainers,\n      challengeGoals: goals,\n      trainersFitnessInterest: selectedFitnessInterest,\n      tags: tags,\n      body: bodyFocus,\n      access: access,\n      duration: duration,\n      difficulty: difficulty,\n      videoTrailer: typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\n      weeks: parseWeeksForBackend(weeks),\n      music: musics.map((m) => ({\n        ...m,\n        name: m.name,\n        url: typeof m.file === \"object\" ? m.file.link : m.file,\n      })),\n      additionalProducts: additionalProducts,\n      results: results,\n      informationList: informationList\n        ? informationList.map((i) => ({\n            ...i,\n            info: i.text,\n            icon: i.file ? i.file.link : \"\",\n          }))\n        : [],\n      allowComments,\n      allowReviews,\n      isPublic: makePublic,\n      alternativeLanguage: selectedChallenge ? selectedChallenge : null,\n    };\n    console.log(\"JASON\", obj, selectedChallengeForUpdate._id);\n    // return;\n    const res = await updateChallenge(obj, selectedChallengeForUpdate._id);\n    selectedChallenge &&\n      (await updateChallenge(\n        { alternativeLanguage: selectedChallengeForUpdate._id },\n        selectedChallenge\n      ));\n    console.log(\"response\", res);\n    console.log(\"weeks\", workoutIdsThatNeedToBeUpdated);\n    // updateWorkouts(obj.weeks);\n    // if (res) {\n    //   setCreatePostModalVisible(true);\n    // }\n    console.log(obj);\n  };\n\n  const createAPost = async () => {\n    const values = {\n      title: name,\n      text: description,\n      image: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\n      type: \"Challenge\",\n    };\n    await createPost(values);\n    setCreatePostModalVisible(false);\n    // console.log(values);\n  };\n\n  return (\n    <div>\n      {/* ask user to if they want to post challenge */}\n      <Modal\n        onCancel={() => setCreatePostModalVisible(false)}\n        visible={createPostModalVisible}\n        footer={false}\n        style={{ textAlign: \"center\" }}\n      >\n        <h1 className=\"font-heading-white\">\n          Create a post about your challenge?\n        </h1>\n        <Button\n          className=\"common-orange-button font-paragraph-white\"\n          onClick={() => createAPost()}\n          style={{ padding: \"5px 10px\" }}\n        >\n          Create a Post\n        </Button>\n      </Modal>\n      <h2 className=\"font-heading-black\">\n        <ArrowLeftOutlined\n          onClick={() => setCurrentSelection(6.1)}\n          style={{ fontSize: \"30px\", cursor: \"pointer\", marginRight: \"10px\" }}\n        />\n        Update Challenge\n        <Button\n          className=\"font-paragraph-white\"\n          style={{\n            backgroundColor: \"var(--color-orange)\",\n            border: \"none\",\n            marginTop: \"10px\",\n            marginRight: \"30px\",\n            float: \"right\",\n          }}\n          onClick={updateChallengeButton}\n        >\n          Update Challenge\n        </Button>\n      </h2>\n\n      <div className=\"newchallenge-creator-container\">\n        <p>Language: {selectedChallengeForUpdate?.language}</p>\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\n          <TabPane tab=\"Main\" key=\"1\">\n            <NewChallengeMainTab\n              allChallenges={allChallenges}\n              selectedChallenge={selectedChallenge}\n              setSelectedChallenge={setSelectedChallenge}\n              form={form}\n              selectedFitnessInterest={selectedFitnessInterest}\n              setSelectedFitnessInterest={setSelectedFitnessInterest}\n              id={selectedChallengeForUpdate._id}\n              name={name}\n              setName={setName}\n              access={access}\n              setAccess={setAccess}\n              price={price}\n              points={points}\n              setPrice={setPrice}\n              setPoints={setPoints}\n              currency={currency}\n              setCurrency={setCurrency}\n              thumbnail={thumbnail}\n              setThumbnail={setThumbnail}\n              videoThumbnail={videoThumbnail}\n              setVideoThumbnail={setVideoThumbnail}\n              videoTrailer={videoTrailer}\n              setVideoTrailer={setVideoTrailer}\n              trainers={trainers}\n              setTrainers={setTrainers}\n              allTrainers={allTrainers}\n              setAllTrainers={setAllTrainers}\n              description={description}\n              setDescription={setDescription}\n              difficulty={difficulty}\n              setDifficulty={setDifficulty}\n              goals={goals}\n              setGoals={setGoals}\n              bodyFocus={bodyFocus}\n              setBodyFocus={setBodyFocus}\n              equipments={equipments}\n              setEquipments={setEquipments}\n              duration={duration}\n              setDuration={setDuration}\n              allGoals={allGoals}\n              setAllGoals={setAllGoals}\n              newGoalName={newGoalName}\n              setNewGoalName={setNewGoalName}\n              showGoalModal={showGoalModal}\n              setShowGoalModal={setShowGoalModal}\n              allBodyfocus={allBodyfocus}\n              setAllBodyfocus={setAllBodyfocus}\n              newBodyfocusName={newBodyfocusName}\n              setNewBodyfocusName={setNewBodyfocusName}\n              showBodyfocusModal={showBodyfocusModal}\n              setShowBodyfocusModal={setShowBodyfocusModal}\n              allEquipments={allEquipments}\n              setAllEquipments={setAllEquipments}\n              newEquipmentName={newEquipmentName}\n              setNewEquipmentName={setNewEquipmentName}\n              equipmentModal={equipmentModal}\n              setEquipmentModal={setEquipmentModal}\n              newDurationName={newDurationName}\n              setNewDurationName={setNewDurationName}\n              showDurationModal={showDurationModal}\n              setShowDurationModal={setShowDurationModal}\n              tags={tags}\n              setTags={setTags}\n              allTags={allTags}\n              setAllTags={setAllTags}\n              newTagName={newTagName}\n              setNewTagName={setNewTagName}\n              showTagModal={showTagModal}\n              setShowTagModal={setShowTagModal}\n              update={true}\n            />\n          </TabPane>\n          <TabPane tab=\"Workouts\" key=\"2\">\n            <NewChallengeWorkoutTab\n              weeksToBeUpdated={weeksToBeUpdated}\n              update={true}\n              weeks={weeks}\n              setWeeks={setWeeks}\n              addWorkoutModalVisible={addWorkoutModalVisible}\n              setAddWorkoutModalVisible={setAddWorkoutModalVisible}\n              workoutModalFullscreen={workoutModalFullscreen}\n              setWorkoutModalFullscreen={setWorkoutModalFullscreen}\n              allProducts={allProducts}\n              setAllProducts={setAllProducts}\n              setProducts={setProducts}\n              allEquipments={allEquipments}\n              setAllEquipments={setAllEquipments}\n              workoutToUpdate={workoutToUpdate}\n              setWorkoutToUpdate={setWorkoutToUpdate}\n              currentStep={currentStep}\n              setCurrentStep={setCurrentStep}\n              currentWeek={currentWeek}\n              setCurrentWeek={setCurrentWeek}\n              workoutTitle={workoutTitle}\n              setWorkoutTile={setWorkoutTile}\n              workoutSubtitle={workoutSubtitle}\n              setWorkoutSubtile={setWorkoutSubtile}\n              groupName={groupName}\n              setGroupName={setGroupName}\n              infoTitle={infoTitle}\n              setInfoTile={setInfoTile}\n              infoFile={infoFile}\n              setInfoFile={setInfoFile}\n              workoutIntroVideoFile={workoutIntroVideoFile}\n              setWorkoutIntroVideoFile={setWorkoutIntroVideoFile}\n              workoutIntroVideoLength={workoutIntroVideoLength}\n              setWorkoutIntroVideoLength={setWorkoutIntroVideoLength}\n              relatedProducts={relatedProducts}\n              setRelatedProducts={setRelatedProducts}\n              relatedEquipments={relatedEquipments}\n              setRelatedEquipments={setRelatedEquipments}\n              renderWorkout={renderWorkout}\n              setRenderWorkout={setRenderWorkout}\n              renderedWorkoutExercises={renderedWorkoutExercises}\n              setRenderWorkoutExercises={setRenderWorkoutExercises}\n              nonRenderedWorkoutExercises={nonRenderedWorkoutExercises}\n              setNonRenderedWorkoutExercises={setNonRenderedWorkoutExercises}\n              setWorkoutIdsThatNeedToBeUpdated={\n                setWorkoutIdsThatNeedToBeUpdated\n              }\n              workoutIdsThatNeedToBeUpdated={workoutIdsThatNeedToBeUpdated}\n              // updateWorkouts={updateWorkouts}\n            />\n          </TabPane>\n          <TabPane tab=\"Music\" key=\"3\">\n            <NewChallengeMusicTab\n              musics={musics}\n              setMusics={setMusics}\n              update={true}\n            />\n          </TabPane>\n          <TabPane tab=\"Additional\" key=\"4\">\n            <NewChallengeAdditionalTab\n              results={results}\n              setResults={setResults}\n              allProducts={allProducts}\n              setAllProducts={setAllProducts}\n              makePublic={makePublic}\n              setMakePublic={setMakePublic}\n              allowComments={allowComments}\n              setAllowComments={setAllowComments}\n              allowReviews={allowReviews}\n              setAllowReviews={setAllowReviews}\n              additionalProducts={additionalProducts}\n              setAdditionalProducts={setAdditionalProducts}\n              informationList={informationList}\n              setInformationList={setInformationList}\n              // createChallenge={createChallengeButton}\n              update={true}\n              updateChallenge={updateChallengeButton}\n            />\n          </TabPane>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nexport default UpdateChallenge;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\NewCoupon.js",["948"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Switch, Select, InputNumber } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createCoupon } from \"../../../services/coupons\";\nimport { getAllChallenges } from \"../../../services/createChallenge/main\";\n\nfunction NewCoupon() {\n  const [code, setCode] = useState(\"\");\n  const [active, setActive] = useState(false);\n  const [applicableOn, setApplicableOn] = useState([]);\n  const [challengesApplicableOn, setChallengesApplicableOn] = useState([]);\n  const [allChallenges, setAllChallenges] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const onFinish = async (values) => {\n    setLoading(true);\n    if (code.length > 0) {\n      const s = {\n        name: values.name,\n        code: code,\n        discountPercent: parseInt(values.discount),\n        limitUsage: values.usageCount,\n        isActive: values.active,\n        applicableOn: values.applicableOn,\n        challengesApplicableOn:\n          challengesApplicableOn.length > 0 ? challengesApplicableOn : null,\n      };\n      const res = await createCoupon(s);\n      console.log(res);\n    } else {\n      alert(\"Please enter coupon code\");\n    }\n    setLoading(false);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n  // const selectBefore = (\n  //   <Select defaultValue=\"%\" className=\"select-before\">\n  //     <Option value=\"%\">%</Option>\n  //     <Option value=\"€\">€</Option>\n  //   </Select>\n  // );\n\n  useEffect(() => {\n    fetchChallenges();\n  }, []);\n\n  const fetchChallenges = async () => {\n    const c = await getAllChallenges(localStorage.getItem(\"locale\"));\n    setAllChallenges(c.challenges);\n  };\n\n  return (\n    <>\n      <h2 className=\"font-heading-black\">New Coupon</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Please input coupon name!\" }]}\n            type=\"number\"\n          >\n            <Input style={{ width: \"100%\" }} />\n          </Form.Item>\n\n          <Form.Item label=\"Coupon Code\" name=\"couponCode\">\n            <Input value={code} onChange={(e) => setCode(e.target.value)} />\n            <Button\n              type=\"primary\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n                float: \"right\",\n              }}\n              onClick={() => {\n                setCode(\"RL\" + uuidv4().substring(1, 8));\n              }}\n            >\n              Generate Coupon Code\n            </Button>\n          </Form.Item>\n\n          <Form.Item\n            label=\"Discount\"\n            name=\"discount\"\n            rules={[{ required: true, message: \"Please input discount!\" }]}\n            type=\"number\"\n          >\n            <Input\n              placeholder=\"Must be in percentage eg 10\"\n              type=\"number\"\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Usage Count\"\n            name=\"usageCount\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input number of times the code can be used!\",\n              },\n            ]}\n            type=\"number\"\n          >\n            <InputNumber style={{ width: \"100%\" }} />\n          </Form.Item>\n          <Form.Item label=\"Active\" name=\"active\">\n            <Switch\n              checkedChildren=\"is active\"\n              unCheckedChildren=\"not active\"\n              checked={active}\n              onChange={(e) => setActive(e)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Applicable On Specific Plan\" name=\"applicableOn\">\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              value={applicableOn}\n              placeholder=\"Please select\"\n              onChange={(e) => setApplicableOn(e)}\n            >\n              {[\n                \"ALL\",\n                \"CHALLENGE ONE\",\n                \"CHALLENGE THREE\",\n                \"CHALLENGE TWELVE\",\n              ].map((e, i) => (\n                <Select.Option key={i + 1} value={e}>\n                  {e}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n\n          <Form.Item\n            label=\"Applicable On Specific Challenge\"\n            name=\"challengesApplicableOn\"\n          >\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              value={challengesApplicableOn}\n              placeholder=\"Please select\"\n              onChange={(e) => setChallengesApplicableOn(e)}\n            >\n              {allChallenges.map((e, i) => (\n                <Select.Option key={i + 1} value={e._id}>\n                  {e.challengeName}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewCoupon;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\AllCoupons.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MembershipManager\\NewMembership.js",["949","950","951"],"import React, { useState } from \"react\";\nimport { Form, Input, Button, Upload, Select, InputNumber, List } from \"antd\";\nconst { Option } = Select;\n\nfunction NewMembership() {\n  const [membershipName, setMembershipName] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [months, setMonths] = useState(0);\n  const onFinish = (values) => {\n    console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      <h2 className=\"font-heading-black\">New Membership</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Membership Name\"\n            name=\"membershipName\"\n            rules={[\n              { required: true, message: \"Please input membership name!\" },\n            ]}\n          >\n            <Input\n              value={membershipName}\n              onChange={(e) => setMembershipName(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Months\"\n            name=\"months\"\n            rules={[{ required: true, message: \"Please input month!\" }]}\n            type=\"number\"\n          >\n            <InputNumber\n              value={months}\n              onChange={(e) => setMonths(e)}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Price\"\n            name=\"price\"\n            rules={[{ required: true, message: \"Please input price!\" }]}\n            type=\"number\"\n          >\n            <InputNumber\n              value={price}\n              onChange={(e) => setPrice(e)}\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewMembership;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MembershipManager\\AllMemberships.js",["952"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Tag, Table, Space, Input } from \"antd\";\nimport moment from \"moment\";\n\nfunction AllMemberships() {\n  const [filterAllMemberships, setFilterAllMemberships] = useState([]);\n  const [allMemberships, setAllMemberships] = useState([\n    {\n      id: \"10\",\n      membershipTitle: \"Challenge One\",\n      price: 30,\n      time: 1,\n      // in months\n      createdAt: new Date(),\n    },\n\n    {\n      id: \"12\",\n      membershipTitle: \"Challenge Three\",\n      price: 78,\n      time: 3,\n      // in months\n      createdAt: new Date(),\n    },\n    {\n      id: \"15\",\n      membershipTitle: \"Challenge Twelve\",\n      price: 234,\n      time: 12,\n      // in months\n      createdAt: new Date(),\n    },\n    {\n      id: \"18\",\n      membershipTitle: \"Free\",\n      price: 0,\n      time: 0,\n      // in months\n      createdAt: new Date(),\n    },\n  ]);\n\n  useEffect(() => {\n    setFilterAllMemberships(allMemberships);\n  }, [allMemberships]);\n  const columns = [\n    {\n      title: \"Id\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Membership Name\",\n      dataIndex: \"membershipTitle\",\n      key: \"membershipTitle\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (text) => <span className=\"font-paragraph-black\">€ {text}</span>,\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"time\",\n      key: \"time\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text} months</span>\n      ),\n    },\n    {\n      title: \"Updated At\",\n      dataIndex: \"createdAt\",\n      key: \"createdAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"primary\">Preview</Button>\n          <Button type=\"primary\">Edit</Button>\n          <Button type=\"danger\">Delete</Button>\n        </Space>\n      ),\n    },\n  ];\n  return (\n    <div>\n      <h2 className=\"font-heading-black\">All Membership</h2>\n      <div className=\"admin-allchallenges-list-container\">\n        <Input\n          placeholder=\"Search Membership By Title\"\n          onChange={(e) =>\n            setAllMemberships(\n              allMemberships.filter((mem) =>\n                mem.membershipTitle\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n\n        <Input\n          style={{ marginTop: \"10px\" }}\n          placeholder=\"Search Membership By ID\"\n          onChange={(e) =>\n            setAllMemberships(\n              allMemberships.filter((mem) =>\n                mem.id.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Table columns={columns} dataSource={filterAllMemberships} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllMemberships;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\AllPosts.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\AllBlogs.js",["953","954"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Button, Table, Space, Input, Select } from \"antd\";\nimport moment from \"moment\";\nimport UpdateBlog from \"./UpdateBlog\";\nimport {\n  getAllUserBlogs,\n  removeBlog,\n  updateBlog,\n} from \"../../../services/blogs\";\nimport { T } from \"../../Translate\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nfunction AllBlogs() {\n  const { language } = useContext(LanguageContext);\n  const [filterAllBlogs, setFilterAllBlogs] = useState([]);\n  const [allBlogs, setAllBlogs] = useState([]);\n  const [selectedBlog, setSelectedBlog] = useState({});\n  const [show, setShow] = useState(\"\");\n\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n\n  const onUpdateComplete = async (setLoading, vals, blogId) => {\n    await updateBlog(vals, blogId);\n    setLoading(false);\n    setShow(false);\n    fetchData();\n  };\n\n  const fetchData = async () => {\n    const data = await getAllUserBlogs(language);\n    setAllBlogs(data.blogs);\n    setFilterAllBlogs(data.blogs);\n    console.log(\"all blogs\", data.blogs);\n  };\n\n  const deleteBlog = async (blog) => {\n    await removeBlog(blog._id);\n    fetchData();\n  };\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"title\",\n      key: \"title\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Author\",\n      dataIndex: \"user\",\n      key: \"user\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text?.username}</span>\n      ),\n    },\n    {\n      title: \"Category\",\n      dataIndex: \"category\",\n      key: \"category\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text ? text.name : \"\"}</span>\n      ),\n    },\n    {\n      title: \"Language\",\n      dataIndex: \"language\",\n      key: \"language\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Updated At\",\n      key: \"updatedAt\",\n      dataIndex: \"updatedAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              setSelectedBlog(record);\n              setShow(true);\n            }}\n          >\n            <T>adminDashboard.edit</T>\n          </Button>\n          <Button type=\"danger\" onClick={() => deleteBlog(record)}>\n            <T>adminDashboard.delete</T>\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n  return (\n    <div>\n      <UpdateBlog\n        show={show}\n        setShow={setShow}\n        onUpdateComplete={onUpdateComplete}\n        blogInfo={selectedBlog}\n        key={selectedBlog ? selectedBlog._id : \"\"}\n      />\n      <h2 className=\"font-heading-black\">\n        {\" \"}\n        <T>adminDashboard.blogs.alL</T>\n      </h2>\n\n      <div className=\"admin-allchallenges-list-container\">\n        <Input\n          placeholder=\"Search Blogs By Name\"\n          onChange={(e) =>\n            setFilterAllBlogs(\n              allBlogs.filter((blog) =>\n                blog.title.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Input\n          style={{ marginTop: \"10px\" }}\n          placeholder=\"Search Blogs By ID\"\n          onChange={(e) =>\n            setFilterAllBlogs(\n              allBlogs.filter((blog) =>\n                blog._id.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n\n        <Table columns={columns} dataSource={filterAllBlogs} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllBlogs;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\NewBlog.js",["955","956","957","958"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Form, Input, Button, Select, Modal, List } from \"antd\";\nimport { CloseSquareOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport {\n  createBlog,\n  createBlogCategory,\n  getAllBlogCategories,\n  getAllBlogs,\n  getAllUserBlogs,\n  removeBlogCategory,\n  updateBlog,\n} from \"../../../services/blogs\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport EditCategoryName from \"./EditCategoryName\";\nimport TextEditor from \"../../TextEditor\";\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\nimport { createPost } from \"../../../services/posts\";\nimport slug from \"elegant-slug\";\n// import ReactHTMLParser from \"react-html-parser\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\nimport { T } from \"../../Translate\";\nconst { Option } = Select;\n\nfunction NewBlog({ setCurrentSelection }) {\n  // user context\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const { language } = useContext(LanguageContext);\n\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [paragraph, setParagraph] = useState(\"\");\n  const [featuredImage, setFeaturedImage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [videoLink, setVideLink] = useState(\"\");\n  //   category\n  const [category, setCategory] = useState(\"\");\n  const [allCategories, setAllCategories] = useState([]);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [categoryModalVisible, setCategoryModalVisible] = useState(false);\n  const [editCategoryNameModalVisible, setEditCategoryModelVisible] =\n    useState(false);\n\n  const [selectedCategoryForUpdate, setSelectedCategoryForUpdate] = useState(\n    {}\n  );\n  const [isPublic, setIsPublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n  const [userCreatePost, setUserCreatePost] = useState(false);\n  // ----\n  const [selectedBlog, setSelectedBlog] = useState(\"\");\n  const [allBlogs, setAllBlogs] = useState([]);\n\n  // useEffect(() => {\n  //   fethData();\n  //   getAllBlogsFromBackend();\n  // }, [language]);\n\n  const fethData = async () => {\n    const data = await getAllBlogCategories(language);\n    setAllCategories(data.categories);\n    console.log(data);\n  };\n\n  async function getAllBlogsFromBackend() {\n    const data = await getAllUserBlogs(\n      language === \"english\" ? \"dutch\" : \"english\"\n    );\n    // console.log(data);\n    if (data && data.blogs) {\n      setAllBlogs(data.blogs);\n    }\n  }\n\n  async function updateSelectedBlog(id) {\n    await updateBlog(\n      {\n        alternativeLanguage: id,\n      },\n      selectedBlog\n    );\n  }\n  const createNewBlog = async () => {\n    let flag = false;\n    if (title && paragraph && featuredImage && videoLink && category) {\n      flag = true;\n    }\n    if (!flag) {\n      alert(\"Please fill all the information\");\n    } else {\n      setLoading(true);\n      const vals = {\n        language: language,\n        title,\n        paragraph,\n        featuredImage: featuredImage.link,\n        videoLink: videoLink.link,\n        category,\n        user: userInfo.id,\n        isPublic: isPublic,\n        allowComments: allowComments,\n        allowReviews: allowReviews,\n      };\n      if (selectedBlog) vals.alternativeLanguage = selectedBlog;\n\n      const res = await createBlog(vals);\n      setLoading(false);\n      if (res) {\n        // return;\n        userCreatePost && createAPost(res.newBlog._id);\n        selectedBlog && updateSelectedBlog(res.newBlog._id);\n        setCurrentSelection(2.1);\n      }\n    }\n  };\n\n  const createAPost = async (id) => {\n    const values = {\n      title: title,\n      image: featuredImage.link,\n      text: \"\",\n      type: \"Magazine\",\n      language: language,\n      url: `/magazine/${slug(title)}/${id}`,\n    };\n    await createPost(values);\n    // setCreatePostModalVisible(false);\n    // console.log(values);\n  };\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      {/* edit category name modal */}\n      <EditCategoryName\n        editCategoryNameModalVisible={editCategoryNameModalVisible}\n        setEditCategoryModelVisible={setEditCategoryModelVisible}\n        fethData={fethData}\n        selectedForUpdate={selectedCategoryForUpdate}\n        titleName=\"Update Category\"\n      />\n      {/* modal to create a new meal type  */}\n      <Modal\n        onCancel={() => setCategoryModalVisible(false)}\n        footer={false}\n        visible={categoryModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Manage Blog Category</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newCategoryName}\n            onChange={(e) => setNewCategoryName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newCategoryName.length > 0) {\n                await createBlogCategory({\n                  name: newCategoryName,\n                  language: language,\n                });\n                // setEquipmentModal(false);\n                fethData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Categories</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allCategories}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeBlogCategory(cat._id);\n                      fethData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedCategoryForUpdate(cat);\n                      setEditCategoryModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      <h2 className=\"font-heading-black\">New Blog</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <div style={{ marginTop: \"-40px\", marginBottom: \"20px\" }}>\n          <span style={{ marginRight: \"5px\" }}>Select Language:</span>\n          <LanguageSelector notFromNav={true} />\n          <div>\n            <span\n              style={{ marginRight: \"5px\" }}\n            >{`Select alternative language version`}</span>\n            <Select\n              style={{ width: \"500px\" }}\n              onChange={(e) => setSelectedBlog(e)}\n            >\n              <Option value={\"\"}>-</Option>\n              {allBlogs.map((r, i) => (\n                <Option key={i} value={r._id}>\n                  {r.title}\n                </Option>\n              ))}\n            </Select>\n          </div>\n        </div>\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Title\"\n            name=\"recipeName\"\n            rules={[{ required: true, message: \"Please input title!\" }]}\n          >\n            <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n          </Form.Item>\n          <Form.Item\n            label=\"Featured Image\"\n            name=\"featuredImage\"\n            rules={[\n              { required: true, message: \"Please input featured image!\" },\n            ]}\n          >\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([featuredImage, setFeaturedImage]);\n              }}\n            >\n              Upload File\n            </Button>\n            {featuredImage && (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  marginRight: \"15px\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <img\n                  alt=\"\"\n                  src={`${featuredImage.link}`}\n                  height=\"auto\"\n                  width={\"80%\"}\n                />\n                <span>\n                  {featuredImage.name}{\" \"}\n                  <CloseSquareOutlined\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setFeaturedImage(\"\")}\n                  />\n                </span>\n              </div>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Paragraph\"\n            name=\"paragraph\"\n            rules={[{ required: true }]}\n          >\n            {/* <Input.TextArea\n              rows={20}\n              value={paragraph}\n              onChange={(e) => setParagraph(e.target.value)}\n            /> */}\n            <TextEditor value={paragraph} setValue={setParagraph} />\n          </Form.Item>\n          <Form.Item label=\"Video Link\" name=\"videoLink\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"videos\");\n                setMediaManagerActions([videoLink, setVideLink]);\n              }}\n            >\n              Upload File\n            </Button>\n            {videoLink && (\n              <div className=\"font-paragraph-black\">\n                {videoLink.name}{\" \"}\n                <CloseSquareOutlined\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setVideLink(\"\")}\n                />\n              </div>\n            )}\n          </Form.Item>\n          <Form.Item label=\"Category\" name=\"category\">\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={category}\n              onChange={(e) => setCategory(e)}\n            >\n              {allCategories.map((cat) => (\n                <Option value={cat._id}>{cat.name}</Option>\n              ))}\n            </Select>\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setCategoryModalVisible(true)}\n            >\n              Manage Blog Categories\n            </Button>\n          </Form.Item>\n          {userInfo.role === \"admin\" && (\n            <>\n              {\" \"}\n              <Form.Item>\n                <Checkbox\n                  checked={userCreatePost}\n                  onChange={(e) => setUserCreatePost(e.target.checked)}\n                >\n                  Create a post\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={isPublic}\n                  onChange={(e) => setIsPublic(e.target.checked)}\n                >\n                  Make Public\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={allowReviews}\n                  onChange={(e) => setAllowReviews(e.target.checked)}\n                >\n                  Allow Reviews\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={allowComments}\n                  onChange={(e) => setAllowComments(e.target.checked)}\n                >\n                  Allow Comments\n                </Checkbox>\n              </Form.Item>\n            </>\n          )}\n          {loading ? (\n            <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"30px\" }} />\n          ) : (\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => createNewBlog()}\n            >\n              <T>adminDashboard.create</T>\n            </Button>\n          )}\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewBlog;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\AllRecipes.js",["959","960"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Table, Space, Input } from \"antd\";\nimport {\n  getAllRecipes,\n  deleteRecipeWithId,\n  getAllUserRecipes,\n} from \"../../../services/recipes\";\nimport moment from \"moment\";\nimport UpdateRecipe from \"./UpdateRecipe\";\nimport { useContext } from \"react\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nfunction AllRecipes() {\n  const { language } = useContext(LanguageContext);\n  const [filterAllRecipes, setFilterAllRecipes] = useState([]);\n  const [allRecipes, setAllRecipes] = useState([]);\n  const [updateModal, setUpdateModal] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState({});\n\n  async function fetchData() {\n    const data = await getAllUserRecipes(language);\n    if (data) {\n      setAllRecipes(data.recipes);\n      setFilterAllRecipes(data.recipes);\n    }\n  }\n\n  async function deleteRecipe(id) {\n    await deleteRecipeWithId(id);\n    fetchData();\n  }\n  useEffect(() => {\n    fetchData();\n  }, [language]);\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Calories\",\n      dataIndex: \"kCalPerPerson\",\n      key: \"kCalPerPerson\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Prepration Time\",\n      dataIndex: \"prepTime\",\n      key: \"prepTime\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Language\",\n      dataIndex: \"language\",\n      key: \"language\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Updated At\",\n      key: \"updatedAt\",\n      dataIndex: \"updatedAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Is Public\",\n      key: \"isPublic\",\n      dataIndex: \"isPublic\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text ? \"True\" : \"False\"}</span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              setSelectedProduct(text);\n              setUpdateModal(true);\n            }}\n          >\n            Edit\n          </Button>\n          <Button type=\"danger\" onClick={() => deleteRecipe(text._id)}>\n            Delete\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n  return (\n    <div>\n      <UpdateRecipe\n        visible={updateModal}\n        setVisible={setUpdateModal}\n        selectedProduct={selectedProduct}\n        getAllProducts={fetchData}\n        key={Math.random()}\n      />\n      <h2 className=\"font-heading-black\">All Recipes</h2>\n      <div className=\"admin-allchallenges-list-container\">\n        <Input\n          placeholder=\"Search Recipe By Name\"\n          onChange={(e) =>\n            setFilterAllRecipes(\n              allRecipes.filter((recipe) =>\n                recipe.name.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Input\n          placeholder=\"Search Recipe By ID\"\n          style={{ marginTop: \"10px\" }}\n          onChange={(e) =>\n            setFilterAllRecipes(\n              allRecipes.filter((recipe) =>\n                recipe._id.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Table columns={columns} dataSource={filterAllRecipes} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllRecipes;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\NewRecipe.js",["961","962","963","964","965","966","967","968","969"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  message,\n  Select as AntdSelect,\n  Modal,\n  InputNumber,\n  List,\n} from \"antd\";\nimport Select from \"react-select\";\nimport { PlusOutlined, CloseSquareOutlined } from \"@ant-design/icons\";\nimport { v4 } from \"uuid\";\nimport {\n  createIngredient,\n  createDiet,\n  createFoodType,\n  createMealType,\n  getAllDietTypes,\n  getAllMealTypes,\n  getAllFoodTypes,\n  getAllIngredients,\n  removeMealType,\n  removeFoodType,\n  removeDiet,\n  removeIngredient,\n  createRecipe,\n  getAllRecipes,\n  getAllUserRecipes,\n  updateRecipe,\n} from \"../../../services/recipes\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { createPost } from \"../../../services/posts\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\nimport EditTypeName from \"./EditTypeName\";\nimport slug from \"elegant-slug\";\nimport TextEditor from \"../../TextEditor\";\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nconst { Option } = AntdSelect;\n\nfunction NewRecipe({ setCurrentSelection }) {\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const { language } = useContext(LanguageContext);\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // -----------\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [featuredImage, setFeaturedImage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [thumbnailBase64, setThumbnailBase64] = useState(\"\");\n  const [preprationTime, setPreprationTime] = useState(\"\");\n  const [persons, setPersons] = useState(\"\");\n  const [kcalPerPersons, setKcalPerPersons] = useState(\"\");\n  const [saturationIndex, setSaturationIndex] = useState(\"\");\n  const [protein, setProtein] = useState(\"\");\n  const [carbohydrates, setCarbohydrates] = useState(\"\");\n  const [fat, setFat] = useState(\"\");\n  const [fiber, setFiber] = useState(\"\");\n  const [isPublic, setIsPublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n  //meal type\n  const [mealTypes, setMealTypes] = useState([]);\n  const [allMealTypes, setAllMealTypes] = useState([]);\n  const [mealTypeModalVisible, setMealTypeModalVisible] = useState(false);\n  const [newMealTypeName, setNewMealTypeName] = useState(\"\");\n  //=food type\n  const [foodType, setFoodTypes] = useState([]);\n  const [allFoodTypes, setAllFoodTypes] = useState([]);\n  const [foodTypeModalVisible, setFoodTypeModalVisible] = useState(false);\n  const [newFoodTypeName, setNewFoodTypeName] = useState(\"\");\n  //=diet\n  const [diet, setDiet] = useState([]);\n  const [allDiets, setAllDiets] = useState([]);\n  const [dietModalVisible, setDietModalVisible] = useState(false);\n  const [newDietName, setNewDietName] = useState(\"\");\n  //   INGREDIETS\n  const [allIngredients, setAllIngredients] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [newIngredientModalVisible, setNewIngredientModlVisible] =\n    useState(false);\n  const [newIngredientName, setNewIngredientName] = useState(\"\");\n  //   cooking process\\\n  const [cookingProcess, setCookingProcess] = useState([]);\n  const [notes, setNotes] = useState(\"\");\n  const [tips, setTips] = useState(\"\");\n  // all recipes\n  const [allRecipes, setAllRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(\"\");\n  // --------------\n  // const [createPostModalVisible, setCreatePostModalVisible] = useState(false);\n  const [userCreatePost, setUserCreatePost] = useState(false);\n  // update stuff\n  const [editItemNameModalVisible, setEditItemModelVisible] = useState(false);\n\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n\n  const [sendNotifications, setSendNotifications] = useState(false);\n\n  async function fetchData() {\n    const diets = await getAllDietTypes(language);\n    const meals = await getAllMealTypes(language);\n    const foodTypes = await getAllFoodTypes(language);\n    const ingredients = await getAllIngredients(language);\n\n    setAllDiets(diets.diets);\n    setAllMealTypes(\n      meals.mealTypes.map((f) => ({ ...f, name: f.name.split(\"___\")[0] }))\n    );\n    setAllFoodTypes(\n      foodTypes.foodTypes.map((f) => ({ ...f, name: f.name.split(\"___\")[0] }))\n    );\n    setAllIngredients(ingredients.ingredients);\n  }\n\n  async function fetchAllRecipes() {\n    const res = await getAllUserRecipes(\n      language === \"english\" ? \"dutch\" : \"english\"\n    );\n    if (res && res.recipes) {\n      setAllRecipes(res.recipes);\n    }\n  }\n  useEffect(() => {\n    fetchData();\n    fetchAllRecipes();\n  }, [language]);\n\n  const ing = {\n    id: v4(),\n    name: \"\",\n    weight: \"\",\n    volume: \"\",\n    pieces: \"\",\n    method: \"\",\n    other: \"\",\n  };\n\n  const onFinish = async (values) => {\n    if (description.length <= 0) {\n      alert(\"Please add description\");\n      return;\n    }\n    const d = {\n      name,\n      description,\n      language: language,\n      image: featuredImage.link,\n      prepTime: preprationTime,\n      kCalPerPerson: kcalPerPersons,\n      saturationIndex: saturationIndex,\n      protein: protein,\n      carbohydrate: carbohydrates,\n      persons: persons,\n      fat: fat,\n      fiber: fiber,\n      mealTypes: mealTypes.map((f) => f.value),\n      foodTypes: foodType.map((f) => f.value),\n      diet: diet.map((f) => f.value),\n      ingredients: ingredients,\n      cookingProcess: cookingProcess,\n      notes: notes,\n      tips: tips,\n      isPublic: isPublic,\n      allowComments: allowComments,\n      allowReviews: allowReviews,\n      sendNotification: sendNotifications,\n    };\n\n    if (selectedRecipe) d.alternativeLanguage = selectedRecipe;\n    // console.log(\"Success:\", values);\n    // console.log(values);\n\n    const res = await createRecipe(d);\n    if (res) {\n      userCreatePost && createAPost(res.newRecipe._id);\n      selectedRecipe && updateSelectedRecipe(res.newRecipe._id);\n      setCurrentSelection(4.1);\n    }\n\n    console.log(\"res\", res);\n  };\n\n  async function updateSelectedRecipe(id) {\n    const v = {\n      alternativeLanguage: id,\n    };\n    await updateRecipe(v, selectedRecipe);\n  }\n\n  const createAPost = async (id) => {\n    const values = {\n      title: name,\n      text: description,\n      image: featuredImage.link,\n      type: \"Recipe\",\n      url: `/recipe/${slug(name)}/${id}`,\n      language: language,\n    };\n    await createPost(values);\n    // setCreatePostModalVisible(false);\n    // console.log(values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const changeIngredientValue = (key, ingredientId, value) => {\n    let i = [...ingredients];\n    i = i.map((ingre) => {\n      if (ingre.id === ingredientId) {\n        ingre[key] = value;\n      }\n      return ingre;\n    });\n    setIngredients(i);\n  };\n\n  const removeIngredientListItem = (item) => {\n    let i = [...ingredients];\n    i = i.filter((ingre) => ingre.id !== item.id);\n    setIngredients(i);\n  };\n  const renderIngredientsList = (item) => (\n    <List.Item style={{ display: \"block\", textAlign: \"right\" }}>\n      <Button type=\"danger\" onClick={() => removeIngredientListItem(item)}>\n        Remove\n      </Button>\n\n      <div className=\"new-recipe-ingredient-listitem\">\n        <div>\n          <span className=\"font-paragraph-black\">Select Ingredient</span>\n          <Select\n            onChange={(e) => changeIngredientValue(\"name\", item.id, e.value)}\n            options={allIngredients.map((food) => ({\n              label: food.name,\n              value: food._id,\n            }))}\n          />\n          {/* <AntdSelect\n            style={{ width: \"100%\" }}\n            showSearch\n            onSearch={(v) => console.log(\"value\", v)}\n            onChange={(e) => changeIngredientValue(\"name\", item.id, e)}\n            listHeight=\"100\"\n            filterOption={(input, option) => {\n              // console.log(\"value\", input,option);\n              return (\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              );\n            }}\n          >\n            {allIngredients.map((i) => (\n              <Option value={i._id} key={i._id}>\n                {i.name}\n              </Option>\n            ))}\n          </AntdSelect> */}\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Weight (gm)</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Weight\"\n            value={item.weight}\n            onChange={(e) =>\n              changeIngredientValue(\"weight\", item.id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Volume (ml)</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Volume\"\n            value={item.volume}\n            onChange={(e) =>\n              changeIngredientValue(\"volume\", item.id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Pieces</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Pieces\"\n            value={item.pieces}\n            onChange={(e) =>\n              changeIngredientValue(\"pieces\", item.id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Method</span>\n          <Input\n            placeholder=\"Enter Method\"\n            value={item.method}\n            onChange={(e) =>\n              changeIngredientValue(\"method\", item.id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Other</span>\n          <Input\n            placeholder=\"Enter Other\"\n            value={item.other}\n            onChange={(e) =>\n              changeIngredientValue(\"other\", item.id, e.target.value)\n            }\n          />\n        </div>\n      </div>\n    </List.Item>\n  );\n\n  const removeCookingProcessItem = (item, index) => {\n    let cp = [...cookingProcess];\n    cp.splice(index, 1);\n    setCookingProcess(cp);\n  };\n\n  const onchangeCookingProcess = (value, index) => {\n    let cp = [...cookingProcess];\n    cp[index] = value;\n    setCookingProcess(cp);\n  };\n  const renderCookingProcessList = (item, index) => (\n    <List.Item>\n      <span className=\"font-subheading-black\" style={{ marginRight: \"10px\" }}>\n        {index + 1}\n      </span>\n      <Input.TextArea\n        value={item}\n        onChange={(e) => onchangeCookingProcess(e.target.value, index)}\n        style={{ marginRight: \"10px\" }}\n        rows={2}\n      />\n      <Button\n        type=\"danger\"\n        onClick={() => removeCookingProcessItem(item, index)}\n      >\n        Remove\n      </Button>\n    </List.Item>\n  );\n\n  return (\n    <>\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n\n      {/* modal to create a new meal type  */}\n      <Modal\n        onCancel={() => setMealTypeModalVisible(false)}\n        footer={false}\n        visible={mealTypeModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Enter Meal Type</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newMealTypeName}\n            onChange={(e) => setNewMealTypeName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newMealTypeName.length > 0) {\n                await createMealType(\n                  `${newMealTypeName}___${language}`,\n                  language\n                );\n                // setEquipmentModal(false);\n                fetchData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Meal Types</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allMealTypes}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeMealType(cat._id);\n                      fetchData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Meal Type\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      {/* modal to create a new food type  */}\n      <Modal\n        onCancel={() => setFoodTypeModalVisible(false)}\n        footer={false}\n        visible={foodTypeModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Enter Food Type</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newFoodTypeName}\n            onChange={(e) => setNewFoodTypeName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newFoodTypeName.length > 0) {\n                await createFoodType(\n                  `${newFoodTypeName}___${language}`,\n                  language\n                );\n                // setEquipmentModal(false);\n                fetchData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Food Types</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allFoodTypes}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeFoodType(cat._id);\n                      fetchData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Food Type\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* modal to create a new diet  */}\n      <Modal\n        onCancel={() => setDietModalVisible(false)}\n        footer={false}\n        visible={dietModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Enter Diet</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newDietName}\n            onChange={(e) => setNewDietName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newDietName.length > 0) {\n                await createDiet(newDietName, language);\n                // setEquipmentModal(false);\n                fetchData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Diet Types</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allDiets}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeDiet(cat._id);\n                      fetchData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Diet Type\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* modal to create a new ingredient  */}\n      <Modal\n        onCancel={() => setNewIngredientModlVisible(false)}\n        footer={false}\n        visible={newIngredientModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Enter Ingredient</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newIngredientName}\n            onChange={(e) => setNewIngredientName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newIngredientName.length > 0) {\n                await createIngredient(newIngredientName, language);\n                // setEquipmentModal(false);\n                fetchData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Ingredients</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allIngredients}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeIngredient(cat._id);\n                      fetchData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Ingredient\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      <EditTypeName\n        editCategoryNameModalVisible={editItemNameModalVisible}\n        setEditCategoryModelVisible={setEditItemModelVisible}\n        fethData={fetchData}\n        selectedForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n\n      <h2 className=\"font-heading-black\">New Recipe</h2>\n\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <div style={{ marginTop: \"-40px\", marginBottom: \"20px\" }}>\n          <span style={{ marginRight: \"5px\" }}>Select Language:</span>\n          <LanguageSelector notFromNav={true} />\n          <div>\n            <span\n              style={{ marginRight: \"5px\" }}\n            >{`Select alternative language version`}</span>\n            <AntdSelect\n              style={{ width: \"500px\" }}\n              onChange={(e) => setSelectedRecipe(e)}\n            >\n              <Option value={\"\"}>-</Option>\n              {allRecipes.map((r, i) => (\n                <Option key={i._id} value={r._id}>\n                  {r.name}\n                </Option>\n              ))}\n            </AntdSelect>\n          </div>\n        </div>\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Recipe Name\"\n            name=\"recipeName\"\n            rules={[{ required: true, message: \"Please input recipe name!\" }]}\n          >\n            <Input value={name} onChange={(e) => setName(e.target.value)} />\n          </Form.Item>\n          <Form.Item label=\"Recipe Description\" name=\"recipeDescription\">\n            <TextEditor value={description} setValue={setDescription} />\n            {/* <Input.TextArea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            /> */}\n          </Form.Item>\n          <Form.Item label=\"Featured Image\" name=\"featuredImage\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([featuredImage, setFeaturedImage]);\n              }}\n            >\n              Upload File\n            </Button>\n            {typeof featuredImage === \"object\" && (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    marginRight: \"15px\",\n                    marginTop: \"10px\",\n                  }}\n                >\n                  <img\n                    alt=\"\"\n                    src={`${featuredImage.link}`}\n                    height=\"auto\"\n                    width={\"80%\"}\n                  />\n                  <span>\n                    {featuredImage.name}{\" \"}\n                    <CloseSquareOutlined\n                      style={{ cursor: \"pointer\" }}\n                      onClick={() => setFeaturedImage()}\n                    />\n                  </span>\n                </div>\n              </div>\n            )}\n          </Form.Item>\n          <Form layout=\"vertical\">\n            <div className=\"new-recipe-information-inputs-container\">\n              <Form.Item\n                label=\"Prepration Time\"\n                name=\"preprationTime\"\n                // rules={[\n                //   { required: true, message: \"Please input prepration time!\" },\n                // ]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={preprationTime}\n                  onChange={(e) => setPreprationTime(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Persons\"\n                name=\"persons\"\n                // rules={[\n                //   {\n                //     required: true,\n                //     message: \"Please input number of persons!\",\n                //   },\n                // ]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={persons}\n                  onChange={(e) => setPersons(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Kcal per person\"\n                name=\"kcalPerPerson\"\n                // rules={[\n                //   {\n                //     required: true,\n                //     message: \"Please input number of calories per person!\",\n                //   },\n                // ]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={kcalPerPersons}\n                  onChange={(e) => setKcalPerPersons(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Saturation Index\"\n                name=\"saturationIndex\"\n                type=\"number\"\n              >\n                <InputNumber\n                  value={saturationIndex}\n                  onChange={(e) => setSaturationIndex(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Protein\"\n                name=\"protein\"\n                // rules={[{ required: true, message: \"Please input protein!\" }]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={protein}\n                  onChange={(e) => setProtein(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Carbohydrates\"\n                name=\"carbohydrates\"\n                rules={\n                  [\n                    // { required: true, message: \"Please input carbohydrates!\" },\n                  ]\n                }\n                type=\"number\"\n              >\n                <InputNumber\n                  value={carbohydrates}\n                  onChange={(e) => setCarbohydrates(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Fat\"\n                name=\"fat\"\n                // rules={[{ required: true, message: \"Please input fats!\" }]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={fat}\n                  onChange={(e) => setFat(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n              <Form.Item\n                label=\"Fiber\"\n                name=\"fiber\"\n                // rules={[{ required: true, message: \"Please input fiber!\" }]}\n                type=\"number\"\n              >\n                <InputNumber\n                  value={fiber}\n                  onChange={(e) => setFiber(e)}\n                  style={{ width: \"100%\" }}\n                />\n              </Form.Item>\n            </div>\n          </Form>\n          <Form.Item label=\"Meal Types\" name=\"mealTypes\">\n            <Select\n              isMulti\n              onChange={(e) => setMealTypes(e)}\n              value={mealTypes}\n              options={allMealTypes.map((food) => ({\n                label: food.name,\n                value: food._id,\n              }))}\n            />\n            {/* <AntdSelect\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={mealTypes}\n              onChange={(e) => setMealTypes(e)}\n            >\n              {allMealTypes.map((meal) => (\n                <Option value={meal._id} key={meal._id}>\n                  {meal.name}\n                </Option>\n              ))}\n            </AntdSelect> */}\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setMealTypeModalVisible(true)}\n            >\n              Manage Meal Type\n            </Button>\n          </Form.Item>\n          <Form.Item label=\"Food Types\" name=\"foodTypes\">\n            <Select\n              isMulti\n              onChange={(e) => setFoodTypes(e)}\n              value={foodType}\n              options={allFoodTypes.map((food) => ({\n                label: food.name,\n                value: food._id,\n              }))}\n            />\n            {/* <AntdSelect\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={foodType}\n              onChange={(e) => setFoodTypes(e)}\n            >\n              {allFoodTypes.map((food) => (\n                <Option value={food._id} key={food._id}>\n                  {food.name}\n                </Option>\n              ))}\n            </AntdSelect> */}\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setFoodTypeModalVisible(true)}\n            >\n              Manage Food Type\n            </Button>\n          </Form.Item>\n          <Form.Item label=\"Diet\" name=\"diet\">\n            <Select\n              isMulti\n              onChange={(e) => setDiet(e)}\n              value={diet}\n              options={allDiets.map((food) => ({\n                label: food.name,\n                value: food._id,\n              }))}\n            />\n            {/* <AntdSelect\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={diet}\n              onChange={(e) => setDiet(e)}\n            >\n              {allDiets.map((d) => (\n                <Option value={d._id} key={d._id}>\n                  {d.name}\n                </Option>\n              ))}\n            </AntdSelect> */}\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setDietModalVisible(true)}\n            >\n              Manage Diet\n            </Button>\n          </Form.Item>\n          {/* ingredients */}\n          {\n            <div className=\"new-recipe-ingredients-list-container\">\n              <List\n                size=\"small\"\n                header={\n                  <div className=\"new-recipe-ingredients-list-container-header\">\n                    <span className=\"font-heading-black\">Add Ingredients</span>\n                    <div>\n                      <Button\n                        className=\"hover-orange\"\n                        onClick={() => setIngredients([...ingredients, ing])}\n                      >\n                        Add Ingredient\n                      </Button>\n                      <Button\n                        className=\"hover-orange\"\n                        onClick={() => setNewIngredientModlVisible(true)}\n                      >\n                        Manage Ingredients\n                      </Button>\n                    </div>\n                  </div>\n                }\n                bordered\n                dataSource={ingredients}\n                renderItem={renderIngredientsList}\n              />\n            </div>\n          }\n          {/* Cooking process */}\n          {\n            <div\n              className=\"new-recipe-ingredients-list-container\"\n              style={{ marginTop: \"30px\" }}\n            >\n              <List\n                size=\"small\"\n                header={\n                  <div className=\"new-recipe-ingredients-list-container-header\">\n                    <span className=\"font-heading-black\">Cooking Process</span>\n                    <div>\n                      <Button\n                        className=\"hover-orange\"\n                        onClick={() =>\n                          setCookingProcess([...cookingProcess, \"\"])\n                        }\n                      >\n                        Add Step\n                      </Button>\n                    </div>\n                  </div>\n                }\n                bordered\n                dataSource={cookingProcess}\n                renderItem={renderCookingProcessList}\n              />\n            </div>\n          }\n\n          <Form.Item label=\"Notes\" name=\"notes\" style={{ marginTop: \"30px\" }}>\n            {/* <Input.TextArea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n            /> */}\n            <TextEditor value={notes} setValue={setNotes} />\n          </Form.Item>\n          <Form.Item label=\"Tips\" name=\"tips\">\n            {/* <Input.TextArea\n              value={tips}\n              onChange={(e) => setTips(e.target.value)}\n            /> */}\n            <TextEditor value={tips} setValue={setTips} />\n          </Form.Item>\n          {userInfo.role === \"admin\" && (\n            <>\n              <Form.Item>\n                <Checkbox\n                  checked={userCreatePost}\n                  onChange={(e) => setUserCreatePost(e.target.checked)}\n                >\n                  Create a post\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={isPublic}\n                  onChange={(e) => setIsPublic(e.target.checked)}\n                >\n                  Make Public\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={allowReviews}\n                  onChange={(e) => setAllowReviews(e.target.checked)}\n                >\n                  Allow Reviews\n                </Checkbox>\n              </Form.Item>\n\n              <Form.Item>\n                <Checkbox\n                  checked={allowComments}\n                  onChange={(e) => setAllowComments(e.target.checked)}\n                >\n                  Allow Comments\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={sendNotifications}\n                  onChange={(e) => setSendNotifications(e.target.checked)}\n                >\n                  Create notification\n                </Checkbox>\n              </Form.Item>\n            </>\n          )}\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewRecipe;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\AllUsers.js",["970"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Table, Space, Input, Select } from \"antd\";\nimport moment from \"moment\";\nimport { deleteUser, getAllUsers } from \"../../../services/users\";\nimport UpdateUser from \"./UpdateUser\";\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\n\nfunction AllUsers() {\n  const [filterAllUsers, setFilterAllUsers] = useState([]);\n  const [allChallengeGoals, setAllChallengeGoals] = useState([]);\n  const [allUsers, setAllUsers] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState({});\n  const [show, setShow] = useState(\"\");\n\n  async function fetchUsers() {\n    const users = await getAllUsers();\n    const aCh = await getAllChallengeGoals();\n    if (aCh.challengeGoals) {\n      setAllChallengeGoals(aCh.challengeGoals);\n    }\n    setAllUsers(users.users);\n    setFilterAllUsers(users.users);\n  }\n\n  useEffect(async () => {\n    fetchUsers();\n  }, []);\n\n  useEffect(() => {\n    if (filter === \"all\") {\n      setFilterAllUsers(allUsers);\n    }\n    if (filter === \"admin\") {\n      const admins = allUsers.filter((f) => f.role === \"admin\");\n      setFilterAllUsers(admins);\n    }\n    if (filter === \"customer\") {\n      const admins = allUsers.filter((f) => f.role === \"customer\");\n      setFilterAllUsers(admins);\n    }\n    if (filter === \"nutrist\") {\n      const admins = allUsers.filter((f) => f.role === \"nutrist\");\n      setFilterAllUsers(admins);\n    }\n    if (filter === \"shopmanager\") {\n      const admins = allUsers.filter((f) => f.role === \"shopmanager\");\n      setFilterAllUsers(admins);\n    }\n    if (filter === \"blogger\") {\n      const admins = allUsers.filter((f) => f.role === \"blogger\");\n      setFilterAllUsers(admins);\n    }\n    if (filter === \"trainer\") {\n      const admins = allUsers.filter((f) => f.role === \"trainer\");\n      setFilterAllUsers(admins);\n    }\n  }, [allUsers, filter]);\n\n  const removeUser = async (d) => {\n    await deleteUser(d._id);\n    fetchUsers();\n  };\n\n  const onUpdateComplete = async (setLoading, vals, blogId) => {\n    // await updateBlog(vals, blogId);\n    // setLoading(false);\n    // setShow(false);\n    // fetchData();\n  };\n\n  const columns = [\n    {\n      title: \"ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Username\",\n      dataIndex: \"username\",\n      key: \"username\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    // {\n    //   title: \"Firstname\",\n    //   dataIndex: \"firstName\",\n    //   key: \"firstname\",\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    // },\n    // {\n    //   title: \"Lastname\",\n    //   dataIndex: \"lastName\",\n    //   key: \"lastname\",\n    //   render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    // },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      key: \"email\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n\n    {\n      title: \"Role\",\n      key: \"role\",\n      dataIndex: \"role\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\" style={{ color: \"#ff7700\" }}>\n          {text}\n        </span>\n      ),\n    },\n    {\n      title: \"Created At\",\n      key: \"updatedAt\",\n      dataIndex: \"updatedAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              setSelectedUser(record);\n              setShow(true);\n            }}\n          >\n            Edit\n          </Button>\n          <Button type=\"danger\" onClick={() => removeUser(record)}>\n            Delete\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <UpdateUser\n        userInfo={selectedUser}\n        show={show}\n        setShow={setShow}\n        onUpdateComplete={onUpdateComplete}\n        allChallengeGoals={allChallengeGoals}\n        fetchUsers={fetchUsers}\n        key={selectedUser ? selectedUser._id : \"\"}\n      />\n      <h2 className=\"font-heading-black\">All Users</h2>\n      <div>\n        <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\n          Filter By Role:\n        </span>\n        <Select\n          defaultValue=\"\"\n          style={{ width: 120, marginLeft: \"10px\" }}\n          onChange={(e) => setFilter(e)}\n        >\n          {[\n            \"all\",\n            \"admin\",\n            \"customer\",\n            \"trainer\",\n            \"blogger\",\n            \"shopmanager\",\n            \"nutrist\",\n          ].map((t) => (\n            <Select.Option value={t}>{t}</Select.Option>\n          ))}\n        </Select>\n      </div>\n      <div className=\"admin-allchallenges-list-container\">\n        <Input\n          placeholder=\"Search Users By Username\"\n          onChange={(e) =>\n            setFilterAllUsers(\n              allUsers.filter((user) =>\n                user.username\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Input\n          placeholder=\"Search User By ID\"\n          style={{ marginTop: \"10px\" }}\n          onChange={(e) =>\n            setFilterAllUsers(\n              allUsers.filter((user) =>\n                user._id.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Table columns={columns} dataSource={filterAllUsers} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllUsers;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\AllProducts.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\NewProduct.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\NewUser.js",["971","972","973","974","975","976","977","978","979","980","981"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Form, Input, Button, Select, List, Modal } from \"antd\";\nimport {\n  LoadingOutlined,\n  CloseSquareOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport {\n  registerUser,\n  sendEmailVerification,\n} from \"../../../services/authentication\";\nimport { createCustomerDetails } from \"../../../services/customer\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport {\n  createUserByAdmin,\n  updateUserProfileByAdmin,\n} from \"../../../services/users\";\nimport {\n  createTrainerGoal,\n  deleteTrainerGoals,\n  getAllTrainerGoals,\n} from \"../../../services/trainers\";\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\nimport EditTypeName from \"./EditTypeName\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nconst { Option } = Select;\nfunction NewUser({ setCurrentSelection, home }) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // user stuff\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [membership, setMembership] = useState(\"\");\n  const [hero, setHero] = useState(\"\");\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\n  const [motto, setMotto] = useState(\"\");\n  const [bio, setBio] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [allCountries, setAllCountries] = useState([]);\n  const [goals, setGoals] = useState([]);\n  const [gender, setGender] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  //trainer goals stuff\n  const [allTrainerGoals, setAllTrainerGoals] = useState([]);\n  const [allChallengeGoals, setAllChallengeGoals] = useState([]);\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState(\"\");\n  const [selectedTrainerGoal, setSelectedTrainerGoal] = useState(\"\");\n  const [showTrainerGoalModal, setShowTrainerGoalModal] = useState(false);\n  const [newTrainerGoalName, setNewTrainerGoalName] = useState(\"\");\n\n  // update stuff\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n\n  const { language } = useContext(LanguageContext);\n\n  // admin\",\n  //           \"trainer\",\n  //           \"nutrist\",\n  //           \"blogger\",\n  //           \"shopmanager\",\n  //           \"customer\n\n  useEffect(() => {\n    const allCountries = require(\"../../../assets/data/all-countries.json\");\n    setAllCountries(allCountries);\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const res = await getAllTrainerGoals(language);\n    const aCh = await getAllChallengeGoals(language);\n\n    // console.log(\"aCh\", aCh);\n    if (res.goals) {\n      setAllTrainerGoals(res.goals);\n    }\n    if (aCh.challengeGoals) {\n      setAllChallengeGoals(aCh.challengeGoals);\n    }\n\n    console.log(\"res\", res);\n  };\n  const onFinish = (values) => {\n    // console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  function generatePass() {\n    var length = 10,\n      charset =\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n      retVal = \"\";\n    for (var i = 0, n = charset.length; i < length; ++i) {\n      retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n    setPassword(retVal);\n    form.setFieldsValue({\n      password: retVal,\n    });\n    return retVal;\n  }\n\n  const createANewUser = async () => {\n    let flag = false;\n    if (username && firstName && lastName && email && password) {\n      flag = true;\n    }\n    if (flag) {\n      setLoading(true);\n      const data = {\n        firstName,\n        lastName,\n        password,\n        email,\n        gender,\n        username,\n        role: role.toLowerCase(),\n      };\n      const res = await createUserByAdmin(data);\n      // await sendEmailVerification(email);\n      console.log(\"yas0\", res);\n      if (res) {\n        if (role === \"ADMIN\") {\n          const data = {\n            heroBanner: \"\",\n            videoTrailerLink: \"\",\n            motto: \"\",\n            bio: \"\",\n            country: \"\",\n            gender: \"other\",\n            avatarLink: \"\",\n            trainersFitnessInterest: [],\n            trainerGoals: [],\n          };\n          await updateUserProfileByAdmin(data, res._id);\n          await createCustomerDetails(\n            {\n              gender,\n              goals: [],\n              currentFitnessLevel: [],\n              age: 10,\n              weight: 150,\n              measureSystem: \"metrics\",\n              height: 18,\n              bmi: 900,\n              bmir: 50,\n              caloriesPerDay: 200,\n              amountOfProtein: 25,\n              amountOfFat: 30,\n              amountOfCarbohydrate: 45,\n              avatarLink: \"some link\",\n            },\n            res._id\n          );\n          console.log(\"ADMIN CREATED\");\n          setLoading(false);\n        } else if (role === \"TRAINER\") {\n          const data = {\n            heroBanner: typeof hero === \"object\" ? hero.link : \"\",\n            videoTrailerLink:\n              typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\n            motto,\n            bio,\n            country,\n            gender,\n            avatarLink: typeof avatar === \"object\" ? avatar.link : avatar,\n            trainersFitnessInterest: selectedFitnessInterest,\n            trainerGoals: selectedTrainerGoal,\n          };\n          await updateUserProfileByAdmin(data, res._id, \"trainer\");\n          console.log(\"TRAINER CREATED\");\n          setLoading(false);\n        } else {\n          const data = {\n            heroBanner: typeof hero === \"object\" ? hero.link : \"\",\n            videoTrailerLink:\n              typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\n            motto,\n            bio,\n            country,\n            gender,\n            avatarLink: typeof avatar === \"object\" ? avatar.link : \"\",\n          };\n          await updateUserProfileByAdmin(data, res._id);\n          console.log(\"BLOGGER NUTRIENT SHOP MANAGER CREATED\");\n          setLoading(false);\n        }\n        setCurrentSelection(home);\n      } else {\n        window.alert(\"Unable to create account. Please try again.\");\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <div>\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      {/*  */}\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fetchData}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n      {/* modal to create a new trainer goal */}\n      <Modal\n        onCancel={() => setShowTrainerGoalModal(false)}\n        footer={false}\n        visible={showTrainerGoalModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\"> Create A New Fitness Interest</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newTrainerGoalName}\n            onChange={(e) => setNewTrainerGoalName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newTrainerGoalName.length > 0) {\n                await createTrainerGoal({ name: newTrainerGoalName, language });\n                // setShowBodyfocusModal(false);\n                fetchData();\n              }\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Fitness Interests</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allTrainerGoals}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{g.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await deleteTrainerGoals(g._id);\n                      fetchData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Fitness Interest\");\n                      setSelectedItemForUpdate(g);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* end */}\n      <h2 className=\"font-heading-black\">Create A New User</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          name=\"basic\"\n          layout=\"vertical\"\n          form={form}\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Username\"\n            name=\"username\"\n            rules={[{ required: true, message: \"Please input username!\" }]}\n          >\n            <Input\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              {\n                type: \"email\",\n                message: \"The input is not valid E-mail!\",\n              },\n              {\n                required: true,\n                message: \"Please input your E-mail!\",\n              },\n            ]}\n          >\n            <Input value={email} onChange={(e) => setEmail(e.target.value)} />\n          </Form.Item>\n          <Form.Item\n            label=\"First Name\"\n            name=\"firstname\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Last Name\"\n            name=\"lastname\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item name=\"gender\" label=\"Gender\">\n            <Select\n              className=\"field-focus-orange-border\"\n              placeholder=\"Select A Gender\"\n              onChange={(e) => setGender(e)}\n              gender={gender}\n              allowClear\n            >\n              <Option value=\"male\">Male</Option>\n              <Option value=\"female\">Female</Option>\n              <Option value=\"other\">Other</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[{ required: true, message: \"Please input your password!\" }]}\n          >\n            <Input.Password\n              style={{ color: \"black\" }}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              className=\"font-paragraph-white\"\n              onClick={() => generatePass()}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                float: \"right\",\n                margin: \"10px\",\n              }}\n            >\n              Generate Strong Password\n            </Button>\n          </Form.Item>\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              className=\"field-focus-orange-border\"\n              placeholder=\"Select A Role\"\n              onChange={(e) => setRole(e)}\n              allowClear\n            >\n              <Option value=\"ADMIN\">Admin</Option>\n              <Option value=\"TRAINER\">Trainer</Option>\n              <Option value=\"BLOGGER\">Blogger</Option>\n              <Option value=\"NUTRIST\">Nutrist</Option>\n              <Option value=\"SHOPMANAGER\">Shop Manager</Option>\n            </Select>\n          </Form.Item>\n          {role.includes(\"CUSTOMER\") ? (\n            <Form.Item\n              name=\"membership\"\n              label=\"Membership\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Select\n                mode=\"multiple\"\n                className=\"field-focus-orange-border\"\n                placeholder=\"Select A Membership\"\n                onChange={(e) => setMembership(e)}\n                allowClear\n              >\n                {[\n                  \"Challenge Three\",\n                  \"Challenge One\",\n                  \"Challenge Twelve\",\n                  \"Free\",\n                ].map((e) => (\n                  <Option value={e}>{e}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          ) : (\n            \"\"\n          )}\n\n          {!role.includes(\"ADMIN\") && (\n            <>\n              <Form.Item label=\"Avatar\" name=\"avatar\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"images\");\n                    setMediaManagerActions([avatar, setAvatar]);\n                  }}\n                >\n                  Upload Image\n                </Button>\n                {avatar && (\n                  <div style={{ margin: \"10px\" }}>\n                    <img\n                      style={{\n                        maxHeight: \"500px\",\n                        maxWidth: \"500px\",\n                        margin: \"20px\",\n                      }}\n                      src={`${avatar.link}`}\n                      // height=\"120px\"\n                      // width=\"150px\"\n                      height=\"auto\"\n                      width={\"80%\"}\n                      alt=\"\"\n                    />\n                    <div>\n                      {avatar.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setAvatar(\"\")}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Form.Item>\n\n              <Form.Item label=\"Hero\" name=\"hero\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"images\");\n                    setMediaManagerActions([hero, setHero]);\n                  }}\n                >\n                  Upload Image\n                </Button>\n                {hero && (\n                  <div style={{ margin: \"10px\" }}>\n                    <img\n                      src={`${hero.link}`}\n                      alt=\"\"\n                      height=\"50%\"\n                      width={\"80%\"}\n                    />\n                    <div>\n                      {hero.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setHero(\"\")}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Form.Item>\n\n              <Form.Item label=\"Video Trailer\" name=\"videoTrailer\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"videos\");\n                    setMediaManagerActions([videoTrailer, setVideoTrailer]);\n                  }}\n                >\n                  Upload Video\n                </Button>\n                {videoTrailer && (\n                  <div style={{ margin: \"10px\" }}>\n                    <span>\n                      {videoTrailer.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setVideoTrailer(\"\")}\n                      />\n                    </span>\n                  </div>\n                )}\n              </Form.Item>\n              <Form.Item label=\"Motto\" name=\"motto\">\n                <Input\n                  value={motto}\n                  onChange={(e) => setMotto(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item label=\"Bio\" name=\"bio\">\n                <Input.TextArea\n                  rows={8}\n                  value={bio}\n                  onChange={(e) => setBio(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item label=\"Country\" name=\"country\">\n                <Select\n                  value={country}\n                  style={{ width: \"100%\" }}\n                  onChange={(e) => setCountry(e)}\n                  showSearch\n                >\n                  {allCountries.map((co) => (\n                    <Option value={co.name}>{co.name}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </>\n          )}\n          {role.includes(\"TRAINER\") && (\n            // <Form.Item label=\"Goals\" name=\"goals\">\n            //   <Select\n            //     value={goals}\n            //     style={{ width: \"100%\" }}\n            //     onChange={(e) => setGoals(e)}\n            //     mode=\"multiple\"\n            //   >\n            //     {[\n            //       \"Behaviour\",\n            //       \"Bootcamp\",\n            //       \"Boxing\",\n            //       \"Bulking\",\n            //       \"Callisthenics\",\n            //       \"Condition\",\n            //       \"Cross Fit\",\n            //       \"Cutting\",\n            //       \"Diet\",\n            //       \"Endurance\",\n            //       \"Fatburn\",\n            //       \"Gain Muscle\",\n            //       \"Get Fit\",\n            //       \"Gymnastics\",\n            //       \"Health\",\n            //       \"HIIT\",\n            //       \"Hypertrophy\",\n            //       \"Injuries\",\n            //       \"Knowledge\",\n            //       \"Lose weight\",\n            //       \"Meditation\",\n            //       \"Metabolism\",\n            //       \"Mindset\",\n            //       \"Mobility\",\n            //       \"Nutrition\",\n            //       \"Overweight\",\n            //       \"Physiotherapy\",\n            //       \"Powerlifting\",\n            //       \"Pregnant\",\n            //       \"Prevention\",\n            //       \"Recover\",\n            //       \"Revalidation\",\n            //       \"Run\",\n            //       \"Seniors\",\n            //       \"Stay Fit\",\n            //       \"Strength\",\n            //       \"Stretch\",\n            //       \"Technique\",\n            //       \"Yoga\",\n            //     ].map((co) => (\n            //       <Option value={co}>{co}</Option>\n            //     ))}\n            //   </Select>\n            // </Form.Item>\n\n            <>\n              {/* <Form.Item label=\"Goals\" name=\"goals\">\n                <Select\n                  mode=\"multiple\"\n                  allowClear\n                  style={{ width: \"100%\" }}\n                  placeholder=\"Please select\"\n                  value={\n                    selectedTrainerGoal.length <= 0 ? [] : selectedTrainerGoal\n                  }\n                  onChange={(e) => setSelectedTrainerGoal(e)}\n                >\n                  {allChallengeGoals.map((g) => (\n                    <Option value={g._id}>{g.name}</Option>\n                  ))}\n                </Select>\n              </Form.Item> */}\n\n              <Form.Item label=\"Fitness Interests\" name=\"fitnessInterest\">\n                <Select\n                  mode=\"multiple\"\n                  allowClear\n                  style={{ width: \"100%\" }}\n                  placeholder=\"Please select\"\n                  value={\n                    selectedFitnessInterest.length <= 0\n                      ? []\n                      : selectedFitnessInterest\n                  }\n                  onChange={(e) => setSelectedFitnessInterest(e)}\n                >\n                  {allTrainerGoals.map((g) => (\n                    <Option value={g._id}>{g.name}</Option>\n                  ))}\n                </Select>\n                <Button\n                  style={{\n                    backgroundColor: \"var(--color-orange)\",\n                    border: \"none\",\n                    color: \"white\",\n                    float: \"right\",\n                    marginTop: \"5px\",\n                  }}\n                  onClick={() => setShowTrainerGoalModal(true)}\n                >\n                  Manage Fitness Interests\n                </Button>\n              </Form.Item>\n            </>\n          )}\n\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n              }}\n              onClick={createANewUser}\n            >\n              Create\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default NewUser;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\NewExercise.js",["982"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Form, Input, Button, Select } from \"antd\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { createExercise } from \"../../../services/createChallenge/main\";\nimport { getAllTrainers } from \"../../../services/trainers\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nconst { Option } = Select;\n\nfunction NewExercise({ setCurrentSelection, home }) {\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [trainer, setTrainer] = useState(\"\");\n  const [videoLink, setVideoLink] = useState(\"\");\n  const [voiceOverLink, setVoiceOverLink] = useState(\"\");\n  const [allTrainers, setAllTrainers] = useState([]);\n  const [filteredTrainers, setFilteredTrainers] = useState([]);\n  const userInfo = useContext(userInfoContext)[0];\n  const { language } = useContext(LanguageContext);\n\n  useEffect(() => {\n    if (userInfo.role === \"trainer\") {\n      setTrainer(userInfo.id);\n    }\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    const res = await getAllTrainers();\n    if (res) {\n      setAllTrainers(res.trainers);\n      setFilteredTrainers(res.trainers);\n    }\n  };\n  const onFinish = async (values) => {\n    console.log(values, trainer);\n    // return;\n    if (videoLink && trainer) {\n      console.log(values);\n      const data = {\n        videoURL: videoLink.link,\n        voiceOverLink: voiceOverLink.link,\n        trainer,\n        language,\n        ...values,\n      };\n      const res = await createExercise(data);\n      setCurrentSelection(home);\n      console.log(\"values\", res);\n    } else {\n      alert(\"Please add a video link and trainer of a exercise\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <h2 className=\"font-heading-black\">New Exercise</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <div>\n          <span>Select Language: </span>\n          <LanguageSelector notFromNav={true} />\n        </div>\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Exercise Title\"\n            name=\"title\"\n            rules={[\n              { required: true, message: \"Please input exercise title!\" },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Exercise Video\" required=\"true\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"videos\");\n                setMediaManagerActions([videoLink, setVideoLink]);\n              }}\n            >\n              Upload Video\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {videoLink && videoLink.name}\n            </div>\n          </Form.Item>\n          <Form.Item label=\"Exercise Description (Optional)\" name=\"description\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Trainer\" required=\"true\">\n            {/* {console.log(\"trainers\", trainers)} */}\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={trainer}\n              disabled={userInfo.role === \"trainer\" ? true : false}\n              onChange={(e) => setTrainer(e)}\n              filterOption={false}\n              onSearch={(e) => {\n                const t = allTrainers.filter((f) =>\n                  f.firstName\n                    .concat(f.lastName)\n                    ?.toLowerCase()\n                    .includes(e.toLowerCase())\n                );\n                setFilteredTrainers(t);\n              }}\n            >\n              {filteredTrainers.map((trainer) => (\n                <Option value={trainer._id}>\n                  {trainer.firstName} {trainer.lastName}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Voiceover Link (Optional)\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"voiceOvers\");\n                setMediaManagerActions([voiceOverLink, setVoiceOverLink]);\n              }}\n            >\n              Upload Voiceover\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {voiceOverLink && voiceOverLink.name}\n            </div>\n          </Form.Item>\n\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Create Exercise\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </>\n  );\n}\n\nexport default NewExercise;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\AllExercises.js",["983","984"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Button, Select, Table, Space, Input } from \"antd\";\nimport moment from \"moment\";\n\nimport {\n  getAllUserExercises,\n  removeExercise,\n} from \"../../../services/createChallenge/main\";\nimport UpdateExercise from \"./UpdateExercise\";\nimport { getAllTrainers } from \"../../../services/trainers\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { T } from \"../../Translate\";\nimport { withRouter } from \"react-router-dom\";\n// import UpdateExercises from \"./UpdateExercises\";\n\nfunction AllExercises(props) {\n  const [filterAllExercises, setFilterAllExercises] = useState([]);\n  const [allExercises, setAllExercises] = useState([]);\n  const [selectedExercisesForUpdate, setSelectedExercisesForUpdate] = useState(\n    {}\n  );\n  const [openModal, setOpenModal] = useState(false);\n  const [allTrainers, setAllTrainers] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n\n  useEffect(() => {\n    fetchExercises();\n    fetchTrainers();\n  }, []);\n\n  useEffect(() => {\n    if (filter === \"all\") {\n      setFilterAllExercises(allExercises);\n      return;\n    }\n    // console.log(allExercises)\n    const admins = allExercises.filter((e) => e.trainer._id === filter);\n    setFilterAllExercises(admins);\n  }, [allExercises, filter]);\n\n  const fetchTrainers = async () => {\n    const res = await getAllTrainers();\n    if (res) {\n      setAllTrainers(res.trainers);\n    }\n  };\n\n  const fetchExercises = async () => {\n    const c = await getAllUserExercises(\"\");\n    setAllExercises(c.exercises);\n    setFilterAllExercises(c.exercises);\n\n    const queryParams = new URLSearchParams(props.location.search);\n    const selectedExercise = queryParams.get(\"exerciseId\");\n\n    if (selectedExercise) {\n      const exerciseToUpdate = c.exercises.find(\n        (exercise) => exercise._id === selectedExercise\n      );\n      if (exerciseToUpdate) {\n        setSelectedExercisesForUpdate(exerciseToUpdate);\n        setOpenModal(true);\n      }\n    }\n  };\n\n  const openExercisesUpdater = (record) => {\n    setSelectedExercisesForUpdate(record);\n    setOpenModal(true);\n  };\n\n  const deleteExercises = async (c) => {\n    await removeExercise(c._id);\n    fetchExercises();\n  };\n  const columns = [\n    {\n      title: \"Exercise ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Exercise Name\",\n      dataIndex: \"title\",\n      key: \"title\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Trainer\",\n      dataIndex: \"trainer\",\n      key: \"trainer\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text.username}</span>\n      ),\n    },\n    {\n      title: \"Updated At\",\n      dataIndex: \"updatedAt\",\n      key: \"updatedAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Created By\",\n      dataIndex: \"user\",\n      key: \"user\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">{text && text.username}</span>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Button type=\"primary\" onClick={() => openExercisesUpdater(record)}>\n            <T>adminDashboard.edit</T>\n          </Button>\n          <Button type=\"danger\" onClick={() => deleteExercises(text)}>\n            <T>adminDashboard.delete</T>\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  // const duplicateExercises = (i, r) => {\n  //   setAllExercises([...allExercises, { ...i, id: i.id + 10 }]);\n  // };\n  return (\n    <div>\n      <UpdateExercise\n        show={openModal}\n        setShow={setOpenModal}\n        key={selectedExercisesForUpdate ? selectedExercisesForUpdate._id : \"\"}\n        exerciseValues={selectedExercisesForUpdate}\n        fetchExercises={fetchExercises}\n        allTrainers={allTrainers}\n      />\n      <h2 className=\"font-heading-black\">All Exercises</h2>\n      <div className=\"admin-allchallenges-list-container\">\n        {userInfo.role === \"admin\" && (\n          <div>\n            <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\n              Filter By Trainer:\n            </span>\n\n            <Select\n              defaultValue=\"\"\n              style={{ width: 120, marginLeft: \"10px\" }}\n              onChange={(e) => setFilter(e)}\n            >\n              <Select.Option key={1} value={\"all\"}>\n                All\n              </Select.Option>\n              {allTrainers &&\n                allTrainers.map((t, i) => (\n                  <Select.Option key={i} value={t._id}>\n                    {t.username}\n                  </Select.Option>\n                ))}\n            </Select>\n          </div>\n        )}\n\n        <Input\n          placeholder=\"Search Exercises By Title\"\n          onChange={(e) =>\n            setFilterAllExercises(\n              allExercises.filter((exercise) =>\n                exercise.title\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n\n        <Input\n          style={{ marginTop: \"10px\" }}\n          placeholder=\"Search Exercises By ID\"\n          onChange={(e) =>\n            setFilterAllExercises(\n              allExercises.filter((exercise) =>\n                exercise._id\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Table columns={columns} dataSource={filterAllExercises} />\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(AllExercises);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallenge.js",["985","986","987","988","989"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Tabs, Modal, Button } from \"antd\";\nimport NewChallengeMainTab from \"./NewChallengeMainTab\";\nimport NewChallengeWorkoutTab from \"./NewChallengeWorkoutTab\";\nimport NewChallengeMusicTab from \"./NewChallengeMusicTab\";\nimport NewChallengeAdditionalTab from \"./NewChallengeAdditionalTab\";\n\nimport { v4 } from \"uuid\";\n\n// services\nimport { getAllChallengeGoals } from \"../../../services/createChallenge/goals\";\nimport { getAllChallengeTags } from \"../../../services/createChallenge/tags\";\nimport { getAllChallengeEquipments } from \"../../../services/createChallenge/equipments\";\nimport { getAllBodyFocus } from \"../../../services/createChallenge/bodyFocus\";\nimport { getAllTrainers } from \"../../../services/trainers\";\nimport { getAllChallengeProducts } from \"../../../services/createChallenge/products\";\nimport {\n  createChallenge,\n  getAllUserChallenges,\n  updateChallenge,\n} from \"../../../services/createChallenge/main\";\nimport setAuthToken from \"../../../helpers/setAuthToken\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { createPost } from \"../../../services/posts\";\nimport slug from \"elegant-slug\";\nimport { addChallengeToCustomerDetail } from \"../../../services/customer\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nimport { T } from \"../../Translate\";\n\nconst { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nfunction NewChallenge() {\n  // state of main tab strats\n  const [name, setName] = useState(\"\");\n  const [access, setAccess] = useState([]);\n  const [price, setPrice] = useState(\"\");\n  const [points, setPoints] = useState(0);\n  const [currency, setCurrency] = useState(\"$\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n  const [videoThumbnail, setVideoThumbnail] = useState(\"\");\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\n  const [trainers, setTrainers] = useState([]);\n  const [allTrainers, setAllTrainers] = useState([]);\n  const [description, setDescription] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [goals, setGoals] = useState([]);\n  const [bodyFocus, setBodyFocus] = useState([]);\n  const [equipments, setEquipments] = useState([]);\n  const [duration, setDuration] = useState(\"\");\n  // we get all goals from backend\n  const [allGoals, setAllGoals] = useState([]);\n  const [newGoalName, setNewGoalName] = useState(\"\");\n  const [showGoalModal, setShowGoalModal] = useState(false);\n  // we get all bodyfocus from backend\n  const [allBodyfocus, setAllBodyfocus] = useState([]);\n\n  const [newBodyfocusName, setNewBodyfocusName] = useState(\"\");\n  const [showBodyfocusModal, setShowBodyfocusModal] = useState(false);\n  //fitness interest\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState([]);\n  // we get all equipments from backend\n  const [allEquipments, setAllEquipments] = useState([]);\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\n  const [equipmentModal, setEquipmentModal] = useState(false);\n  const [newDurationName, setNewDurationName] = useState(\"\");\n  const [showDurationModal, setShowDurationModal] = useState(false);\n  // we get all tags from backend\n  const [tags, setTags] = useState([]);\n  const [allTags, setAllTags] = useState([]);\n  const [newTagName, setNewTagName] = useState(\"\");\n  const [showTagModal, setShowTagModal] = useState(false);\n  // state of main tab ends\n\n  // state pf the new challenge tab starts\n  const [weeks, setWeeks] = useState([]);\n  const [addWorkoutModalVisible, setAddWorkoutModalVisible] = useState(false);\n  const [workoutModalFullscreen, setWorkoutModalFullscreen] = useState(false);\n  const [allProducts, setAllProducts] = useState([\n    { id: 1, name: \"Carpet\" },\n    { id: 2, name: \"Mat\" },\n    { id: 3, name: \"Dumbell\" },\n  ]);\n  const [products, setProducts] = useState([]);\n  //   this is for new workout creation process\n  const [workoutToUpdate, setWorkoutToUpdate] = useState(\"\");\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentWeek, setCurrentWeek] = useState(\"\");\n  const [workoutTitle, setWorkoutTile] = useState(\"\");\n  const [workoutSubtitle, setWorkoutSubtile] = useState(\"\");\n  const [workoutIntroVideoLength, setWorkoutIntroVideoLength] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [infoTitle, setInfoTile] = useState(\"\");\n  const [infoFile, setInfoFile] = useState(\"\");\n  // const [points, setPoints] = useState(0);\n  const [workoutIntroVideoFile, setWorkoutIntroVideoFile] = useState(\"\");\n  const [relatedEquipments, setRelatedEquipments] = useState([]);\n  const [renderWorkout, setRenderWorkout] = useState(false);\n  // this is a rendered workout exercise it wonly takes in full video of the exercise\n  const [renderedWorkoutExercises, setRenderWorkoutExercises] = useState([\n    {\n      exerciseId: v4(),\n      exerciseName: \"\",\n      exerciseVideo: \"\",\n    },\n  ]);\n  // this is a non-rendered workout exercise it will take multiple videos and voiceeover\n  const [nonRenderedWorkoutExercises, setNonRenderedWorkoutExercises] =\n    useState([\n      {\n        exerciseId: v4(),\n        exerciseName: \"\",\n        exerciseVideo: \"\",\n        videoLength: \"\",\n        voiceOverFile: \"\",\n        breakAfterExercise: \"\",\n        exerciseGroupName: \"\",\n      },\n    ]);\n  const [musics, setMusics] = useState([]);\n  // state of the new cha;llenge ends\n\n  // state for additional inform\n  const [results, setResults] = useState(\"\");\n  // const [info, setInfo] = useState(\"\");\n  const [makePublic, setMakePublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n  const [additionalProducts, setAdditionalProducts] = useState([]);\n  const [informationList, setInformationList] = useState([]);\n  const [relatedProducts, setRelatedProducts] = useState([]);\n  // --------------------\n  const [userCreatePost, setUserCreatePost] = useState(false);\n\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const { language } = useContext(LanguageContext);\n  const [allChallenges, setAllChallenges] = useState([]);\n  const [selectedChallenge, setSelectedChallenge] = useState(\"\");\n\n  async function fethData() {\n    const bodyFocus = await getAllBodyFocus(language);\n    const goals = await getAllChallengeGoals(language);\n    const tags = await getAllChallengeTags(language);\n    const equipments = await getAllChallengeEquipments(language);\n    const trainers = await getAllTrainers(language);\n    const products = await getAllChallengeProducts(language);\n    const challenges = await getAllUserChallenges(\n      language === \"dutch\" ? \"english\" : \"dutch\"\n    );\n\n    setAllBodyfocus(bodyFocus.body);\n    setAllEquipments(equipments.equipments);\n    setAllGoals(goals.challengeGoals);\n    setAllTags(tags.tags);\n    // console.log(\"trainers\", trainers);\n    setAllTrainers(trainers.trainers);\n    setAllProducts(products.products);\n    setAllChallenges(challenges.challenges);\n  }\n\n  useEffect(() => {\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\n    fethData();\n  }, [language]);\n\n  const createChallengeButton = async () => {\n    console.log(\"isRendered\", renderWorkout);\n    console.log(\"weeks\", weeks);\n\n    const obj = {\n      language: language,\n      challengeName: name,\n      description: description,\n      price: price,\n      points: points,\n      currency: currency,\n      thumbnailLink: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\n      videoThumbnailLink:\n        typeof videoThumbnail === \"object\" ? videoThumbnail.link : \"\",\n      trainers: trainers,\n      trainersFitnessInterest: selectedFitnessInterest,\n      challengeGoals: goals,\n      tags: tags,\n      difficulty: difficulty,\n      body: bodyFocus,\n      access: access,\n      duration: duration,\n      videoLink: typeof videoTrailer === \"object\" ? videoTrailer.link : \"\",\n      weeks: weeks.map((week) => {\n        var w = { ...week };\n        w[\"weekName\"] = week.weekTitle;\n        w[\"weekSubtitle\"] = week.weekSubtitle;\n        w[\"workout\"] = w.workouts.map((workout) => {\n          return {\n            title: workout.workoutTitle,\n            subtitle: workout.workoutSubtitle,\n            infotitle: workout.infoTitle,\n            infoFile:\n              typeof workout.infoFile === \"object\" ? workout.infoFile.link : \"\",\n            equipment: workout.relatedEquipments,\n            relatedProducts: workout.relatedProducts,\n            introVideoLink: workout.workoutIntroVideoFile\n              ? workout.workoutIntroVideoFile.link\n              : \"\",\n            introVideoLength: workout.workoutIntroVideoLength\n              ? workout.workoutIntroVideoLength\n              : \"\",\n            isRendered: workout.renderWorkout,\n            exercises: workout.renderWorkout\n              ? workout.exercises.map((e) => ({\n                  exerciseId: e._id,\n                  exerciseLength: e.videoLength,\n                  break: e.breakAfterExercise,\n                  groupName: e.exerciseGroupName,\n                }))\n              : workout.exercises.map((e) => ({\n                  renderedWorkoutExerciseName: e.exerciseName,\n                  renderedWorkoutExerciseVideo: e.exerciseVideo,\n                })),\n          };\n        });\n        delete w.id;\n        delete w.weekId;\n        delete w.weekTitle;\n        delete w.workouts;\n        return w;\n      }),\n      music: musics.map((m) => ({\n        name: m.name,\n        url: typeof m.file === \"object\" ? m.file.link : m.file,\n      })),\n      additionalProducts: additionalProducts,\n      results: results,\n      informationList: informationList\n        ? informationList.map((i) => ({\n            info: i.text,\n            icon: i.file ? i.file.link : \"\",\n          }))\n        : [],\n      allowComments,\n      allowReviews,\n      isPublic: makePublic,\n    };\n    console.log(\"create object\", obj);\n    if (selectedChallenge) {\n      obj.alternativeLanguage = selectedChallenge;\n    }\n    // return;\n    // return;\n    const res = await createChallenge(obj);\n    console.log(\"opp===========>\", res);\n\n    // console.log(error.response.data);\n    // console.log(error.response.status);\n    // console.log(error.response.headers);\n    if (res && res.weeks) {\n      await addChallengeToCustomerDetail(userInfo.id, res.weeks._id);\n      userCreatePost && createAPost(res.weeks._id);\n      selectedChallenge && updateSelectedChallenge(res.weeks._id);\n    }\n    console.log(\"create response\", res);\n    console.log(\"userCreatePost\", userCreatePost);\n  };\n\n  const createAPost = async (id) => {\n    const values = {\n      title: name,\n      text: description,\n      image: typeof thumbnail === \"object\" ? thumbnail.link : \"\",\n      type: \"Challenge\",\n      url: `/challenge/${slug(name)}/${id}`,\n      language: language,\n    };\n    await createPost(values);\n    // setCreatePostModalVisible(false);\n    // console.log(values);\n  };\n\n  const updateSelectedChallenge = async (id) => {\n    await updateChallenge({ alternativeLanguage: id }, selectedChallenge);\n  };\n\n  return (\n    <div>\n      {/* ask user to if they want to post challenge */}\n      {/* <Modal\n        onCancel={() => setCreatePostModalVisible(false)}\n        visible={createPostModalVisible}\n        footer={false}\n        style={{ textAlign: \"center\" }}\n      >\n        <h1 className=\"font-heading-white\">\n          Create a post about your challenge?\n        </h1>\n        <Button\n          className=\"common-orange-button font-paragraph-white\"\n          onClick={() => createAPost()}\n          style={{ padding: \"5px 10px\" }}\n        >\n          Create a Post\n        </Button>\n      </Modal> */}\n      <h2 className=\"font-heading-black\">\n        <T>adminDashboard.challenges.new</T>\n      </h2>\n      <div className=\"newchallenge-creator-container\">\n        <Tabs defaultActiveKey=\"1\" onChange={callback}>\n          <TabPane tab=\"Main\" key=\"1\">\n            <NewChallengeMainTab\n              allChallenges={allChallenges}\n              selectedChallenge={selectedChallenge}\n              setSelectedChallenge={setSelectedChallenge}\n              name={name}\n              setName={setName}\n              access={access}\n              setAccess={setAccess}\n              price={price}\n              points={points}\n              setPrice={setPrice}\n              selectedFitnessInterest={selectedFitnessInterest}\n              setSelectedFitnessInterest={setSelectedFitnessInterest}\n              setPoints={setPoints}\n              currency={currency}\n              setCurrency={setCurrency}\n              thumbnail={thumbnail}\n              setThumbnail={setThumbnail}\n              videoThumbnail={videoThumbnail}\n              setVideoThumbnail={setVideoThumbnail}\n              videoTrailer={videoTrailer}\n              setVideoTrailer={setVideoTrailer}\n              trainers={trainers}\n              setTrainers={setTrainers}\n              allTrainers={allTrainers}\n              setAllTrainers={setAllTrainers}\n              description={description}\n              setDescription={setDescription}\n              difficulty={difficulty}\n              setDifficulty={setDifficulty}\n              goals={goals}\n              setGoals={setGoals}\n              bodyFocus={bodyFocus}\n              setBodyFocus={setBodyFocus}\n              equipments={equipments}\n              setEquipments={setEquipments}\n              duration={duration}\n              setDuration={setDuration}\n              allGoals={allGoals}\n              setAllGoals={setAllGoals}\n              newGoalName={newGoalName}\n              setNewGoalName={setNewGoalName}\n              showGoalModal={showGoalModal}\n              setShowGoalModal={setShowGoalModal}\n              allBodyfocus={allBodyfocus}\n              setAllBodyfocus={setAllBodyfocus}\n              newBodyfocusName={newBodyfocusName}\n              setNewBodyfocusName={setNewBodyfocusName}\n              showBodyfocusModal={showBodyfocusModal}\n              setShowBodyfocusModal={setShowBodyfocusModal}\n              allEquipments={allEquipments}\n              setAllEquipments={setAllEquipments}\n              newEquipmentName={newEquipmentName}\n              setNewEquipmentName={setNewEquipmentName}\n              equipmentModal={equipmentModal}\n              setEquipmentModal={setEquipmentModal}\n              newDurationName={newDurationName}\n              setNewDurationName={setNewDurationName}\n              showDurationModal={showDurationModal}\n              setShowDurationModal={setShowDurationModal}\n              tags={tags}\n              setTags={setTags}\n              allTags={allTags}\n              setAllTags={setAllTags}\n              newTagName={newTagName}\n              setNewTagName={setNewTagName}\n              showTagModal={showTagModal}\n              setShowTagModal={setShowTagModal}\n            />\n          </TabPane>\n          <TabPane tab=\"Workouts\" key=\"2\">\n            <NewChallengeWorkoutTab\n              weeks={weeks}\n              setWeeks={setWeeks}\n              addWorkoutModalVisible={addWorkoutModalVisible}\n              setAddWorkoutModalVisible={setAddWorkoutModalVisible}\n              workoutModalFullscreen={workoutModalFullscreen}\n              setWorkoutModalFullscreen={setWorkoutModalFullscreen}\n              allProducts={allProducts}\n              setAllProducts={setAllProducts}\n              setProducts={setProducts}\n              allEquipments={allEquipments}\n              setAllEquipments={setAllEquipments}\n              workoutToUpdate={workoutToUpdate}\n              setWorkoutToUpdate={setWorkoutToUpdate}\n              currentStep={currentStep}\n              setCurrentStep={setCurrentStep}\n              currentWeek={currentWeek}\n              setCurrentWeek={setCurrentWeek}\n              workoutTitle={workoutTitle}\n              setWorkoutTile={setWorkoutTile}\n              workoutSubtitle={workoutSubtitle}\n              workoutIntroVideoLength={workoutIntroVideoLength}\n              setWorkoutIntroVideoLength={setWorkoutIntroVideoLength}\n              setWorkoutSubtile={setWorkoutSubtile}\n              groupName={groupName}\n              setGroupName={setGroupName}\n              infoTitle={infoTitle}\n              setInfoTile={setInfoTile}\n              infoFile={infoFile}\n              setInfoFile={setInfoFile}\n              workoutIntroVideoFile={workoutIntroVideoFile}\n              setWorkoutIntroVideoFile={setWorkoutIntroVideoFile}\n              relatedProducts={relatedProducts}\n              setRelatedProducts={setRelatedProducts}\n              relatedEquipments={relatedEquipments}\n              setRelatedEquipments={setRelatedEquipments}\n              renderWorkout={renderWorkout}\n              setRenderWorkout={setRenderWorkout}\n              renderedWorkoutExercises={renderedWorkoutExercises}\n              setRenderWorkoutExercises={setRenderWorkoutExercises}\n              nonRenderedWorkoutExercises={nonRenderedWorkoutExercises}\n              setNonRenderedWorkoutExercises={setNonRenderedWorkoutExercises}\n              trainers={trainers}\n            />\n          </TabPane>\n          <TabPane tab=\"Music\" key=\"3\">\n            <NewChallengeMusicTab musics={musics} setMusics={setMusics} />\n          </TabPane>\n          <TabPane tab=\"Additional\" key=\"4\">\n            <NewChallengeAdditionalTab\n              results={results}\n              setResults={setResults}\n              allProducts={allProducts}\n              setAllProducts={setAllProducts}\n              makePublic={makePublic}\n              setMakePublic={setMakePublic}\n              allowComments={allowComments}\n              setAllowComments={setAllowComments}\n              allowReviews={allowReviews}\n              setAllowReviews={setAllowReviews}\n              additionalProducts={additionalProducts}\n              setAdditionalProducts={setAdditionalProducts}\n              informationList={informationList}\n              setInformationList={setInformationList}\n              createChallenge={createChallengeButton}\n              userCreatePost={userCreatePost}\n              setUserCreatePost={setUserCreatePost}\n            />\n          </TabPane>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nexport default NewChallenge;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\AllChallenges.js",["990","991"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Button, Tag, Table, Space, Input } from \"antd\";\nimport moment from \"moment\";\nimport {\n  getAllUserChallenges,\n  removeChallenge,\n} from \"../../../services/createChallenge/main\";\nimport { Select } from \"antd\";\nimport UpdateChallenge from \"./UpdateChallenge\";\nimport { getAllTrainers } from \"../../../services/trainers\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport slug from \"elegant-slug\";\nimport { Link } from \"react-router-dom\";\nimport { T } from \"../../Translate\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nfunction AllChallenges({ setCurrentSelection, setSelectedChallengeForUpdate }) {\n  const [filterAllChallenges, setFilterAllChallenge] = useState([]);\n  const [allChallenges, setAllChallenges] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [allTrainers, setAllTrainers] = useState([]);\n  const userInfo = useContext(userInfoContext);\n  const { language } = useContext(LanguageContext);\n\n  useEffect(() => {\n    if (filter === \"all\") {\n      setFilterAllChallenge(allChallenges);\n      return;\n    }\n    const admins = allChallenges.filter((c) =>\n      c.trainers.some((t) => t.username === filter)\n    );\n    setFilterAllChallenge(admins);\n  }, [allChallenges, filter]);\n\n  useEffect(() => {\n    fetchChallenges();\n  }, [language]);\n\n  const fetchChallenges = async () => {\n    const c = await getAllUserChallenges(language);\n    const t = await getAllTrainers();\n    console.log(\"trainers\", t);\n    console.log(c);\n    setAllChallenges(c.challenges);\n    setAllTrainers(t.trainers);\n    setFilterAllChallenge(c.challenges);\n  };\n\n  const openChallengeUpdater = (record) => {\n    setSelectedChallengeForUpdate(record);\n    setCurrentSelection(5.3);\n    // setShow(true);\n  };\n\n  const deleteChallenge = async (c) => {\n    await removeChallenge(c._id);\n    fetchChallenges();\n  };\n  const columns = [\n    {\n      title: \"Challenge ID\",\n      dataIndex: \"_id\",\n      key: \"_id\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Challenge Name\",\n      dataIndex: \"challengeName\",\n      key: \"challengeName\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Language\",\n      dataIndex: \"language\",\n      key: \"language\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Updated At\",\n      dataIndex: \"createdAt\",\n      key: \"createdAt\",\n      render: (text) => (\n        <span className=\"font-paragraph-black\">\n          {moment(text).format(\"DD/MM/YYYY\")}\n        </span>\n      ),\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Points\",\n      dataIndex: \"points\",\n      key: \"points\",\n      render: (text) => <span className=\"font-paragraph-black\">{text}</span>,\n    },\n    {\n      title: \"Trainers\",\n      key: \"trainers\",\n      dataIndex: \"trainers\",\n      render: (tags) => (\n        <>\n          {tags.map((tag) => {\n            return (\n              <Tag color={\"volcano\"} key={tag._id}>\n                {tag.firstName}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n    {\n      title: \"Access\",\n      key: \"access\",\n      dataIndex: \"access\",\n      render: (tags) => (\n        <>\n          {tags.map((tag) => {\n            let color = tag.length > 5 ? \"orange\" : \"orange\";\n            if (tag === \"loser\") {\n              color = \"volcano\";\n            }\n            return (\n              <Tag color={color} key={tag}>\n                {tag.toUpperCase()}\n              </Tag>\n            );\n          })}\n        </>\n      ),\n    },\n    {\n      title: \"Action\",\n      key: \"challengePreviewLink\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          {/* <Button\n            type=\"primary\"\n            onClick={() => duplicateChallenge(text, record)}\n          >\n            {t(\"adminDashboard.duplicate\")}\n          </Button>\n          <Button type=\"primary\">{t(\"adminDashboard.preview\")}</Button>*/}\n          <Link\n            to={`/challenge/${slug(text.challengeName)}/${text._id}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {\" \"}\n            <Button type=\"primary\">\n              {\" \"}\n              <T>adminDashboard.preview</T>\n            </Button>\n          </Link>\n          <Button type=\"primary\" onClick={() => openChallengeUpdater(record)}>\n            <T>adminDashboard.edit</T>\n          </Button>\n          <Button type=\"danger\" onClick={() => deleteChallenge(text)}>\n            <T>adminDashboard.delete</T>\n          </Button>\n        </Space>\n      ),\n    },\n  ];\n\n  // const duplicateChallenge = (i, r) => {\n  //   setAllChallenges([...allChallenges, { ...i, id: i.id + 10 }]);\n  // };\n  return (\n    <div>\n      <h2 className=\"font-heading-black\">\n        <T>adminDashboard.challenges.all</T>\n      </h2>\n      <div className=\"admin-allchallenges-list-container\">\n        {userInfo.role === \"admin\" && (\n          <div>\n            <span className=\"font-heading-black\" style={{ marginLeft: \"10px\" }}>\n              Filter By Trainer:\n            </span>\n            <Select\n              defaultValue=\"\"\n              style={{ width: 120, marginLeft: \"10px\" }}\n              onChange={(e) => setFilter(e)}\n            >\n              <Select.Option key={1} value={\"all\"}>\n                All\n              </Select.Option>\n              {allTrainers &&\n                allTrainers.map((t, i) => (\n                  <Select.Option key={i} value={t.username}>\n                    {t.username}\n                  </Select.Option>\n                ))}\n            </Select>\n          </div>\n        )}\n        <Input\n          placeholder=\"Search Challenge\"\n          onChange={(e) =>\n            setFilterAllChallenge(\n              allChallenges.filter((challenge) =>\n                challenge.challengeName\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Input\n          style={{ marginTop: \"10px\" }}\n          placeholder=\"Search Challenge By ID\"\n          onChange={(e) =>\n            setFilterAllChallenge(\n              allChallenges.filter((challenge) =>\n                challenge._id\n                  .toUpperCase()\n                  .includes(e.target.value.toUpperCase())\n              )\n            )\n          }\n        />\n        <Table columns={columns} dataSource={filterAllChallenges} />\n      </div>\n    </div>\n  );\n}\n\nexport default AllChallenges;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\MediaManager.js",["992","993"],"import { ChonkyActions, FileHelper, FullFileBrowser } from \"chonky\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { showActionNotification } from \"./mediaManagerUtils\";\nimport MediaFileUploader from \"./MediaFileUploader\";\nimport { useMediaManager } from \"../../../contexts/MediaManagerContext\";\nimport setAuthToken from \"../../../helpers/setAuthToken\";\nimport { Button, Input, notification, Select, Modal, message } from \"antd\";\n\nconst { confirm } = Modal;\n\nconst openNotificationWithIcon = (type, message, description) => {\n  notification[type]({\n    message: message,\n    description: description,\n  });\n};\n\n// Hook that sets up our file map using the MediaManagerContext\nconst useCustomFileMap = () => {\n  const {\n    folders,\n    filesByFolder,\n    loadingFolders,\n    loadingFiles,\n    fetchFolders,\n    fetchFiles,\n    moveMediaFile,\n  } = useMediaManager();\n\n  const [currentFolderId, setCurrentFolderId] = useState(\"root\");\n  const [currentFolderName, setCurrentFolderName] = useState(\"Media Manager\");\n  const [lastViewedPath, setLastViewedPath] = useState(\"root\");\n  const currentFolderIdRef = useRef(currentFolderId);\n\n  useEffect(() => {\n    setAuthToken(localStorage.getItem(\"jwtToken\"));\n    // Only fetch folders on initial load\n    fetchFolders();\n    currentFolderIdRef.current = currentFolderId;\n\n    // Remember last viewed path\n    const savedPath = localStorage.getItem(\"mediaManager_lastPath\");\n    if (savedPath && savedPath !== \"root\") {\n      setCurrentFolderId(savedPath);\n      setLastViewedPath(savedPath);\n    }\n  }, []);\n\n  // Fetch files when entering a folder (only if not already cached)\n  useEffect(() => {\n    if (currentFolderId !== \"root\" && !filesByFolder[currentFolderId]) {\n      fetchFiles(currentFolderId);\n    }\n\n    // Save current path\n    localStorage.setItem(\"mediaManager_lastPath\", currentFolderId);\n    setLastViewedPath(currentFolderId);\n  }, [currentFolderId, filesByFolder, fetchFiles]);\n\n  // Build folder hierarchy with proper nesting\n  const buildFolderHierarchy = useCallback((folders) => {\n    const folderMap = new Map();\n    const rootFolders = [];\n\n    // Create folder map with hierarchy info\n    folders.forEach((folder) => {\n      folderMap.set(folder._id, {\n        ...folder,\n        children: [],\n        depth: folder.depth || 0,\n      });\n    });\n\n    // Build parent-child relationships\n    folders.forEach((folder) => {\n      const folderData = folderMap.get(folder._id);\n      if (folder.parentId && folderMap.has(folder.parentId)) {\n        const parent = folderMap.get(folder.parentId);\n        parent.children.push(folderData);\n      } else {\n        rootFolders.push(folderData);\n      }\n    });\n\n    return { folderMap, rootFolders };\n  }, []);\n\n  // Convert context data to Chonky file map format with hierarchy\n  const fileMap = useMemo(() => {\n    const { folderMap, rootFolders } = buildFolderHierarchy(folders);\n\n    const newFileMap = {\n      root: {\n        id: \"root\",\n        name: \"Media Manager\",\n        isDir: true,\n        childrenIds: rootFolders.map((folder) => folder._id),\n        depth: -1,\n        canDropFiles: false, // Root can't accept file drops\n        droppable: false,\n        draggable: false,\n      },\n    };\n\n    // Add all folders to file map with proper parent-child relationships\n    folderMap.forEach((folder, folderId) => {\n      const childFiles = filesByFolder[folderId] || [];\n\n      // Get immediate child folders (direct children only)\n      const immediateChildFolders = folders.filter(\n        (f) => f.parentId === folderId\n      );\n\n      newFileMap[folderId] = {\n        id: folderId,\n        name: folder.name,\n        isDir: true,\n        parentId: folder.parentId || \"root\",\n        childrenIds: [\n          ...immediateChildFolders.map((f) => f._id),\n          ...childFiles.map((f) => f._id),\n        ],\n        mediaType: folder.mediaType,\n        createdAt: folder.createdAt,\n        depth: folder.depth || 0,\n        canCreateSubfolder: (folder.depth || 0) < 2, // Can create subfolder if depth < 2\n        canDropFiles: true, // Folders can accept file drops\n        droppable: true, // Important: Make folder a drop target\n        draggable: false, // Folders shouldn't be draggable\n      };\n    });\n\n    // Add files to file map for all cached folders\n    Object.entries(filesByFolder).forEach(([folderId, files]) => {\n      files.forEach((file) => {\n        newFileMap[file._id] = {\n          id: file._id,\n          name: file.originalName || file.filename,\n          isDir: false,\n          parentId: folderId,\n          link: file.filelink,\n          mediaType: file.mediaType,\n          thumbnailUrl: file.mediaType === \"picture\" ? file.filelink : null,\n          createdAt: file.createdAt,\n          filename: file.filename,\n          size: file.size,\n          draggable: true, // Important: Enable dragging\n          droppable: false, // Files cannot be drop targets\n        };\n      });\n    });\n\n    return newFileMap;\n  }, [folders, filesByFolder, buildFolderHierarchy]);\n\n  // Get current folder depth\n  const getCurrentDepth = useCallback(() => {\n    const currentFolder = fileMap[currentFolderId];\n    return currentFolder?.depth ?? -1;\n  }, [fileMap, currentFolderId]);\n\n  // Check if name is unique in current folder\n  const isNameUnique = useCallback(\n    (name, parentId, excludeId = null) => {\n      const parent = fileMap[parentId];\n      if (!parent) return true;\n\n      return !parent.childrenIds.some((childId) => {\n        const child = fileMap[childId];\n        return child && child.name === name && child.id !== excludeId;\n      });\n    },\n    [fileMap]\n  );\n\n  // Refresh data when needed (force refetch)\n  const refreshData = useCallback(async () => {\n    await fetchFolders(true);\n    if (currentFolderId !== \"root\") {\n      await fetchFiles(currentFolderId, true);\n    }\n  }, [fetchFolders, fetchFiles, currentFolderId]);\n\n  return {\n    fileMap,\n    currentFolderId,\n    setCurrentFolderId,\n    setCurrentFolderName,\n    currentFolderName,\n    refreshData,\n    loading: loadingFolders || loadingFiles[currentFolderId],\n    getCurrentDepth,\n    isNameUnique,\n    lastViewedPath,\n    moveMediaFile,\n  };\n};\n\nexport const useFiles = (fileMap, currentFolderId) => {\n  return useMemo(() => {\n    const currentFolder = fileMap[currentFolderId];\n    if (!currentFolder) return [];\n\n    const childrenIds = currentFolder.childrenIds || [];\n    const files = childrenIds.map((fileId) => fileMap[fileId]).filter(Boolean);\n\n    // Sort: folders first, then files, both alphabetically\n    return files.sort((a, b) => {\n      if (a.isDir !== b.isDir) {\n        return a.isDir ? -1 : 1;\n      }\n      return a.name.localeCompare(b.name, undefined, { numeric: true });\n    });\n  }, [currentFolderId, fileMap]);\n};\n\nexport const useFolderChain = (fileMap, currentFolderId) => {\n  return useMemo(() => {\n    const currentFolder = fileMap[currentFolderId];\n    if (!currentFolder) return [];\n\n    const folderChain = [currentFolder];\n\n    let parentId = currentFolder.parentId;\n    while (parentId) {\n      const parentFile = fileMap[parentId];\n      if (parentFile) {\n        folderChain.unshift(parentFile);\n        parentId = parentFile.parentId;\n      } else {\n        break;\n      }\n    }\n\n    return folderChain;\n  }, [currentFolderId, fileMap]);\n};\n\n// Enhanced File Action Handler with drag and drop support\nexport const useFileActionHandler = (\n  setCurrentFolderName,\n  setCurrentFolderId,\n  setOpenUploadModal,\n  setOpenCreateFolderModal,\n  setOpenRenameModal,\n  setRenameTarget,\n  mediaActions,\n  mediaType,\n  setRemoteMediaManagerVisible,\n  checkForType,\n  refreshData,\n  isNameUnique,\n  getCurrentDepth,\n  moveMediaFile\n) => {\n  const { deleteMediaFile, deleteMediaFolder, updateMediaFile } =\n    useMediaManager();\n\n  const confirmDelete = useCallback((items, onConfirm) => {\n    const hasFiles = items.some((item) => !item.isDir);\n    const hasFolders = items.some((item) => item.isDir);\n\n    let title = \"Confirm Delete\";\n    let content = \"\";\n\n    if (hasFolders && hasFiles) {\n      content = `Are you sure you want to delete ${items.length} items? This action cannot be undone.`;\n    } else if (hasFolders) {\n      const folderWord = items.length === 1 ? \"folder\" : \"folders\";\n      content = `Are you sure you want to delete ${items.length} ${folderWord}? All contents will be permanently deleted.`;\n    } else {\n      const fileWord = items.length === 1 ? \"file\" : \"files\";\n      content = `Are you sure you want to delete ${items.length} ${fileWord}? This action cannot be undone.`;\n    }\n\n    confirm({\n      title,\n      content,\n      okText: \"Delete\",\n      okType: \"danger\",\n      cancelText: \"Cancel\",\n      onOk: onConfirm,\n      bodyStyle: {\n        backgroundColor: \"#fff\",\n      },\n    });\n  }, []);\n\n  // Handle file preview in new tab\n  const handlePreviewFile = useCallback((file) => {\n    if (!file || !file.link) {\n      message.error(\"File link not available\");\n      return;\n    }\n\n    // Open file in new tab\n    window.open(file.link, \"_blank\", \"noopener,noreferrer\");\n\n    // Show notification\n    openNotificationWithIcon(\n      \"info\",\n      \"Opening Preview\",\n      `Opening ${file.name} in new tab`\n    );\n  }, []);\n\n  // Handle file/folder drop - FIXED VERSION\n  const handleDrop = useCallback(\n    async (data) => {\n      console.log(\"Drop data received:\", data);\n      console.log(\"Drop payload:\", data.payload);\n\n      // The correct payload structure for Chonky drag and drop\n      const { files, source, destination } = data.payload;\n\n      // Alternative payload structure (try both)\n      const draggedFiles = files || data.payload.draggedFiles;\n      const targetFolder = destination || data.payload.targetFolder;\n\n      console.log(\"Parsed - draggedFiles:\", draggedFiles);\n      console.log(\"Parsed - targetFolder:\", targetFolder);\n      console.log(\"Parsed - source:\", source);\n      console.log(\"Parsed - destination:\", destination);\n\n      if (!targetFolder || !targetFolder.isDir) {\n        console.log(\"Invalid target folder:\", targetFolder);\n        message.error(\"Cannot drop files here - invalid target\");\n        return;\n      }\n\n      if (!targetFolder.canDropFiles) {\n        console.log(\"Target folder cannot accept drops:\", targetFolder);\n        message.error(\"This folder cannot accept file drops\");\n        return;\n      }\n\n      if (!draggedFiles || draggedFiles.length === 0) {\n        console.log(\"No files to drop\");\n        message.error(\"No files selected for drop\");\n        return;\n      }\n\n      // Filter only files (not folders) for moving\n      const filesToMove = draggedFiles.filter((file) => !file.isDir);\n\n      if (filesToMove.length === 0) {\n        message.info(\"Only files can be moved between folders\");\n        return;\n      }\n\n      // Check if any files are being dropped into the same folder\n      const validMoves = filesToMove.filter(\n        (file) => file.parentId !== targetFolder.id\n      );\n\n      if (validMoves.length === 0) {\n        message.info(\"Files are already in this folder\");\n        return;\n      }\n\n      try {\n        // Move each file\n        for (const file of validMoves) {\n          console.log(\n            `Moving file ${file.name} from ${file.parentId} to ${targetFolder.id}`\n          );\n          await moveMediaFile(file.id, file.parentId, targetFolder.id);\n        }\n\n        message.success(\n          `Moved ${validMoves.length} file(s) to ${targetFolder.name}`\n        );\n        openNotificationWithIcon(\n          \"success\",\n          \"Files Moved\",\n          `${validMoves.length} file(s) moved to ${targetFolder.name}`\n        );\n      } catch (error) {\n        console.error(\"Error moving files:\", error);\n        message.error(error.message || \"Failed to move files\");\n      }\n    },\n    [moveMediaFile]\n  );\n\n  return useCallback(\n    async (data) => {\n      if (data.id === ChonkyActions.OpenFiles.id) {\n        const { targetFile, files } = data.payload;\n        const fileToOpen = targetFile ?? files[0];\n\n        if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n          setCurrentFolderId(fileToOpen.id);\n          setCurrentFolderName(fileToOpen.name);\n          return;\n        }\n\n        // Handle file selection for media\n        if (!mediaActions || !mediaActions.length) return;\n\n        const [media, setMedia] = mediaActions;\n\n        if (checkForType(targetFile.name, mediaType)) {\n          if (mediaActions[2]) {\n            if (mediaActions[2] === \"multiple\") {\n              setMedia([\n                ...media,\n                { name: targetFile.name, link: targetFile.link },\n              ]);\n              showActionNotification(data);\n              setRemoteMediaManagerVisible(false);\n              return;\n            }\n            setMedia(mediaActions[2], {\n              name: targetFile.name,\n              link: targetFile.link,\n            });\n            showActionNotification(data);\n            setRemoteMediaManagerVisible(false);\n            return;\n          }\n          setMedia({\n            name: targetFile.name,\n            link: targetFile.link,\n          });\n          showActionNotification(data);\n          setRemoteMediaManagerVisible(false);\n          return;\n        } else {\n          openNotificationWithIcon(\n            \"error\",\n            \"Invalid file type\",\n            `This file type is not compatible with ${mediaType} selection.`\n          );\n        }\n      } else if (\n        data.id === ChonkyActions.MoveFiles.id ||\n        data.id === \"move_files\"\n      ) {\n        // Handle drag and drop - FIXED\n        await handleDrop(data);\n      } else if (data.id === \"delete_files\" || data.id === \"delete_folders\") {\n        const filesToDelete = data.state.selectedFilesForAction;\n\n        confirmDelete(filesToDelete, async () => {\n          try {\n            const files = filesToDelete.filter((f) => !f.isDir);\n            const foldersToDelete = filesToDelete.filter((f) => f.isDir);\n\n            for (const file of files) {\n              await deleteMediaFile(file.parentId, file.id);\n            }\n\n            for (const folder of foldersToDelete) {\n              await deleteMediaFolder(folder.id);\n            }\n\n            showActionNotification(data);\n            openNotificationWithIcon(\n              \"success\",\n              \"Items deleted successfully\",\n              \"\"\n            );\n          } catch (error) {\n            console.error(\"Error deleting items:\", error);\n            openNotificationWithIcon(\n              \"error\",\n              \"Delete failed\",\n              error.message || \"Unable to delete selected items\"\n            );\n          }\n        });\n      } else if (data.id === ChonkyActions.UploadFiles.id) {\n        setOpenUploadModal(true);\n      } else if (data.id === ChonkyActions.CreateFolder.id) {\n        setOpenCreateFolderModal(true);\n      } else if (data.id === \"rename_item\") {\n        const item = data.state.selectedFilesForAction[0];\n        if (item) {\n          setRenameTarget(item);\n          setOpenRenameModal(true);\n        }\n      } else if (data.id === \"preview_file\") {\n        const item = data.state.selectedFilesForAction[0];\n        if (item && !item.isDir) {\n          handlePreviewFile(item);\n        }\n      }\n    },\n    [\n      deleteMediaFile,\n      deleteMediaFolder,\n      updateMediaFile,\n      mediaActions,\n      mediaType,\n      setRemoteMediaManagerVisible,\n      setCurrentFolderId,\n      setCurrentFolderName,\n      confirmDelete,\n      handleDrop,\n    ]\n  );\n};\n\n// Updated checkForType function\nfunction checkForType(filename, fileType) {\n  if (!filename) return false;\n\n  const parts = filename.split(\".\");\n  const ext = parts[parts.length - 1]?.toLowerCase();\n\n  if (!ext) return false;\n\n  switch (fileType) {\n    case \"picture\":\n    case \"images\":\n      return [\n        \"png\",\n        \"jpeg\",\n        \"jpg\",\n        \"tiff\",\n        \"gif\",\n        \"bmp\",\n        \"webp\",\n        \"svg\",\n      ].includes(ext);\n    case \"video\":\n    case \"videos\":\n      return [\n        \"m4v\",\n        \"avi\",\n        \"mpg\",\n        \"mp4\",\n        \"mov\",\n        \"wmv\",\n        \"flv\",\n        \"webm\",\n        \"mkv\",\n      ].includes(ext);\n    case \"document\":\n    case \"docs\":\n      return [\n        \"pdf\",\n        \"doc\",\n        \"docx\",\n        \"txt\",\n        \"rtf\",\n        \"xls\",\n        \"xlsx\",\n        \"ppt\",\n        \"pptx\",\n      ].includes(ext);\n    case \"audio\":\n    case \"voiceOvers\":\n    case \"musics\":\n      return [\"mp3\", \"wav\", \"aac\", \"ogg\", \"flac\", \"m4a\", \"wma\"].includes(ext);\n    case \"other\":\n    default:\n      return true;\n  }\n}\n\n// Create Folder Modal with hierarchy support\nconst CreateFolderModal = ({\n  visible,\n  onClose,\n  onSuccess,\n  currentFolderId,\n  getCurrentDepth,\n  isNameUnique,\n}) => {\n  const [folderName, setFolderName] = useState(\"\");\n  const [mediaType, setMediaType] = useState(\"other\");\n  const [loading, setLoading] = useState(false);\n  const { createMediaFolder } = useMediaManager();\n\n  const handleCreate = async () => {\n    if (!folderName.trim()) {\n      message.warning(\"Please enter a folder name\");\n      return;\n    }\n\n    if (!isNameUnique(folderName.trim(), currentFolderId)) {\n      message.error(\"A folder with this name already exists\");\n      return;\n    }\n\n    const currentDepth = getCurrentDepth();\n    if (currentDepth >= 2) {\n      message.error(\"Maximum folder depth reached (3 levels)\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const parentId = currentFolderId === \"root\" ? null : currentFolderId;\n      await createMediaFolder({\n        name: folderName.trim(),\n        mediaType,\n        parentId,\n      });\n\n      setFolderName(\"\");\n      setMediaType(\"other\");\n      onClose();\n      onSuccess?.();\n      message.success(`Folder \"${folderName}\" created successfully`);\n    } catch (error) {\n      console.error(\"Error creating folder:\", error);\n      message.error(error.message || \"Failed to create folder\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!visible) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <h3>Create New Folder</h3>\n        <div className=\"form-group\">\n          <label>Folder Name:</label>\n          <Input\n            value={folderName}\n            onChange={(e) => setFolderName(e.target.value)}\n            onPressEnter={handleCreate}\n            placeholder=\"Enter folder name\"\n            autoFocus\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Media Type:</label>\n          <Select\n            value={mediaType}\n            onChange={setMediaType}\n            style={{ width: \"100%\" }}\n          >\n            <Select.Option value=\"picture\">Picture</Select.Option>\n            <Select.Option value=\"video\">Video</Select.Option>\n            <Select.Option value=\"audio\">Audio</Select.Option>\n            <Select.Option value=\"document\">Document</Select.Option>\n            <Select.Option value=\"other\">Other</Select.Option>\n          </Select>\n        </div>\n        <div className=\"modal-actions\">\n          <Button type=\"primary\" onClick={handleCreate} loading={loading}>\n            Create\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Rename Modal with backend integration\nconst RenameModal = ({ visible, onClose, onSuccess, target, isNameUnique }) => {\n  const [newName, setNewName] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const { updateMediaFolder, updateMediaFile } = useMediaManager();\n\n  useEffect(() => {\n    if (target) {\n      setNewName(target.name);\n    }\n  }, [target]);\n\n  const handleRename = async () => {\n    if (!newName.trim()) {\n      message.warning(\"Please enter a name\");\n      return;\n    }\n\n    if (newName === target.name) {\n      onClose();\n      return;\n    }\n\n    if (!isNameUnique(newName.trim(), target.parentId, target.id)) {\n      message.error(\"An item with this name already exists\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      if (target.isDir) {\n        await updateMediaFolder(target.id, { name: newName.trim() });\n      } else {\n        await updateMediaFile(target.parentId, target.id, {\n          originalName: newName.trim(),\n        });\n      }\n\n      onClose();\n      onSuccess?.();\n      message.success(`Renamed to \"${newName}\"`);\n    } catch (error) {\n      console.error(\"Error renaming:\", error);\n      message.error(error.message || \"Failed to rename\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!visible || !target) return null;\n\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n        <h3>Rename {target.isDir ? \"Folder\" : \"File\"}</h3>\n        <div className=\"form-group\">\n          <label>New Name:</label>\n          <Input\n            value={newName}\n            onChange={(e) => setNewName(e.target.value)}\n            onPressEnter={handleRename}\n            autoFocus\n          />\n        </div>\n        <div className=\"modal-actions\">\n          <Button type=\"primary\" onClick={handleRename} loading={loading}>\n            Rename\n          </Button>\n          <Button onClick={onClose}>Cancel</Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Enhanced VFSBrowser with all features including drag and drop\nexport const VFSBrowser = React.memo((props) => {\n  const [openUploadModal, setOpenUploadModal] = useState(false);\n  const [openCreateFolderModal, setOpenCreateFolderModal] = useState(false);\n  const [openRenameModal, setOpenRenameModal] = useState(false);\n  const [renameTarget, setRenameTarget] = useState(null);\n\n  const {\n    fileMap,\n    currentFolderId,\n    setCurrentFolderId,\n    setCurrentFolderName,\n    currentFolderName,\n    refreshData,\n    loading,\n    getCurrentDepth,\n    isNameUnique,\n    moveMediaFile,\n  } = useCustomFileMap();\n\n  const files = useFiles(fileMap, currentFolderId);\n  const folderChain = useFolderChain(fileMap, currentFolderId);\n  const mediaActions = props.actions;\n  const mediaType = props.mediaType;\n  const setRemoteMediaManagerVisible = props.setRemoteMediaManagerVisible;\n\n  const handleFileAction = useFileActionHandler(\n    setCurrentFolderName,\n    setCurrentFolderId,\n    setOpenUploadModal,\n    setOpenCreateFolderModal,\n    setOpenRenameModal,\n    setRenameTarget,\n    mediaActions,\n    mediaType,\n    setRemoteMediaManagerVisible,\n    checkForType,\n    refreshData,\n    isNameUnique,\n    getCurrentDepth,\n    moveMediaFile\n  );\n\n  // Enhanced file actions with depth-aware logic and drag and drop\n  const fileActions = useMemo(() => {\n    const actions = [];\n    const currentDepth = getCurrentDepth();\n    const canCreateSubfolder = currentDepth < 2;\n\n    // Enable drag and drop\n    actions.push(ChonkyActions.EnableDragAndDrop);\n\n    if (currentFolderId === \"root\") {\n      // Root level actions\n      actions.push({\n        id: \"delete_folders\",\n        button: {\n          name: \"Delete Folder\",\n          toolbar: false,\n          contextMenu: true,\n          group: \"Actions\",\n          icon: ChonkyActions.DeleteFiles.button.icon,\n        },\n        hotkeys: [\"Delete\"],\n      });\n\n      if (canCreateSubfolder) {\n        actions.push(ChonkyActions.CreateFolder);\n      }\n    } else {\n      // Inside folder actions\n      actions.push({\n        id: \"delete_files\",\n        button: {\n          name: \"Delete Items\",\n          toolbar: false,\n          contextMenu: true,\n          group: \"Actions\",\n          icon: ChonkyActions.DeleteFiles.button.icon,\n        },\n        hotkeys: [\"Delete\"],\n      });\n\n      actions.push(ChonkyActions.UploadFiles);\n\n      if (canCreateSubfolder) {\n        actions.push(ChonkyActions.CreateFolder);\n      }\n\n      // Add preview action for files only\n      actions.push({\n        id: \"preview_file\",\n        button: {\n          name: \"Preview\",\n          toolbar: false,\n          contextMenu: true,\n          group: \"Actions\",\n        },\n        fileFilter: (file) => !file.isDir, // Only show for files, not folders\n      });\n    }\n\n    // Add rename action (always available)\n    actions.push({\n      id: \"rename_item\",\n      button: {\n        name: \"Rename\",\n        toolbar: false,\n        contextMenu: true,\n        group: \"Actions\",\n      },\n      hotkeys: [\"F2\"],\n    });\n\n    return actions;\n  }, [currentFolderId, getCurrentDepth]);\n\n  const thumbnailGenerator = useCallback(\n    (file) => (file.thumbnailUrl ? file.thumbnailUrl : null),\n    []\n  );\n\n  return (\n    <>\n      <div style={{ height: \"100vh\", position: \"relative\" }}>\n        <MediaFileUploader\n          currentFolderId={currentFolderId}\n          currentFolderName={currentFolderName}\n          visible={openUploadModal}\n          onSuccess={() => {}}\n          setVisible={setOpenUploadModal}\n        />\n\n        <CreateFolderModal\n          visible={openCreateFolderModal}\n          onClose={() => setOpenCreateFolderModal(false)}\n          onSuccess={() => {}}\n          currentFolderId={currentFolderId}\n          getCurrentDepth={getCurrentDepth}\n          isNameUnique={isNameUnique}\n        />\n\n        <RenameModal\n          visible={openRenameModal}\n          onClose={() => setOpenRenameModal(false)}\n          onSuccess={() => {}}\n          target={renameTarget}\n          isNameUnique={isNameUnique}\n        />\n\n        {loading && (\n          <div className=\"loading-overlay\">\n            <div className=\"loading-spinner\">Loading...</div>\n          </div>\n        )}\n\n        <FullFileBrowser\n          files={files}\n          folderChain={folderChain}\n          fileActions={fileActions}\n          onFileAction={handleFileAction}\n          thumbnailGenerator={thumbnailGenerator}\n          disableSelection={loading}\n          disableToolbar={true}\n          disableDefaultFileActions={true}\n          {...props}\n        />\n      </div>\n\n      <style jsx>{`\n        .modal-overlay {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(0, 0, 0, 0.5);\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 1000;\n        }\n\n        .modal-content {\n          background: white;\n          padding: 24px;\n          border-radius: 8px;\n          width: 400px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        .modal-content h3 {\n          margin: 0 0 20px 0;\n          color: #333;\n        }\n\n        .form-group {\n          margin-bottom: 16px;\n        }\n\n        .form-group label {\n          display: block;\n          margin-bottom: 4px;\n          font-weight: 500;\n          color: #555;\n        }\n\n        .modal-actions {\n          display: flex;\n          gap: 8px;\n          justify-content: flex-end;\n          margin-top: 20px;\n        }\n\n        .loading-overlay {\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background: rgba(255, 255, 255, 0.8);\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          z-index: 10;\n        }\n\n        .loading-spinner {\n          padding: 12px 24px;\n          background: white;\n          border-radius: 4px;\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n          font-size: 14px;\n          color: #666;\n        }\n\n        /* Drag and Drop Visual Feedback */\n        .chonky-file-browser .chonky-file-list-entry.chonky-dnd-drop-target {\n          background-color: #e6f7ff !important;\n          border: 2px dashed #1890ff !important;\n          border-radius: 4px;\n        }\n\n        .chonky-file-browser .chonky-file-list-entry.chonky-dnd-can-drop {\n          border: 1px solid #d9d9d9;\n          background-color: #fafafa;\n        }\n\n        .chonky-file-browser .chonky-file-list-entry.chonky-dnd-dragging {\n          opacity: 0.5;\n        }\n\n        /* Custom drop zone styling for folders */\n        .chonky-file-browser .chonky-file-list-entry[data-is-dir=\"true\"]:hover {\n          background-color: #f0f8ff;\n          transition: background-color 0.2s ease;\n        }\n\n        /* Enhanced folder highlighting during drag operations */\n        .chonky-file-browser\n          .chonky-file-list-entry[data-is-dir=\"true\"].chonky-dnd-can-drop:hover {\n          background-color: #e6f7ff;\n          border: 1px solid #40a9ff;\n        }\n      `}</style>\n    </>\n  );\n});\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\faqs.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\EditTypeName.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\main.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\WorkoutCompleteModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\HelpPopupPlayer.js",["994","995","996","997","998","999"],"import React, { useState, useEffect, useRef } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport { VideoSeekSlider } from \"react-video-seek-slider\";\nimport {\n  CaretRightOutlined,\n  PauseOutlined,\n  CloseOutlined,\n} from \"@ant-design/icons\";\nimport Modal from \"react-modal\";\nimport SquarePT from \"../../assets/icons/Square-PT.png\";\n// import PlayerPlayIcon from \"../../assets/icons/player-play-icon.svg\";\nimport PopupPlayIcon from \"../../assets/icons/help-pop-out-play-icon.svg\";\nimport PopupPauseIcon from \"../../assets/icons/help-pop-out-pause-icon.svg\";\n// import PlayerPauseIcon from \"../../assets/icons/player-pause-icon.svg\";\nimport \"../../assets/helpPopupPlayer.css\";\n\nconst formatTime = (seconds) => {\n  if (isNaN(seconds)) {\n    return \"00:00\";\n  }\n\n  const date = new Date(seconds * 1000);\n  const hh = date.getUTCHours();\n  const mm = date.getUTCMinutes();\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\n  if (hh) {\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\n  }\n  return `${mm}:${ss}`;\n};\n\nfunction HelpPopupPlayer({ open, setOpen, onCancel, exercise }) {\n  const playerRef = useRef(null);\n  const [progress, setProgress] = useState({});\n  const [playing, setPlaying] = useState(false);\n  const { height, width } = useWindowDimensions();\n\n  const currentTime = playerRef.current\n    ? playerRef.current.getCurrentTime()\n    : \"00:00\";\n\n  const duration = playerRef.current\n    ? playerRef.current.getDuration()\n    : \"00:00\";\n\n  const getTime = formatTime(duration - currentTime);\n  const elapsedTime = formatTime(currentTime);\n  const totalDuration = formatTime(duration);\n\n  const onSeek = (e) => {\n    setProgress({ ...progress, played: parseFloat(e / 100) });\n    playerRef.current.seekTo(e / 100);\n  };\n\n  const handleProgress = (changeState) => {\n    console.log(\"change state\", changeState);\n    console.log(\n      \" playerState.progress.loadedSeconds === playerState.progress.playedSeconds\",\n      progress.loadedSeconds === progress.playedSeconds\n    );\n    if (progress.loadedSeconds === progress.playedSeconds) {\n      // setPlayerState({ ...playerState, loading: true });\n      // setPlayerState({ ...playerState, playing: false });\n    } else {\n      // setPlayerState({ ...playerState, loading: false });\n      // setPlayerState({ ...playerState, playing: true });\n    }\n    // setPlayerState({ ...playerState, progress: changeState });\n    setProgress(changeState);\n  };\n\n  const onPlayPause = () => {\n    setPlaying(!playing);\n    // setPlaying(!playing);\n  };\n\n  return (\n    <Modal\n      isOpen={open}\n      onRequestClose={() => {\n        setPlaying(false);\n        onCancel();\n      }}\n      contentLabel=\"Example Modal\"\n      style={{ zIndex: 3 }}\n    >\n      <div\n        style={{\n          marginBottom: \"10px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <img src={SquarePT} alt=\"\" width=\"30px\" />{\" \"}\n          <span\n            className=\"font-paragraph-white\"\n            style={{ marginLeft: \"10px\", fontWeight: \"600\", fontSize: \"15px\" }}\n          >\n            Your Trainer\n          </span>\n        </div>\n        <CloseOutlined\n          style={{ color: \"#fff\", fontSize: \"30px\", cursor: \"pointer\" }}\n          onClick={() => {\n            setPlaying(false);\n            onCancel();\n          }}\n        />\n      </div>\n      <div\n        className=\"helpPopOut-player-wrapper\"\n        style={{ position: \"relative\" }}\n      >\n        <ReactPlayer\n          width=\"100%\"\n          height=\"100%\"\n          url={`${exercise.videoURL}`}\n          loop={true}\n          controls={false}\n          muted={true}\n          playing={playing}\n          stopOnUnmount={false}\n        />\n        {exercise.voiceOverLink && (\n          <ReactPlayer\n            ref={playerRef}\n            url={`${exercise.voiceOverLink}`}\n            playing={playing}\n            controls={true}\n            style={{ display: \"none\" }}\n            onProgress={handleProgress}\n            onPause={() => setPlaying(false)}\n            onPlay={() => setPlaying(true)}\n          />\n        )}\n\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: \"0\",\n            width: \"100%\",\n            padding: \"20px 0\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              margin: \"0 30px\",\n            }}\n          >\n            {playing ? (\n              <img\n                src={PopupPauseIcon}\n                alt=\"skip-left-icon\"\n                style={{ cursor: \"pointer\", height: \"25px\" }}\n                className=\"controls-wrapper-bottom-icons\"\n                onClick={onPlayPause}\n              />\n            ) : (\n              <img\n                src={PopupPlayIcon}\n                alt=\"skip-left-icon\"\n                style={{ cursor: \"pointer\", height: \"25px\" }}\n                className=\"controls-wrapper-bottom-icons\"\n                onClick={onPlayPause}\n              />\n            )}\n            <span className=\"font-paragraph-white\" style={{ fontSize: \"16px\" }}>\n              {getTime}\n            </span>\n          </div>\n          <div className=\"helpPopOut-progress-bar-container\">\n            <VideoSeekSlider\n              max={100}\n              currentTime={progress.played * 100}\n              progress={progress.loaded * 100}\n              onChange={onSeek}\n              offset={0}\n              limitTimeTooltipBySides={true}\n              hideSeekTimes={false}\n              secondsPrefix=\"00:00:\"\n              minutesPrefix=\"00:\"\n              tipFormatter={(v) => `${elapsedTime}`}\n            />\n          </div>\n        </div>\n      </div>\n      {exercise?.description && (\n        <p\n          style={{\n            color: \"#fff\",\n            fontSize: \"16px\",\n            marginTop: \"10px\",\n            padding: \"0 10px\",\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            lineHeight: \"1.5\",\n          }}\n        >\n          {exercise?.description}\n        </p>\n      )}\n    </Modal>\n  );\n}\n\nexport default HelpPopupPlayer;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\Player.js",["1000","1001","1002","1003"],"import React, { useContext, useRef, useEffect } from \"react\";\nimport NonRenderedVideoPlayer from \"./NonRenderedVideoPlayer\";\nimport RenderedVideoPlayer from \"./RenderedVideoPlayer\";\n\nvar count = 0;\n\nfunction Player({\n  exercise,\n  musics,\n  moveToNextExercise,\n  moveToPrevExercise,\n  nextExerciseTitle,\n  completed,\n  // for full screen player video browser\n  workout,\n  setExerciseForHelpModal,\n  setOpenHelpModal,\n  setCurrentExercise,\n  currentExercise,\n  challengePageAddress,\n  inCreation,\n}) {\n  return workout.renderWorkout ? (\n    <div>\n      {\" \"}\n      <RenderedVideoPlayer\n        exercise={exercise}\n        musics={musics}\n        moveToNextExercise={moveToNextExercise}\n        moveToPrevExercise={moveToPrevExercise}\n        nextExerciseTitle={nextExerciseTitle}\n        completed={completed}\n        // for full screen player video browser\n        workout={workout}\n        setExerciseForHelpModal={setExerciseForHelpModal}\n        setOpenHelpModal={setOpenHelpModal}\n        setCurrentExercise={setCurrentExercise}\n        currentExercise={currentExercise}\n        challengePageAddress={challengePageAddress}\n        inCreation={inCreation}\n      />\n    </div>\n  ) : (\n    <div>\n      <NonRenderedVideoPlayer\n        exercise={exercise}\n        musics={musics}\n        moveToNextExercise={moveToNextExercise}\n        moveToPrevExercise={moveToPrevExercise}\n        nextExerciseTitle={nextExerciseTitle}\n        completed={completed}\n        // for full screen player video browser\n        workout={workout}\n        setExerciseForHelpModal={setExerciseForHelpModal}\n        setOpenHelpModal={setOpenHelpModal}\n        setCurrentExercise={setCurrentExercise}\n        currentExercise={currentExercise}\n        challengePageAddress={challengePageAddress}\n      />\n    </div>\n  );\n}\n\nexport default Player;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\PlayerVideoBrowser.js",["1004"],"import React, { useContext } from \"react\";\n\nimport Carousel from \"react-multi-carousel\";\nimport VideoThumbnail from \"react-video-thumbnail\";\nimport SquarePT from \"../../assets/icons/player-video-browser-whistle-icon.svg\";\nimport SquarePlay from \"../../assets/icons/player-video-browser-play-icon.svg\";\nimport { exerciseWorkoutTimeTrackContext } from \"../../contexts/PlayerState\";\n\nconst responsive = {\n  superLargeDesktop: {\n    // the naming can be any, depends on you.\n    breakpoint: { max: 4000, min: 3000 },\n    items: 4,\n  },\n  desktop3: {\n    breakpoint: { max: 3000, min: 1600 },\n    items: 4,\n  },\n  desktop2: {\n    breakpoint: { max: 1600, min: 1350 },\n    items: 3.5,\n  },\n  desktop: {\n    breakpoint: { max: 1350, min: 1100 },\n    items: 3,\n  },\n  tablet: {\n    breakpoint: { max: 1100, min: 850 },\n    items: 2.5,\n  },\n  mobile2: {\n    breakpoint: { max: 850, min: 600 },\n    items: 1,\n  },\n  mobile: {\n    breakpoint: { max: 600, min: 0 },\n    items: 1,\n  },\n};\n\nfunction PlayerVideoBrowser({\n  workout,\n  playerState,\n  setPlayerState,\n  setExerciseForHelpModal,\n  setOpenHelpModal,\n  setCurrentExercise,\n  currentExercise,\n  fullscreen,\n  fromFullScreen,\n}) {\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\n    exerciseWorkoutTimeTrackContext\n  );\n\n  const handleOpenExerciseForHelp = (e) => {\n    setPlayerState({ ...playerState, playing: false, muted: true });\n    setExerciseForHelpModal(e);\n    setOpenHelpModal(true);\n  };\n\n  const handleChangeExercise = (i) => {\n    setCurrentExercise({\n      exercise: workout.exercises[i],\n      index: i,\n      completed: Math.round((i / (workout.exercises.length - 1)) * 100),\n    });\n    setPlayerState({ ...playerState, playing: false, muted: false });\n    updateExerciseWorkoutTimer(i);\n  };\n\n  const updateExerciseWorkoutTimer = (index) => {\n    if (workout.isRendered) {\n      const allExercisesBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\n      const allBreaksBeforeTheNextExercise = workout.exercises\n        .slice(0, index)\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\n      setExerciseWorkoutTimeTrack((prev) => ({\n        ...prev,\n        current:\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\n      }));\n    }\n  };\n\n  return (\n    <div\n      className=\"challenge-player-container-exercies\"\n      style={{\n        background: fromFullScreen && \"none\",\n        width: fromFullScreen && \"100%\",\n      }}\n    >\n      <div className=\"video-browser-container\">\n        <Carousel responsive={responsive}>\n          {workout.exercises &&\n            workout.exercises.map((e, i) => {\n              return i === 0 ? (\n                <div\n                  className={`${\n                    currentExercise.index === i\n                      ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\n                      : \"exercise-browser-card\"\n                  }`}\n                >\n                  <div>\n                    <h4 className=\"challenge-player-container-exercies-round font-paragraph-white\">\n                      {e.exerciseGroupName ? (\n                        e.exerciseGroupName\n                      ) : (\n                        <span style={{ opacity: 0 }}>-</span>\n                      )}\n                    </h4>\n                  </div>\n                  {workout.isRendered && (\n                    <img\n                      src={SquarePlay}\n                      onClick={() =>\n                        setPlayerState({ ...playerState, playing: true })\n                      }\n                      alt=\"\"\n                      className=\"challenge-player-container-exercies-box-asktrainerbtn\"\n                      style={{ padding: \"8px\" }}\n                    />\n                  )}\n                  <div\n                    className=\"challenge-player-container-exercies-box\"\n                    key={e._id}\n                    onClick={() => handleChangeExercise(i)}\n                  >\n                    <div className=\"challenge-player-container-exercies-box-imagebox\">\n                      <VideoThumbnail\n                        videoUrl={e.videoURL ? `${e.videoURL}` : \"\"}\n                        width={250}\n                        height={200}\n                        cors={true}\n                      />\n                    </div>\n                    <div className=\"challenge-player-container-exercies-box-details font-paragraph-white\">\n                      <p style={{ lineHeight: \"10px\" }}>{e.title}</p>\n                      <p>\n                        {e.exerciseLength ? (\n                          <>\n                            <span style={{ marginRight: \"8px\" }}>\n                              {workout.isRendered\n                                ? `${e.exerciseLength} secs`\n                                : \"\"}\n                            </span>{\" \"}\n                          </>\n                        ) : (\n                          <span style={{ marginRight: \"8px\" }}></span>\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div\n                  className={`${\n                    currentExercise.index === i\n                      ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\n                      : \"exercise-browser-card\"\n                  }`}\n                >\n                  <div>\n                    <h4\n                      className=\"challenge-player-container-exercies-round font-paragraph-white\"\n                      style={{ opacity: !e.exerciseGroupName ? \"0\" : \"0.6\" }}\n                    >\n                      {e.exerciseGroupName ? (\n                        e.exerciseGroupName\n                      ) : (\n                        <span style={{ opacity: 0 }}>-</span>\n                      )}\n                    </h4>\n                  </div>\n                  {workout.isRendered && !fullscreen && (\n                    <img\n                      src={SquarePT}\n                      alt=\"\"\n                      className=\"challenge-player-container-exercies-box-asktrainerbtn\"\n                      onClick={() => handleOpenExerciseForHelp(e)}\n                    />\n                  )}\n                  <div\n                    className=\"challenge-player-container-exercies-box\"\n                    key={e._id}\n                    onClick={() => handleChangeExercise(i)}\n                  >\n                    <div className=\"challenge-player-container-exercies-box-imagebox\">\n                      <VideoThumbnail\n                        videoUrl={e.videoURL ? `${e.videoURL}` : \"\"}\n                        width={250}\n                        height={200}\n                        cors={true}\n                      />\n                    </div>\n                    <div className=\"challenge-player-container-exercies-box-details font-paragraph-white\">\n                      <p style={{ lineHeight: \"10px\" }}>{e.title}</p>\n                      <p>\n                        <span style={{ marginRight: \"8px\" }}>\n                          {e.exerciseLength ? `${e.exerciseLength} secs` : \"\"}\n                        </span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n        </Carousel>\n      </div>\n      {!fromFullScreen && workout.isRendered && (\n        <>\n          <h3\n            className=\"challenge-player-container-exercies-heading font-paragraph-white\"\n            style={{ marginTop: \"20px\" }}\n          >\n            Exercises\n          </h3>\n\n          <h3 className=\"challenge-player-container-exercies-subheading font-paragraph-white\">\n            Navigate to each exercise or hit the personal trainer button for\n            audio explanation.\n          </h3>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default PlayerVideoBrowser;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\communityPosts.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\posts.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\recipes.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\TextEditor.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\EditCategoryName.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\RemoteMediaManager.js",["1005","1006","1007","1008","1009"],"import React, { useEffect, useState } from \"react\";\nimport { Modal } from \"antd\";\nimport { VFSBrowser } from \"./MediaManager\";\n\nfunction RemoteMediaManager({ visible, setVisible, type, actions }) {\n  const [a, setA] = useState(actions);\n  const [t, setT] = useState(type);\n\n  return (\n    <Modal\n      key={Math.random()}\n      title=\"Media Manager\"\n      visible={visible}\n      onOk={() => setVisible(false)}\n      onCancel={() => setVisible(false)}\n      footer={false}\n      width=\"80%\"\n    >\n      <VFSBrowser\n        actions={actions}\n        mediaType={type}\n        setRemoteMediaManagerVisible={setVisible}\n      />\n    </Modal>\n  );\n}\n\nexport default RemoteMediaManager;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\PostsManager\\UpdatePost.js",["1010","1011"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Select, Modal } from \"antd\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { createPost } from \"../../../services/posts\";\n\nfunction UpdatePost({ postInfo, show, setShow, onUpdateComplete }) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [type, setType] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: postInfo.title,\n      description: postInfo.text,\n      category: postInfo.type,\n    });\n    setType(postInfo.type);\n    setImage({ name: postInfo.image, link: postInfo.image });\n  }, []);\n\n  const onFinish = async (values) => {\n    if (type && image) {\n      const data = {\n        id: postInfo._id,\n        title: values.name,\n        text: values.description,\n        image: typeof image === \"object\" ? image.link : \"\",\n        type: type,\n      };\n      onUpdateComplete(data);\n    } else {\n      window.alert(\"All values are requeired to create a post\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <Modal\n      width=\"60%\"\n      visible={show}\n      footer={false}\n      onCancel={() => setShow(false)}\n      onOk={onUpdateComplete}\n    >\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <h2 className=\"font-heading-white\">Update Post</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Post Title\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Please input post title!\" }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Post Description\"\n            name=\"description\"\n            rules={[\n              { required: true, message: \"Please input post description!\" },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item label=\"Post Image\" name=\"image\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([image, setImage]);\n              }}\n            >\n              Upload Image\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {image && <img src={`${image.link}`} alt=\"\" height=\"100px\" />}\n            </div>\n          </Form.Item>\n          <Form.Item label=\"Post Category\" name=\"category\" required={true}>\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              value={type}\n              placeholder=\"Please select\"\n              onChange={(e) => setType(e)}\n            >\n              {[\"Challenge\", \"Magazine\", \"Recipe\", \"News Updates\"].map(\n                (e, i) => (\n                  <Select.Option key={i + 1} value={e}>\n                    {e}\n                  </Select.Option>\n                )\n              )}\n            </Select>\n          </Form.Item>\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Update\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UpdatePost;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\BlogManager\\UpdateBlog.js",["1012"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Form, Input, Button, Select, Modal, List } from \"antd\";\nimport { CloseSquareOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport {\n  createBlogCategory,\n  getAllBlogCategories,\n  getAllUserBlogs,\n  removeBlogCategory,\n} from \"../../../services/blogs\";\nimport EditCategoryName from \"./EditCategoryName\";\nimport TextEditor from \"../../TextEditor\";\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nconst { Option } = Select;\n\nfunction UpdateBlog({ blogInfo, show, setShow, onUpdateComplete }) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [paragraph, setParagraph] = useState(\"\");\n  const [featuredImage, setFeaturedImage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [videoLink, setVideLink] = useState(\"\");\n  //   category\n  const [category, setCategory] = useState(\"\");\n  const [allCategories, setAllCategories] = useState([]);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [categoryModalVisible, setCategoryModalVisible] = useState(false);\n  const [editCategoryNameModalVisible, setEditCategoryModelVisible] =\n    useState(false);\n\n  const [selectedCategoryForUpdate, setSelectedCategoryForUpdate] = useState(\n    {}\n  );\n  const [isPublic, setIsPublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n\n  const [allBlogs, setAllBlogs] = useState([]);\n  const [selectedBlog, setSelectedBlog] = useState(\"\");\n  const { language } = useContext(LanguageContext);\n\n  const userInfo = useContext(userInfoContext)[0];\n  useEffect(() => {\n    fethData();\n    getAllBlogsFromBackend();\n    form.setFieldsValue({\n      title: blogInfo.title,\n      paragraph: blogInfo.paragraph,\n      category: blogInfo.category,\n    });\n    blogInfo.category && setCategory(blogInfo.category._id);\n    blogInfo.alternativeLanguage &&\n      setSelectedBlog(blogInfo.alternativeLanguage._id);\n    setFeaturedImage(blogInfo.featuredImage);\n    setVideLink(blogInfo.videoLink);\n    setTitle(blogInfo.title);\n    setParagraph(blogInfo.paragraph);\n    setAllowReviews(blogInfo.allowReviews);\n    setAllowComments(blogInfo.allowComments);\n    setIsPublic(blogInfo.isPublic);\n\n    console.log(blogInfo);\n  }, [blogInfo]);\n\n  async function getAllBlogsFromBackend() {\n    const data = await getAllUserBlogs(\n      language === \"dutch\" ? \"english\" : \"dutch\"\n    );\n    if (data && data.blogs) {\n      setAllBlogs(data.blogs);\n    }\n  }\n\n  const fethData = async () => {\n    const data = await getAllBlogCategories(language);\n    setAllCategories(data.categories);\n    console.log(data);\n  };\n\n  const updateTheBlog = async () => {\n    let flag = false;\n    if (title && paragraph && featuredImage && videoLink && category) {\n      flag = true;\n    }\n    if (!flag) {\n      alert(\"Please fill all the information\");\n    } else {\n      setLoading(true);\n      const vals = {\n        title,\n        paragraph,\n        featuredImage:\n          typeof featuredImage === \"object\"\n            ? featuredImage.link\n            : featuredImage,\n        videoLink: typeof videoLink === \"object\" ? videoLink.link : videoLink,\n        category,\n        isPublic: isPublic,\n        allowComments: allowComments,\n        allowReviews: allowReviews,\n        alternativeLanguage: selectedBlog,\n      };\n      onUpdateComplete(setLoading, vals, blogInfo._id);\n    }\n  };\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <Modal\n      width=\"60%\"\n      visible={show}\n      footer={false}\n      onCancel={() => setShow(false)}\n      onOk={onUpdateComplete}\n    >\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      {/* edit category name modal */}\n      <EditCategoryName\n        editCategoryNameModalVisible={editCategoryNameModalVisible}\n        setEditCategoryModelVisible={setEditCategoryModelVisible}\n        fethData={fethData}\n        selectedForUpdate={selectedCategoryForUpdate}\n        titleName=\"Update Category\"\n      />\n      {/* modal to create a new meal type  */}\n      <Modal\n        onCancel={() => setCategoryModalVisible(false)}\n        footer={false}\n        visible={categoryModalVisible}\n      >\n        <p className=\"font-paragraph-white\">Manage Blog Category</p>\n\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newCategoryName}\n            onChange={(e) => setNewCategoryName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newCategoryName.length > 0) {\n                await createBlogCategory(newCategoryName);\n                // setEquipmentModal(false);\n                fethData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Categories</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allCategories}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{cat.name}</span>\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await removeBlogCategory(cat._id);\n                      fethData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedCategoryForUpdate(cat);\n                      setEditCategoryModelVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      <h2 className=\"font-heading-white\">Update Blog</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          form={form}\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <div>\n            <p>Language: {blogInfo?.language}</p>\n            <span\n              style={{ marginRight: \"5px\" }}\n            >{`Select alternative language version`}</span>\n            <Select\n              style={{ width: \"500px\" }}\n              onChange={(e) => setSelectedBlog(e)}\n              value={selectedBlog}\n            >\n              <Option value={\"\"} key={1}>\n                -\n              </Option>\n              {allBlogs.map(\n                (r, i) =>\n                  r._id !== blogInfo._id && (\n                    <Option key={i + 2} value={r._id}>\n                      {r.title}\n                    </Option>\n                  )\n              )}\n            </Select>\n          </div>\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            rules={[{ required: true, message: \"Please input title!\" }]}\n          >\n            <Input value={title} onChange={(e) => setTitle(e.target.value)} />\n          </Form.Item>\n          <Form.Item\n            label=\"Featured Image\"\n            name=\"featuredImage\"\n            rules={[\n              { required: true, message: \"Please input featured image!\" },\n            ]}\n          >\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([featuredImage, setFeaturedImage]);\n              }}\n            >\n              Upload File\n            </Button>\n            {typeof featuredImage === \"object\" ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  marginRight: \"15px\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <img\n                  alt=\"\"\n                  src={`${featuredImage.link}`}\n                  height=\"200px\"\n                  width=\"250px\"\n                />\n                <span>\n                  {featuredImage.name}{\" \"}\n                  <CloseSquareOutlined\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setFeaturedImage(\"\")}\n                  />\n                </span>\n              </div>\n            ) : (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  marginRight: \"15px\",\n                  marginTop: \"10px\",\n                }}\n              >\n                <img\n                  alt=\"\"\n                  src={`${featuredImage}`}\n                  height=\"200px\"\n                  width=\"250px\"\n                />\n                <span>\n                  <CloseSquareOutlined\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setFeaturedImage(\"\")}\n                  />\n                </span>\n              </div>\n            )}\n          </Form.Item>\n          <Form.Item\n            label=\"Paragraph\"\n            name=\"paragraph\"\n            rules={[{ required: true }]}\n          >\n            {/* <Input.TextArea\n              rows={20}\n              value={paragraph}\n              onChange={(e) => setParagraph(e.target.value)}\n            /> */}\n            <TextEditor\n              key={JSON.stringify(paragraph)}\n              value={paragraph}\n              setValue={setParagraph}\n            />\n          </Form.Item>\n          <Form.Item label=\"Video Link\" name=\"videoLink\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"videos\");\n                setMediaManagerActions([videoLink, setVideLink]);\n              }}\n            >\n              Upload File\n            </Button>\n            {typeof videoLink === \"object\" ? (\n              <div className=\"font-paragraph-black\">\n                {videoLink.name}{\" \"}\n                <CloseSquareOutlined\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => setVideLink(\"\")}\n                />\n              </div>\n            ) : (\n              videoLink && (\n                <div className=\"font-paragraph-black\">\n                  {`${videoLink}`}{\" \"}\n                  <CloseSquareOutlined\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setVideLink(\"\")}\n                  />\n                </div>\n              )\n            )}\n          </Form.Item>\n          <Form.Item label=\"Category\" name=\"category\">\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={category}\n              onChange={(e) => setCategory(e)}\n            >\n              {allCategories.map((cat) => (\n                <Option value={cat._id}>{cat.name}</Option>\n              ))}\n            </Select>\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                float: \"right\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => setCategoryModalVisible(true)}\n            >\n              Manage Blog Categories\n            </Button>\n          </Form.Item>\n\n          {userInfo.role === \"admin\" && (\n            <>\n              <Form.Item>\n                <Checkbox\n                  checked={isPublic}\n                  onChange={(e) => setIsPublic(e.target.checked)}\n                >\n                  Make Public\n                </Checkbox>\n              </Form.Item>\n              <Form.Item>\n                <Checkbox\n                  checked={allowReviews}\n                  onChange={(e) => setAllowReviews(e.target.checked)}\n                >\n                  Allow Reviews\n                </Checkbox>\n              </Form.Item>\n\n              <Form.Item>\n                <Checkbox\n                  checked={allowComments}\n                  onChange={(e) => setAllowComments(e.target.checked)}\n                >\n                  Allow Comments\n                </Checkbox>\n              </Form.Item>\n            </>\n          )}\n          {loading ? (\n            <LoadingOutlined style={{ color: \"#ff7700\", fontSize: \"30px\" }} />\n          ) : (\n            <Button\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"none\",\n                color: \"white\",\n                marginTop: \"5px\",\n              }}\n              onClick={() => updateTheBlog()}\n            >\n              Update\n            </Button>\n          )}\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UpdateBlog;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\products.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\Coupons\\UpdateCoupon.js",["1013","1014"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Input, Modal, Form, InputNumber, Switch, Select } from \"antd\";\nimport { updateCoupon } from \"../../../services/coupons\";\n\nfunction UpdateCoupon({\n  visible,\n  setVisible,\n  selectedCoupon,\n  fetchData,\n  allChallenges,\n}) {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState();\n  const [code, setCode] = useState(\"\");\n  const [active, setActive] = useState(null);\n  const [applicableOn, setApplicableOn] = useState([]);\n  const [challengesApplicableOn, setChallengesApplicableOn] = useState([]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: selectedCoupon.name,\n      couponCode: selectedCoupon.code,\n      usageCount: selectedCoupon.limitUsage,\n      discount: selectedCoupon.discountPercent,\n      active: selectedCoupon.isActive,\n      applicableOn: selectedCoupon.applicableOn,\n      challengesApplicableOn: selectedCoupon.challengesApplicableOn,\n    });\n    setCode(selectedCoupon.code);\n    setActive(selectedCoupon.isActive);\n    setApplicableOn(selectedCoupon.applicableOn);\n    setChallengesApplicableOn(\n      selectedCoupon.challengesApplicableOn ? challengesApplicableOn : []\n    );\n  }, [selectedCoupon]);\n  const onFinish = async (values) => {\n    setLoading(true);\n    if (code.length > 0) {\n      const s = {\n        name: values.name,\n        code: code,\n        discountPercent: parseInt(values.discount),\n        limitUsage: values.usageCount,\n        isActive: values.active,\n        applicableOn: values.applicableOn,\n        challengesApplicableOn:\n          challengesApplicableOn.length > 0 ? challengesApplicableOn : null,\n      };\n      const res = await updateCoupon(s, selectedCoupon._id);\n      fetchData();\n      console.log(res);\n    } else {\n      alert(\"Please enter coupon code\");\n    }\n    setLoading(false);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <Modal\n      width=\"60%\"\n      visible={visible}\n      footer={false}\n      onCancel={() => setVisible(false)}\n    >\n      <h2 className=\"font-heading-white\">Update Coupon</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          form={form}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[{ required: true, message: \"Please input coupon name!\" }]}\n            type=\"number\"\n          >\n            <Input style={{ width: \"100%\" }} />\n          </Form.Item>\n\n          <Form.Item label=\"Coupon Code\" name=\"couponCode\">\n            <Input value={code} onChange={(e) => setCode(e.target.value)} />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Discount\"\n            name=\"discount\"\n            rules={[{ required: true, message: \"Please input discount!\" }]}\n            type=\"number\"\n          >\n            <Input\n              placeholder=\"Must be in percentage eg 10\"\n              type=\"number\"\n              style={{ width: \"100%\" }}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Usage Count\"\n            name=\"usageCount\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input number of times the code can be used!\",\n              },\n            ]}\n            type=\"number\"\n          >\n            <InputNumber style={{ width: \"100%\" }} />\n          </Form.Item>\n          <Form.Item label=\"Active\" name=\"active\">\n            <Switch\n              checkedChildren=\"is active\"\n              unCheckedChildren=\"not active\"\n              checked={active}\n              onChange={(e) => setActive(e)}\n            />\n          </Form.Item>\n          <Form.Item label=\"Applicable On Specific Plan\" name=\"applicableOn\">\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              value={applicableOn}\n              placeholder=\"Please select\"\n              onChange={(e) => setApplicableOn(e)}\n            >\n              {[\n                \"ALL\",\n                \"CHALLENGE ONE\",\n                \"CHALLENGE THREE\",\n                \"CHALLENGE TWELVE\",\n              ].map((e, i) => (\n                <Select.Option key={i + 1} value={e}>\n                  {e}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Applicable On Specific Challenge\"\n            name=\"challengesApplicableOn\"\n          >\n            <Select\n              mode=\"multiple\"\n              allowClear\n              style={{ width: \"100%\" }}\n              value={challengesApplicableOn}\n              placeholder=\"Please select\"\n              onChange={(e) => setChallengesApplicableOn(e)}\n            >\n              {allChallenges.map((e, i) => (\n                <Select.Option key={i + 1} value={e._id}>\n                  {e.challengeName}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Update\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UpdateCoupon;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\bodyFocus.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\equipments.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\tags.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\UpdateRecipe.js",["1015","1016","1017","1018","1019","1020"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Select,\n  Modal,\n  InputNumber,\n  List,\n  Checkbox,\n} from \"antd\";\nimport { PlusOutlined, CloseSquareOutlined } from \"@ant-design/icons\";\nimport { v4 } from \"uuid\";\nimport {\n  getAllDietTypes,\n  getAllMealTypes,\n  getAllFoodTypes,\n  getAllIngredients,\n  updateRecipe,\n  createFoodType,\n  createMealType,\n  removeMealType,\n  removeFoodType,\n  createDiet,\n  removeDiet,\n  createIngredient,\n  removeIngredient,\n  getAllUserRecipes,\n} from \"../../../services/recipes\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport EditTypeName from \"./EditTypeName\";\nimport TextEditor from \"../../TextEditor\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nconst { Option } = Select;\n\nfunction UpdateRecipe(props) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // -----------\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [featuredImage, setFeaturedImage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [thumbnailBase64, setThumbnailBase64] = useState(\"\");\n  const [preprationTime, setPreprationTime] = useState(\"\");\n  const [persons, setPersons] = useState(\"\");\n  const [kcalPerPersons, setKcalPerPersons] = useState(\"\");\n  const [saturationIndex, setSaturationIndex] = useState(\"\");\n  const [protein, setProtein] = useState(\"\");\n  const [carbohydrates, setCarbohydrates] = useState(\"\");\n  const [fat, setFat] = useState(\"\");\n  const [fiber, setFiber] = useState(\"\");\n  const [isPublic, setIsPublic] = useState(false);\n  const [allowComments, setAllowComments] = useState(false);\n  const [allowReviews, setAllowReviews] = useState(false);\n  //meal type\n  const [mealTypes, setMealTypes] = useState([]);\n  const [allMealTypes, setAllMealTypes] = useState([]);\n  const [mealTypeModalVisible, setMealTypeModalVisible] = useState(false);\n  const [newMealTypeName, setNewMealTypeName] = useState(\"\");\n  //=food type\n  const [foodType, setFoodTypes] = useState([]);\n  const [allFoodTypes, setAllFoodTypes] = useState([]);\n  const [foodTypeModalVisible, setFoodTypeModalVisible] = useState(false);\n  const [newFoodTypeName, setNewFoodTypeName] = useState(\"\");\n  //=diet\n  const [diet, setDiet] = useState([]);\n  const [allDiets, setAllDiets] = useState([]);\n  const [dietModalVisible, setDietModalVisible] = useState(false);\n  const [newDietName, setNewDietName] = useState(\"\");\n  //   INGREDIETS\n  const [allIngredients, setAllIngredients] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [newIngredientModalVisible, setNewIngredientModlVisible] =\n    useState(false);\n  const [newIngredientName, setNewIngredientName] = useState(\"\");\n\n  //   cooking process\\\n  const [cookingProcess, setCookingProcess] = useState([]);\n  const [notes, setNotes] = useState(\"\");\n  const [tips, setTips] = useState(\"\");\n  // recipe version selector\n  const [allRecipes, setAllRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(\"\");\n\n  // update stuff\n  const [editItemNameModalVisible, setEditItemModelVisible] = useState(false);\n\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n  const userInfo = useContext(userInfoContext)[0];\n  const { language } = useContext(LanguageContext);\n\n  async function fetchData() {\n    const diets = await getAllDietTypes(language);\n    const meals = await getAllMealTypes(language);\n    const foodTypes = await getAllFoodTypes(language);\n    const ingredients = await getAllIngredients(language);\n\n    setAllDiets(diets.diets);\n    setAllMealTypes(\n      meals.mealTypes.map((f) => ({ ...f, name: f.name.split(\"___\")[0] }))\n    );\n    setAllFoodTypes(\n      foodTypes.foodTypes.map((f) => ({ ...f, name: f.name.split(\"___\")[0] }))\n    );\n    setAllIngredients(ingredients.ingredients);\n  }\n\n  // async function fetchAllRecipes() {\n  //   const res = await getAllUserRecipes(\n  //     language === \"english\" ? \"dutch\" : \"english\"\n  //   );\n  //   console.log(\"testing\", res);\n  //   if (res && res.recipes) {\n  //     setAllRecipes(res.recipes);\n  //   }\n  // }\n\n  useEffect(() => {\n    console.log(\"ammar\", props.selectedProduct);\n    form.setFieldsValue({\n      recipeName: props.selectedProduct.name,\n      recipeDescription: props.selectedProduct.description,\n      preprationTime: props.selectedProduct.prepTime,\n      persons: props.selectedProduct.persons\n        ? props.selectedProduct.persons\n        : \"\",\n      kcalPerPerson: props.selectedProduct.kCalPerPerson,\n      saturationIndex: props.selectedProduct.saturationIndex,\n      protein: props.selectedProduct.protein,\n      carbohydrates: props.selectedProduct.carbohydrate,\n      fat: props.selectedProduct.fat,\n      fiber: props.selectedProduct.fiber,\n      mealTypes: props.selectedProduct.mealTypes,\n      foodTypes: props.selectedProduct.foodTypes,\n      diet: props.selectedProduct.diet,\n      tips: props.selectedProduct.tips,\n      notes: props.selectedProduct.notes,\n      isPublic: props.selectedProduct.isPublic,\n      allowComments: props.selectedProduct.allowComments,\n      allowReviews: props.selectedProduct.allowReviews,\n      // category: props.selectedProduct._id,\n      // price: props.selectedProduct.price,\n      // weight: props.selectedProduct.weight,\n      // inStock: props.selectedProduct.inStock,\n    });\n    setKcalPerPersons(props.selectedProduct.kCalPerPerson);\n    setSaturationIndex(props.selectedProduct.saturationIndex);\n    setProtein(props.selectedProduct.protein);\n    setCarbohydrates(props.selectedProduct.carbohydrate);\n    setFat(props.selectedProduct.fat);\n    setFiber(props.selectedProduct.fiber);\n    setMealTypes(props.selectedProduct.mealTypes);\n    setFoodTypes(props.selectedProduct.foodTypes);\n    setDiet(props.selectedProduct.diet);\n    setTips(props.selectedProduct.tips);\n    setNotes(props.selectedProduct.notes);\n    setName(props.selectedProduct.name);\n    setDescription(props.selectedProduct.description);\n    setPreprationTime(props.selectedProduct.prepTime);\n    setPersons(\n      props.selectedProduct.persons ? props.selectedProduct.persons : \"\"\n    );\n    setDiet(props.selectedProduct.diet);\n    setFoodTypes(props.selectedProduct.foodTypes);\n    setMealTypes(props.selectedProduct.mealTypes);\n    setFeaturedImage(props.selectedProduct.image);\n    setIngredients(props.selectedProduct.ingredients);\n    setCookingProcess(props.selectedProduct.cookingProcess);\n    setIsPublic(props.selectedProduct.isPublic);\n    setAllowComments(props.selectedProduct.allowComments);\n    setAllowReviews(props.selectedProduct.allowReviews);\n    props.selectedProduct.alternativeLanguage &&\n      setSelectedRecipe(props.selectedProduct.alternativeLanguage._id);\n    fetchData();\n    fetchAllRecipes();\n  }, []);\n\n  const ing = {\n    id: v4(),\n    name: \"\",\n    weight: \"\",\n    volume: \"\",\n    pieces: \"\",\n    method: \"\",\n    other: \"\",\n  };\n\n  const onFinish = async (values) => {\n    const d = {\n      name: name,\n      description,\n      image:\n        typeof featuredImage === \"object\" ? featuredImage.link : featuredImage,\n      prepTime: preprationTime,\n      persons: persons,\n      kCalPerPerson: kcalPerPersons,\n      saturationIndex: saturationIndex,\n      protein: protein,\n      carbohydrate: carbohydrates,\n      fat: fat,\n      fiber: fiber,\n      mealTypes: mealTypes,\n      foodTypes: foodType,\n      diet: diet,\n      ingredients: ingredients,\n      cookingProcess: cookingProcess,\n      notes: notes,\n      tips: tips,\n      isPublic: isPublic,\n      allowComments: allowComments,\n    };\n    if (selectedRecipe) {\n      d.alternativeLanguage = selectedRecipe;\n\n      await updateRecipe(\n        { alternativeLanguage: props.selectedProduct._id },\n        selectedRecipe\n      );\n    }\n    await updateRecipe(d, props.selectedProduct._id);\n  };\n\n  async function fetchAllRecipes() {\n    const res = await getAllUserRecipes(\n      language === \"english\" ? \"dutch\" : \"english\"\n    );\n    if (res && res.recipes) {\n      setAllRecipes(res.recipes);\n    }\n  }\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const changeIngredientValue = (key, ingredientId, value) => {\n    let i = [...ingredients];\n    i = i.map((ingre) => {\n      if (ingre._id === ingredientId) {\n        ingre[key] = value;\n      }\n      return ingre;\n    });\n    setIngredients(i);\n  };\n\n  const removeIngredientListItem = (item) => {\n    let i = [...ingredients];\n    i = i.filter((ingre) => ingre._id !== item._id);\n    setIngredients(i);\n    console.log(\"yas\", item, i);\n  };\n  const renderIngredientsList = (item) => (\n    <List.Item style={{ display: \"block\", textAlign: \"right\" }}>\n      <Button type=\"danger\" onClick={() => removeIngredientListItem(item)}>\n        Remove\n      </Button>\n\n      <div className=\"new-recipe-ingredient-listitem\">\n        <div>\n          <span className=\"font-paragraph-black\">Select Ingredient</span>\n          <Select\n            style={{ width: \"100%\" }}\n            value={item.name._id}\n            onChange={(e) => changeIngredientValue(\"name\", item._id, e)}\n            showSearch\n            onSearch={(v) => console.log(\"value\", v)}\n            filterOption={(input, option) => {\n              // console.log(\"value\", input,option);\n              return (\n                option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              );\n            }}\n          >\n            {allIngredients.map((i) => (\n              <Option value={i._id}>{i.name}</Option>\n            ))}\n          </Select>\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Weight (gm)</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Weight\"\n            value={item.weight}\n            onChange={(e) => {\n              console.log(item._id, e.target.value);\n              changeIngredientValue(\"weight\", item._id, e.target.value);\n            }}\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Volume (ml)</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Volume\"\n            value={item.volume}\n            onChange={(e) =>\n              changeIngredientValue(\"volume\", item._id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Pieces</span>\n          <Input\n            type=\"number\"\n            placeholder=\"Enter Pieces\"\n            value={item.pieces}\n            onChange={(e) =>\n              changeIngredientValue(\"pieces\", item._id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Method</span>\n          <Input\n            placeholder=\"Enter Method\"\n            value={item.method}\n            onChange={(e) =>\n              changeIngredientValue(\"method\", item._id, e.target.value)\n            }\n          />\n        </div>\n        <div>\n          <span className=\"font-paragraph-black\">Other</span>\n          <Input\n            placeholder=\"Enter Other\"\n            value={item.other}\n            onChange={(e) =>\n              changeIngredientValue(\"other\", item._id, e.target.value)\n            }\n          />\n        </div>\n      </div>\n    </List.Item>\n  );\n\n  const removeCookingProcessItem = (item, index) => {\n    let cp = [...cookingProcess];\n    cp.splice(index, 1);\n    setCookingProcess(cp);\n  };\n\n  const onchangeCookingProcess = (value, index) => {\n    let cp = [...cookingProcess];\n    cp[index] = value;\n    setCookingProcess(cp);\n  };\n  const renderCookingProcessList = (item, index) => (\n    <List.Item>\n      <span className=\"font-subheading-black\" style={{ marginRight: \"10px\" }}>\n        {index + 1}\n      </span>\n      <Input.TextArea\n        rows={2}\n        value={item}\n        onChange={(e) => onchangeCookingProcess(e.target.value, index)}\n        style={{ marginRight: \"10px\" }}\n      />\n      <Button\n        type=\"danger\"\n        onClick={() => removeCookingProcessItem(item, index)}\n      >\n        Remove\n      </Button>\n    </List.Item>\n  );\n\n  return (\n    <>\n      <Modal\n        visible={props.visible}\n        onCancel={() => {\n          props.setVisible(!props.visible);\n          props.getAllProducts();\n        }}\n        width=\"80vw\"\n        key={props.key}\n        footer={false}\n      >\n        {/* modal to create a new meal type  */}\n        <Modal\n          onCancel={() => setMealTypeModalVisible(false)}\n          footer={false}\n          visible={mealTypeModalVisible}\n        >\n          <p className=\"font-paragraph-white\">Enter Meal Type</p>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Input\n              value={newMealTypeName}\n              onChange={(e) => setNewMealTypeName(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              onClick={async () => {\n                if (newMealTypeName.length > 0) {\n                  await createMealType(\n                    `${newMealTypeName}___${language}`,\n                    language\n                  );\n                  // setEquipmentModal(false);\n                  fetchData();\n                }\n              }}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginLeft: \"5px\",\n              }}\n            >\n              Create\n            </Button>\n          </div>\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n            <span className=\"font-subheading-white\">All Meal Types</span>\n            <List\n              size=\"small\"\n              bordered\n              dataSource={allMealTypes}\n              renderItem={(cat) => (\n                <List.Item\n                  style={{\n                    backgroundColor: \"#fff\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <span>{cat.name}</span>\n                  <span>\n                    <Button\n                      onClick={async () => {\n                        await removeMealType(cat._id);\n                        fetchData();\n                      }}\n                      style={{ marginRight: \"10px\" }}\n                      type=\"primary\"\n                      danger\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        setSelectedItemForUpdateTitle(\"Update Meal Type\");\n                        setSelectedItemForUpdate(cat);\n                        setEditItemModelVisible(true);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </span>\n                </List.Item>\n              )}\n            />\n          </div>\n        </Modal>\n\n        {/* modal to create a new food type  */}\n        <Modal\n          onCancel={() => setFoodTypeModalVisible(false)}\n          footer={false}\n          visible={foodTypeModalVisible}\n        >\n          <p className=\"font-paragraph-white\">Enter Food Type</p>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Input\n              value={newFoodTypeName}\n              onChange={(e) => setNewFoodTypeName(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              onClick={async () => {\n                if (newFoodTypeName.length > 0) {\n                  await createFoodType(\n                    `${newFoodTypeName}___${language}`,\n                    language\n                  );\n                  // setEquipmentModal(false);\n                  fetchData();\n                }\n              }}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginLeft: \"5px\",\n              }}\n            >\n              Create\n            </Button>\n          </div>\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n            <span className=\"font-subheading-white\">All Food Types</span>\n            <List\n              size=\"small\"\n              bordered\n              dataSource={allFoodTypes}\n              renderItem={(cat) => (\n                <List.Item\n                  style={{\n                    backgroundColor: \"#fff\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <span>{cat.name}</span>\n\n                  <span>\n                    <Button\n                      onClick={async () => {\n                        await removeFoodType(cat._id);\n                        fetchData();\n                      }}\n                      style={{ marginRight: \"10px\" }}\n                      type=\"primary\"\n                      danger\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        setSelectedItemForUpdateTitle(\"Update Food Type\");\n                        setSelectedItemForUpdate(cat);\n                        setEditItemModelVisible(true);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </span>\n                </List.Item>\n              )}\n            />\n          </div>\n        </Modal>\n        {/* modal to create a new diet  */}\n        <Modal\n          onCancel={() => setDietModalVisible(false)}\n          footer={false}\n          visible={dietModalVisible}\n        >\n          <p className=\"font-paragraph-white\">Enter Diet</p>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Input\n              value={newDietName}\n              onChange={(e) => setNewDietName(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              onClick={async () => {\n                if (newDietName.length > 0) {\n                  await createDiet(newDietName);\n                  // setEquipmentModal(false);\n                  fetchData();\n                }\n              }}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginLeft: \"5px\",\n              }}\n            >\n              Create\n            </Button>\n          </div>\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n            <span className=\"font-subheading-white\">All Diet Types</span>\n            <List\n              size=\"small\"\n              bordered\n              dataSource={allDiets}\n              renderItem={(cat) => (\n                <List.Item\n                  style={{\n                    backgroundColor: \"#fff\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <span>{cat.name}</span>\n\n                  <span>\n                    <Button\n                      onClick={async () => {\n                        await removeDiet(cat._id);\n                        fetchData();\n                      }}\n                      style={{ marginRight: \"10px\" }}\n                      type=\"primary\"\n                      danger\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        setSelectedItemForUpdateTitle(\"Update Diet Type\");\n                        setSelectedItemForUpdate(cat);\n                        setEditItemModelVisible(true);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </span>\n                </List.Item>\n              )}\n            />\n          </div>\n        </Modal>\n        {/* modal to create a new ingredient  */}\n        <Modal\n          onCancel={() => setNewIngredientModlVisible(false)}\n          footer={false}\n          visible={newIngredientModalVisible}\n        >\n          <p className=\"font-paragraph-white\">Enter Ingredient</p>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Input\n              value={newIngredientName}\n              onChange={(e) => setNewIngredientName(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              onClick={async () => {\n                if (newIngredientName.length > 0) {\n                  await createIngredient(newIngredientName);\n                  // setEquipmentModal(false);\n                  fetchData();\n                }\n              }}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginLeft: \"5px\",\n              }}\n            >\n              Create\n            </Button>\n          </div>\n          <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n            <span className=\"font-subheading-white\">All Ingredients</span>\n            <List\n              size=\"small\"\n              bordered\n              dataSource={allIngredients}\n              renderItem={(cat) => (\n                <List.Item\n                  style={{\n                    backgroundColor: \"#fff\",\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <span>{cat.name}</span>\n\n                  <span>\n                    <Button\n                      onClick={async () => {\n                        await removeIngredient(cat._id);\n                        fetchData();\n                      }}\n                      style={{ marginRight: \"10px\" }}\n                      type=\"primary\"\n                      danger\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      onClick={() => {\n                        setSelectedItemForUpdateTitle(\"Update Ingredient\");\n                        setSelectedItemForUpdate(cat);\n                        setEditItemModelVisible(true);\n                      }}\n                    >\n                      Edit\n                    </Button>\n                  </span>\n                </List.Item>\n              )}\n            />\n          </div>\n        </Modal>\n        <EditTypeName\n          editCategoryNameModalVisible={editItemNameModalVisible}\n          setEditCategoryModelVisible={setEditItemModelVisible}\n          fethData={fetchData}\n          selectedForUpdate={selectedItemForUpdate}\n          titleName={selectedItemForUpdateTitle}\n        />\n\n        {/* media manager */}\n        <RemoteMediaManager\n          visible={mediaManagerVisible}\n          setVisible={setMediaManagerVisible}\n          type={mediaManagerType}\n          actions={mediaManagerActions}\n        />\n        <h2 className=\"font-heading-white\">Update Recipe</h2>\n\n        <div\n          className=\"admin-newuser-container\"\n          style={{ padding: \"50px 50px 50px 20px\" }}\n        >\n          <p>Language: {props.selectedProduct?.language}</p>\n          <div>\n            <span\n              style={{ marginRight: \"5px\" }}\n            >{`Select alternative language version`}</span>\n            <Select\n              style={{ width: \"500px\" }}\n              value={selectedRecipe}\n              onChange={(e) => setSelectedRecipe(e)}\n            >\n              <Option value={\"\"}>-</Option>\n              {allRecipes.map((r, i) => (\n                <Option key={i} value={r._id}>\n                  {r.name}\n                </Option>\n              ))}\n            </Select>\n          </div>\n          <Form\n            layout=\"vertical\"\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            form={form}\n          >\n            <Form.Item\n              label=\"Recipe Name\"\n              name=\"recipeName\"\n              rules={[{ required: true, message: \"Please input recipe name!\" }]}\n            >\n              <Input value={name} onChange={(e) => setName(e.target.value)} />\n            </Form.Item>\n            <Form.Item\n              label=\"Recipe Description\"\n              name=\"recipeDescription\"\n              rules={[{ required: true }]}\n            >\n              <TextEditor\n                key={JSON.stringify(description)}\n                value={description}\n                setValue={setDescription}\n              />\n              {/* <Input.TextArea\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              /> */}\n            </Form.Item>\n            <Form.Item label=\"Featured Image\" name=\"featuredImage\">\n              <Button\n                onClick={() => {\n                  setMediaManagerVisible(true);\n                  setMediaManagerType(\"images\");\n                  setMediaManagerActions([featuredImage, setFeaturedImage]);\n                }}\n              >\n                Upload File\n              </Button>\n              {typeof featuredImage === \"object\" ? (\n                <div style={{ display: \"flex\" }}>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginRight: \"15px\",\n                      marginTop: \"10px\",\n                    }}\n                  >\n                    {console.log(\n                      \"test\",\n                      `${\n                        typeof featuredImage === \"object\"\n                          ? featuredImage.link\n                          : featuredImage\n                      }`\n                    )}\n                    <img\n                      alt=\"\"\n                      src={`${\n                        typeof featuredImage === \"object\"\n                          ? featuredImage.link\n                          : featuredImage\n                      }`}\n                      height=\"100px\"\n                    />\n                    <span>\n                      {featuredImage.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setFeaturedImage()}\n                      />\n                    </span>\n                  </div>\n                </div>\n              ) : (\n                <div style={{ display: \"flex\" }}>\n                  {console.log(\n                    \"test\",\n                    `${\n                      typeof featuredImage === \"object\"\n                        ? featuredImage.link\n                        : featuredImage\n                    }`\n                  )}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      marginRight: \"15px\",\n                      marginTop: \"10px\",\n                    }}\n                  >\n                    <img alt=\"\" src={`${featuredImage}`} height=\"100px\" />\n                    <span>\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setFeaturedImage()}\n                      />\n                    </span>\n                  </div>\n                </div>\n              )}\n            </Form.Item>\n            <Form layout=\"vertical\" form={form}>\n              <div className=\"new-recipe-information-inputs-container\">\n                <Form.Item\n                  label=\"Prepration Time\"\n                  name=\"preprationTime\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: \"Please input prepration time!\",\n                  //   },\n                  // ]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={preprationTime}\n                    onChange={(e) => setPreprationTime(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item label=\"Persons\" name=\"persons\" type=\"number\">\n                  <InputNumber\n                    value={persons}\n                    onChange={(e) => setPersons(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Kcal per person\"\n                  name=\"kcalPerPerson\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: \"Please input number of calories per person!\",\n                  //   },\n                  // ]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={kcalPerPersons}\n                    onChange={(e) => setKcalPerPersons(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Saturation Index\"\n                  name=\"saturationIndex\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: \"Please input saturation index!\",\n                  //   },\n                  // ]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={saturationIndex}\n                    onChange={(e) => setSaturationIndex(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Protein\"\n                  name=\"protein\"\n                  // rules={[{ required: true, message: \"Please input protein!\" }]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={protein}\n                    onChange={(e) => setProtein(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Carbohydrates\"\n                  name=\"carbohydrates\"\n                  // rules={[\n                  //   { required: true, message: \"Please input carbohydrates!\" },\n                  // ]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={carbohydrates}\n                    onChange={(e) => setCarbohydrates(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Fat\"\n                  name=\"fat\"\n                  // rules={[{ required: true, message: \"Please input fats!\" }]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={fat}\n                    onChange={(e) => setFat(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n                <Form.Item\n                  label=\"Fiber\"\n                  name=\"fiber\"\n                  // rules={[{ required: true, message: \"Please input fiber!\" }]}\n                  type=\"number\"\n                >\n                  <InputNumber\n                    value={fiber}\n                    onChange={(e) => setFiber(e)}\n                    style={{ width: \"100%\" }}\n                  />\n                </Form.Item>\n              </div>\n            </Form>\n            <Form.Item label=\"Meal Types\" name=\"mealTypes\">\n              <Select\n                mode=\"multiple\"\n                allowClear\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                value={mealTypes}\n                onChange={(e) => setMealTypes(e)}\n              >\n                {allMealTypes.map((meal) => (\n                  <Option value={meal._id}>{meal.name}</Option>\n                ))}\n              </Select>\n              <Button\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  border: \"none\",\n                  color: \"white\",\n                  float: \"right\",\n                  marginTop: \"5px\",\n                }}\n                onClick={() => setMealTypeModalVisible(true)}\n              >\n                Manage Meal Type\n              </Button>\n            </Form.Item>\n            <Form.Item label=\"Food Types\" name=\"foodTypes\">\n              <Select\n                mode=\"multiple\"\n                allowClear\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                value={foodType}\n                onChange={(e) => setFoodTypes(e)}\n              >\n                {allFoodTypes.map((food) => (\n                  <Option value={food._id}>{food.name}</Option>\n                ))}\n              </Select>\n              <Button\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  border: \"none\",\n                  color: \"white\",\n                  float: \"right\",\n                  marginTop: \"5px\",\n                }}\n                onClick={() => setFoodTypeModalVisible(true)}\n              >\n                Manage Food Type\n              </Button>\n            </Form.Item>\n            <Form.Item label=\"Diet\" name=\"diet\">\n              <Select\n                mode=\"multiple\"\n                allowClear\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                value={diet}\n                onChange={(e) => setDiet(e)}\n              >\n                {allDiets.map((d) => (\n                  <Option value={d._id}>{d.name}</Option>\n                ))}\n              </Select>\n              <Button\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  border: \"none\",\n                  color: \"white\",\n                  float: \"right\",\n                  marginTop: \"5px\",\n                }}\n                onClick={() => setDietModalVisible(true)}\n              >\n                Manage Diet\n              </Button>\n            </Form.Item>\n            {/* ingredients */}\n            {\n              <div className=\"new-recipe-ingredients-list-container\">\n                <List\n                  size=\"small\"\n                  header={\n                    <div className=\"new-recipe-ingredients-list-container-header\">\n                      <span className=\"font-heading-black\">\n                        Add Ingredients\n                      </span>\n                      <div>\n                        <Button\n                          className=\"hover-orange\"\n                          onClick={() => setIngredients([...ingredients, ing])}\n                        >\n                          Add Ingredient\n                        </Button>\n                        <Button\n                          className=\"hover-orange\"\n                          onClick={() => setNewIngredientModlVisible(true)}\n                        >\n                          Manage Ingredients\n                        </Button>\n                      </div>\n                    </div>\n                  }\n                  bordered\n                  dataSource={ingredients}\n                  renderItem={renderIngredientsList}\n                />\n              </div>\n            }\n            {/* Cooking process */}\n            {\n              <div\n                className=\"new-recipe-ingredients-list-container\"\n                style={{ marginTop: \"30px\" }}\n              >\n                <List\n                  size=\"small\"\n                  header={\n                    <div className=\"new-recipe-ingredients-list-container-header\">\n                      <span className=\"font-heading-black\">\n                        Cooking Process\n                      </span>\n                      <div>\n                        <Button\n                          className=\"hover-orange\"\n                          onClick={() =>\n                            setCookingProcess([...cookingProcess, \"\"])\n                          }\n                        >\n                          Add Step\n                        </Button>\n                      </div>\n                    </div>\n                  }\n                  bordered\n                  dataSource={cookingProcess}\n                  renderItem={renderCookingProcessList}\n                />\n              </div>\n            }\n\n            <Form.Item label=\"Notes\" name=\"notes\" style={{ marginTop: \"30px\" }}>\n              {/* <Input.TextArea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n              /> */}\n              <TextEditor\n                key={JSON.stringify(notes)}\n                value={notes}\n                setValue={setNotes}\n              />\n            </Form.Item>\n            <Form.Item label=\"Tips\" name=\"tips\">\n              {/* <Input.TextArea\n                value={tips}\n                onChange={(e) => setTips(e.target.value)}\n              /> */}\n              <TextEditor\n                key={JSON.stringify(tips)}\n                value={tips}\n                setValue={setTips}\n              />\n            </Form.Item>\n            {userInfo.role === \"admin\" && (\n              <>\n                {\" \"}\n                <Form.Item>\n                  <Checkbox\n                    checked={isPublic}\n                    onChange={(e) => setIsPublic(e.target.checked)}\n                  >\n                    Make Public\n                  </Checkbox>\n                </Form.Item>\n                <Form.Item>\n                  <Checkbox\n                    checked={allowReviews}\n                    onChange={(e) => setAllowReviews(e.target.checked)}\n                  >\n                    Allow Reviews\n                  </Checkbox>\n                </Form.Item>\n                <Form.Item>\n                  <Checkbox\n                    checked={allowComments}\n                    onChange={(e) => setAllowComments(e.target.checked)}\n                  >\n                    Allow Comments\n                  </Checkbox>\n                </Form.Item>\n              </>\n            )}\n            {/* footer */}\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  borderColor: \"var(--color-orange)\",\n                  marginTop: \"10px\",\n                }}\n                onClick={onFinish}\n              >\n                Update\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default UpdateRecipe;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\createChallenge\\goals.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeAdditionalTab.js",["1021","1022","1023","1024","1025"],"import React, { useState, useContext } from \"react\";\nimport { Select, Input, Button, Checkbox, Upload, List, message } from \"antd\";\nimport { v4 } from \"uuid\";\nimport { UploadOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { userInfoContext } from \"../../../contexts/UserStore\";\nimport { T } from \"../../Translate\";\n\nconst Option = Select.Option;\n\nfunction NewChallengeAdditionalTab({\n  results,\n  setResults,\n  allProducts,\n  setAllProducts,\n  makePublic,\n  setMakePublic,\n  allowComments,\n  setAllowComments,\n  allowReviews,\n  setAllowReviews,\n  additionalProducts,\n  setAdditionalProducts,\n  informationList,\n  setInformationList,\n  createChallenge,\n  update,\n  updateChallenge,\n  userCreatePost,\n  setUserCreatePost,\n}) {\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const userInfo = useContext(userInfoContext)[0];\n\n  const [loading, setLoading] = useState(false);\n\n  var info = {\n    id: v4(),\n    icon: \"\",\n    thumbnailBase64: \"\",\n    text: \"\",\n  };\n\n  const handleInfoTextChange = (value, id) => {\n    let w = [...informationList];\n    w = w.map((i) => {\n      if (i.id === id) {\n        return {\n          ...i,\n          text: value,\n        };\n      }\n      return i;\n    });\n    setInformationList(w);\n  };\n  const addInfoToList = () => {\n    setInformationList((prev) => [...prev, info]);\n  };\n  const uploadIcon = (id, file) => {\n    var infoList = informationList.map((i) => {\n      if (i.id === id) {\n        return {\n          ...i,\n          file: file,\n        };\n      }\n      return i;\n    });\n    console.log(infoList);\n    setInformationList(infoList);\n  };\n\n  const removeListItem = (id) => {\n    var n = informationList.filter((i) => i.id !== id);\n    setInformationList(n);\n  };\n  return (\n    <div>\n      <div>\n        <RemoteMediaManager\n          visible={mediaManagerVisible}\n          setVisible={setMediaManagerVisible}\n          type={mediaManagerType}\n          actions={mediaManagerActions}\n        />\n        <p className=\"font-subheading-black\">\n          <T>adminDashboard.challenges.sp</T>\n        </p>\n        <Select\n          mode=\"multiple\"\n          showSearch\n          style={{ width: \"100%\" }}\n          optionFilterProp=\"children\"\n          value={additionalProducts}\n          onChange={(e) => setAdditionalProducts(e)}\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {allProducts.map((m, i) => (\n            <Option value={m._id}>{m.name}</Option>\n          ))}\n        </Select>\n      </div>\n      <div>\n        <p className=\"font-subheading-black\">Results</p>\n        <Input.TextArea\n          className=\"font-paragraph-black\"\n          value={results}\n          onChange={(e) => setResults(e.target.value)}\n        />\n      </div>\n      <div>\n        <p className=\"font-subheading-black\">\n          <T>adminDashboard.challenges.il</T>\n        </p>\n        {/* <Input.TextArea\n          maxLength={200}\n          showCount\n          className=\"font-paragraph-black\"\n          value={info}\n          onChange={(e) => setInfo(e.target.value)}\n        /> */}\n        <List\n          header={\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <Button onClick={addInfoToList}>\n                <T>adminDashboard.challenges.af</T>\n              </Button>\n            </div>\n          }\n          footer={false}\n          bordered\n          dataSource={informationList}\n          renderItem={(info) => (\n            <List.Item\n              key={info.id}\n              style={{\n                display: \"grid\",\n                gridTemplateColumns: \"0.1fr 1fr 1fr\",\n                gridGap: \"20px\",\n              }}\n            >\n              <Button type=\"danger\" onClick={() => removeListItem(info.id)}>\n                X\n              </Button>\n              <Input.TextArea\n                rows={4}\n                placeholder=\"Input Information\"\n                value={info.text}\n                onChange={(e) => handleInfoTextChange(e.target.value, info.id)}\n              />\n              <div>\n                {/* <Upload\n                  showUploadList={false}\n                  beforeUpload={beforeUpload}\n                  customRequest={dummyRequest}\n                  onChange={(e) => handleChange(e, info.id)}\n                  style={{ width: \"100px\" }}\n                > */}\n                {info.file ? (\n                  <img\n                    src={`${info.file.link}`}\n                    alt=\"\"\n                    height=\"100px\"\n                    width=\"120px\"\n                  />\n                ) : (\n                  <>\n                    <p\n                      className=\"font-paragraph-white\"\n                      style={{\n                        color: \"var(--color-orange)\",\n                        fontWeight: \"600\",\n                      }}\n                    >\n                      Upload Icon\n                    </p>\n                    <Button\n                      className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n                      style={{ marginTop: 0 }}\n                      onClick={() => {\n                        setMediaManagerVisible(true);\n                        setMediaManagerType(\"images\");\n                        setMediaManagerActions([\"\", uploadIcon, info.id]);\n                      }}\n                      icon={<UploadOutlined />}\n                    >\n                      Click to Upload\n                    </Button>\n                  </>\n                )}\n\n                {/* </Upload> */}\n              </div>\n            </List.Item>\n          )}\n        />\n      </div>\n      {userInfo.role === \"admin\" && (\n        <>\n          <div>\n            <Checkbox\n              checked={allowComments}\n              onChange={(e) => setAllowComments(e.target.checked)}\n              className=\"font-paragraph-black\"\n            >\n              <T>adminDashboard.challenges.allowcb</T>\n            </Checkbox>\n          </div>\n          <div>\n            <Checkbox\n              checked={allowReviews}\n              onChange={(e) => setAllowReviews(e.target.checked)}\n              className=\"font-paragraph-black\"\n            >\n              <T>adminDashboard.challenges.allowrv</T>\n            </Checkbox>\n          </div>\n          <div>\n            <Checkbox\n              checked={makePublic}\n              onChange={(e) => setMakePublic(e.target.checked)}\n              className=\"font-paragraph-black\"\n            >\n              <T>adminDashboard.challenges.mp</T>\n            </Checkbox>\n          </div>\n          {!update && (\n            <div>\n              <Checkbox\n                checked={userCreatePost}\n                onChange={(e) => setUserCreatePost(e.target.checked)}\n                className=\"font-paragraph-black\"\n              >\n                Create a post\n              </Checkbox>\n            </div>\n          )}\n        </>\n      )}\n      {update ? (\n        <Button\n          className=\"font-paragraph-white\"\n          style={{\n            backgroundColor: \"var(--color-orange)\",\n            border: \"none\",\n            marginTop: \"20px\",\n          }}\n          onClick={updateChallenge}\n        >\n          Update Challenge\n        </Button>\n      ) : (\n        <Button\n          className=\"font-paragraph-white\"\n          style={{\n            backgroundColor: \"var(--color-orange)\",\n            border: \"none\",\n            marginTop: \"20px\",\n          }}\n          onClick={createChallenge}\n        >\n          <T>adminDashboard.challenges.createAC</T>\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default NewChallengeAdditionalTab;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\RecipeManager\\EditTypeName.js",["1026"],"import React, { useContext, useState } from \"react\";\nimport { Button, Input, Modal } from \"antd\";\nimport { updateBlogCategory } from \"../../../services/blogs\";\nimport {\n  updateDiet,\n  updateFoodType,\n  updateIngredient,\n  updateMealType,\n} from \"../../../services/recipes\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nfunction EditTypeName({\n  editCategoryNameModalVisible,\n  setEditCategoryModelVisible,\n  selectedForUpdate,\n  fethData,\n  titleName,\n}) {\n  const { language } = useContext(LanguageContext);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  React.useEffect(() => {\n    if (selectedForUpdate) {\n      setNewCategoryName(selectedForUpdate.name);\n    }\n  }, [selectedForUpdate]);\n\n  const updateItem = async () => {\n    if (newCategoryName.length > 0) {\n      if (titleName === \"Update Meal Type\") {\n        await updateMealType(\n          `${newCategoryName}___${language}`,\n          selectedForUpdate._id\n        );\n      }\n      if (titleName === \"Update Food Type\") {\n        await updateFoodType(\n          `${newCategoryName}___${language}`,\n          selectedForUpdate._id\n        );\n      }\n      if (titleName === \"Update Diet Type\") {\n        await updateDiet(newCategoryName, selectedForUpdate._id);\n      }\n\n      if (titleName === \"Update Ingredient\") {\n        await updateIngredient(newCategoryName, selectedForUpdate._id);\n      }\n      setEditCategoryModelVisible(false);\n      fethData();\n    }\n  };\n\n  return (\n    <Modal\n      onCancel={() => setEditCategoryModelVisible(false)}\n      footer={false}\n      visible={editCategoryNameModalVisible}\n    >\n      <p className=\"font-paragraph-white\">{titleName}</p>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Input\n          value={newCategoryName}\n          onChange={(e) => setNewCategoryName(e.target.value)}\n        />\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          onClick={updateItem}\n          style={{\n            backgroundColor: \"var(--color-orange)\",\n            borderColor: \"var(--color-orange)\",\n            marginLeft: \"5px\",\n          }}\n        >\n          Update\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default EditTypeName;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ExerciseManager\\UpdateExercise.js",["1027"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Modal, Select } from \"antd\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { updateExercise } from \"../../../services/createChallenge/main\";\n\nfunction UpdateExercise({\n  show,\n  setShow,\n  exerciseValues,\n  fetchExercises,\n  allTrainers,\n}) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [videoLink, setVideoLink] = useState(\"\");\n  const [voiceOverLink, setVoiceOverLink] = useState(\"\");\n  const [trainer, setTrainer] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"trainer\", exerciseValues.trainer);\n    form.setFieldsValue({\n      title: exerciseValues.title,\n      break: exerciseValues.break,\n      exerciseLength: exerciseValues.exerciseLength,\n      exerciseGroupName: exerciseValues.exerciseGroupName,\n      description: exerciseValues.description,\n      trainer: exerciseValues.trainer,\n    });\n    setVideoLink({\n      link: exerciseValues.videoURL,\n      name: exerciseValues.videoURL,\n    });\n    setTrainer(exerciseValues.trainer);\n    setVoiceOverLink({\n      link: exerciseValues.voiceOverLink,\n      name: exerciseValues.voiceOverLink,\n    });\n    console.log(\"nrere\", exerciseValues);\n  }, []);\n\n  const onFinish = async (values) => {\n    if (videoLink && trainer) {\n      const data = {\n        videoURL: videoLink.link,\n        voiceOverLink: voiceOverLink.link,\n        trainer: trainer,\n        ...values,\n      };\n      const res = await updateExercise(data, exerciseValues._id);\n      fetchExercises();\n      setShow(false);\n      console.log(\"values\", res);\n    } else {\n      alert(\"Please add a video link of a exercise\");\n    }\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <Modal\n      visible={show}\n      onCancel={() => setShow(false)}\n      footer={false}\n      width=\"70%\"\n    >\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <h2 className=\"font-heading-white\">Update Exercise</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Exercise Title\"\n            name=\"title\"\n            rules={[\n              { required: true, message: \"Please input exercise title!\" },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Exercise Video\" required=\"true\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"videos\");\n                setMediaManagerActions([videoLink, setVideoLink]);\n              }}\n            >\n              Upload Video\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {videoLink && videoLink.name}\n            </div>\n          </Form.Item>\n          <Form.Item label=\"Exercise Description\" name=\"description\">\n            <Input />\n          </Form.Item>\n          <Form.Item label=\"Trainer\" required=\"true\">\n            {/* {console.log(\"trainers\", trainers)} */}\n            <Select\n              allowClear\n              style={{ width: \"100%\" }}\n              placeholder=\"Please select\"\n              value={trainer ? trainer._id : \"\"}\n              onChange={(e) => setTrainer(e)}\n            >\n              {allTrainers.map((trainer) => (\n                <Select.Option value={trainer._id}>\n                  {trainer.firstName} {trainer.lastName}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Voiceover Link\">\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"voiceOvers\");\n                setMediaManagerActions([voiceOverLink, setVoiceOverLink]);\n              }}\n            >\n              Upload Voiceover\n            </Button>\n            <div\n              className=\"font-paragraph-white\"\n              style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n            >\n              {voiceOverLink && voiceOverLink.name}\n            </div>\n          </Form.Item>\n\n          {/* footer */}\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n                marginTop: \"10px\",\n              }}\n            >\n              Update Exercise\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UpdateExercise;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\shop.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeMusicTab.js",["1028","1029"],"import React, { useState } from \"react\";\nimport { List, Divider, Input, Button, Upload, message } from \"antd\";\nimport { v4 } from \"uuid\";\nimport { DeleteOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\n\nfunction NewChallengeMusicTab({ musics, setMusics, update }) {\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n\n  var music = {\n    musicId: v4(),\n    name: \"\",\n    file: \"\",\n  };\n\n  const handleMusicNameChange = (value, id) => {\n    let w = [...musics];\n    w = w.map((i) => {\n      if (i.musicId === id) {\n        return {\n          ...i,\n          name: value,\n        };\n      }\n      return i;\n    });\n    setMusics(w);\n  };\n  const addMusicFile = () => {\n    setMusics((prev) => [...prev, music]);\n  };\n  const dummyNonRenderedWorkoutExerciseAudio = (id, file) => {\n    let w = [...musics];\n    w = w.map((i) => {\n      if (i.musicId === id) {\n        return {\n          ...i,\n          file: file,\n        };\n      }\n      return i;\n    });\n    setMusics(w);\n  };\n\n  const musicFileDelete = (id) => {\n    let w = [...musics];\n    w = w.map((i) => {\n      if (i.musicId === id) {\n        return {\n          ...i,\n          file: \"\",\n        };\n      }\n      return i;\n    });\n    setMusics(w);\n  };\n\n  return (\n    <div>\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <Divider orientation=\"left\">Create Music Playlist</Divider>\n      <List\n        header={\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <div className=\"font-subheading-black\">Music Files</div>{\" \"}\n            <Button onClick={addMusicFile}>Add Music</Button>\n          </div>\n        }\n        footer={false}\n        bordered\n        dataSource={musics}\n        renderItem={(music) => (\n          <List.Item\n            key={music.musicId ? music.musicId : music._id}\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr 1fr\",\n              gridGap: \"20px\",\n            }}\n          >\n            <Input\n              placeholder=\"Input Music Name\"\n              value={music.name}\n              onChange={(e) =>\n                handleMusicNameChange(e.target.value, music.musicId)\n              }\n            />\n            <div>\n              <p\n                className=\"font-paragraph-white\"\n                style={{\n                  color: \"var(--color-orange)\",\n                  fontWeight: \"600\",\n                }}\n              >\n                Upload Music File\n              </p>\n              {/* <Upload\n                multiple={false}\n                showUploadList={false}\n                beforeUpload={checkForAudio}\n                customRequest={(j) =>\n                  dummyNonRenderedWorkoutExerciseAudio(j, music.musicId)\n                }\n              > */}\n              {console.log(\"musics\", musics)}\n              {typeof music === \"object\" && !music.file && (\n                <Button\n                  className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n                  style={{ marginTop: 0 }}\n                  icon={<UploadOutlined />}\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"musics\");\n                    setMediaManagerActions([\n                      \"\",\n                      dummyNonRenderedWorkoutExerciseAudio,\n                      music.musicId,\n                    ]);\n                  }}\n                >\n                  Click to Upload\n                </Button>\n              )}\n              {/* </Upload> */}\n              <div className=\"font-paragraph-black\">\n                {music.file && music.file.name}{\" \"}\n                {music.file && (\n                  <span\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => musicFileDelete(music.musicId)}\n                  >\n                    <DeleteOutlined />\n                  </span>\n                )}\n              </div>\n            </div>\n          </List.Item>\n        )}\n      />\n    </div>\n  );\n}\n\nexport default NewChallengeMusicTab;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutTab.js",["1030","1031","1032","1033","1034"],"import React, { useState, useRef, useEffect, useContext } from \"react\";\nimport {\n  Collapse,\n  Button,\n  Input,\n  Modal,\n  message,\n  Select,\n  Checkbox,\n  List,\n} from \"antd\";\nimport { v4 } from \"uuid\";\nimport {\n  UploadOutlined,\n  DeleteOutlined,\n  PlusOutlined,\n  ArrowsAltOutlined,\n  ShrinkOutlined,\n  CloseSquareOutlined,\n} from \"@ant-design/icons\";\n// panels\nimport CustomWeekPanel from \"./NewChallengeWorkoutCollapse/CustomWeekPanel\";\nimport {\n  createChallengeEquipment,\n  getAllChallengeEquipments,\n  deleteChallengeEquipment,\n} from \"../../../services/createChallenge/equipments\";\nimport {\n  getAllProdcuts,\n  removeProduct,\n  createProducts,\n} from \"../../../services/shop\";\nimport {\n  updateWorkoutOnBackend,\n  createWorkout,\n  getAllExercises,\n} from \"../../../services/createChallenge/main\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport EditTypeName from \"./EditTypeName\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\n\nconst { Panel } = Collapse;\nconst { Option } = Select;\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getListStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n});\n\nfunction NewChallengeWorkoutTab({\n  weeksToBeUpdated,\n  weeks,\n  setWeeks,\n  addWorkoutModalVisible,\n  setAddWorkoutModalVisible,\n  workoutModalFullscreen,\n  setWorkoutModalFullscreen,\n  allProducts,\n  setAllProducts,\n  setProducts,\n  allEquipments,\n  setAllEquipments,\n  workoutToUpdate,\n  setWorkoutToUpdate,\n  currentStep,\n  setCurrentStep,\n  currentWeek,\n  setCurrentWeek,\n  workoutTitle,\n  setWorkoutTile,\n  workoutSubtitle,\n  setWorkoutSubtile,\n  groupName,\n  setGroupName,\n  infoTitle,\n  setInfoTile,\n  infoFile,\n  setInfoFile,\n  workoutIntroVideoFile,\n  setWorkoutIntroVideoFile,\n  workoutIntroVideoLength,\n  setWorkoutIntroVideoLength,\n  relatedProducts,\n  setRelatedProducts,\n  relatedEquipments,\n  setRelatedEquipments,\n  renderWorkout,\n  setRenderWorkout,\n  renderedWorkoutExercises,\n  setRenderWorkoutExercises,\n  nonRenderedWorkoutExercises,\n  setNonRenderedWorkoutExercises,\n  update,\n  setWorkoutIdsThatNeedToBeUpdated,\n  workoutIdsThatNeedToBeUpdated,\n  trainers,\n}) {\n  // all exercises\n  const [allExercises, setAllExercises] = useState([]);\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  const [equipmentModal, setEquipmentModal] = useState(false);\n  const [newEquipmentName, setNewEquipmentName] = useState(\"\");\n\n  const workoutModalRef = useRef(null);\n  const { language } = useContext(LanguageContext);\n\n  // for updating equpments\n\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n\n  useEffect(() => {\n    // const responses = console.log(\"need updateing\", update);\n    // console.log(\"data\", weeksToBeUpdated);\n    fetchExercises();\n  }, [trainers]);\n\n  const fetchExercises = async () => {\n    const allExe = await getAllExercises(language);\n    const g = allExe.exercises.map((e) => ({ ...e, trainer: e.trainer._id }));\n    var e = trainers ? g.filter((f) => trainers.includes(f.trainer)) : g;\n    console.log(\"eee\", e, allExe, trainers);\n    setAllExercises(e);\n  };\n\n  const nonRenderedWorkoutExercise = {\n    exerciseId: v4(),\n    exerciseName: \"\",\n    exerciseVideo: \"\",\n    videoLength: \"\",\n    voiceOverFile: \"\",\n    exerciseGroupName: \"\",\n  };\n\n  const newWeek = {\n    id: Math.floor(Math.random() * 100),\n    weekId: v4(),\n    weekTitle: \"\",\n    weekSubtitle: \"\",\n    workouts: [],\n  };\n\n  const fethData = async () => {\n    const data = await getAllChallengeEquipments(language);\n    const products = await getAllProdcuts(language);\n    setAllProducts(products.products);\n    setAllEquipments(data.equipments);\n  };\n\n  const removeItem = async (id) => {\n    await deleteChallengeEquipment(id);\n    fethData();\n  };\n\n  const rmProduct = async (id) => {\n    await removeProduct(id);\n    fethData();\n  };\n  const handleWeekNameChange = (id, value) => {\n    let w = [...weeks];\n    w = w.map((i) => {\n      if (i.weekId === id) {\n        i.weekTitle = value;\n      }\n      return i;\n    });\n    setWeeks(w);\n  };\n\n  const handleWeekSubtitleChange = (id, value) => {\n    let w = [...weeks];\n    w = w.map((i) => {\n      if (i.weekId === id) {\n        i.weekSubtitle = value;\n      }\n      return i;\n    });\n    setWeeks(w);\n  };\n\n  const checkForWorkout = () => {\n    let q = weeks.map((week) => week.workouts).flat();\n    q = q.map((j) => j.workoutId);\n    return q.includes(workoutToUpdate);\n  };\n\n  const updateWorkoutOnTheBackend = async (workout, type, myWeekId) => {\n    console.log(\"yelloe mello\", workout, type);\n    // return;\n    if (type === \"update\") {\n      const w = workout.map((g) => ({\n        exercises: g.renderWorkout\n          ? g.exercises.map((e) => ({\n              _id: e._id,\n              exerciseId: e.exerciseId,\n              exerciseLength: e.videoLength,\n              break: e.breakAfterExercise,\n              groupName: e.exerciseGroupName,\n            }))\n          : g.exercises.map((e) => ({\n              renderedWorkoutExerciseName: e.exerciseName,\n              renderedWorkoutExerciseVideo: e.exerciseVideo,\n            })),\n        isRendered: g.renderWorkout,\n        introVideoLink: g.workoutIntroVideoFile.link,\n        introVideoLength: g.workoutIntroVideoLength,\n        title: g.workoutTitle,\n        subtitle: g.workoutSubtitle,\n        relatedEquipments: g.relatedEquipments,\n        relatedProducts: g.relatedProducts,\n        _id: g._id,\n        infoFile: g.infoFile ? g.infoFile.link : \"\",\n        infotitle: g.infoTitle,\n      }));\n      const res = await updateWorkoutOnBackend(w);\n      console.log(\"update workout\", res);\n    }\n    if (type === \"new\") {\n      const w = {\n        isRendered: workout.renderWorkout,\n        introVideoLink: workout.workoutIntroVideoFile\n          ? workout.workoutIntroVideoFile.link\n          : \"\",\n        introVideoLength: workout.workoutIntroVideoLength,\n        title: workout.workoutTitle,\n        subtitle: workout.workoutSubtitle,\n        equipment: workout.relatedEquipments,\n        relatedProducts: workout.relatedProducts,\n        infoFile: workout.infoFile ? workout.infoFile.link : \"\",\n        infotitle: workout.infoTitle,\n        exercises: workout.renderWorkout\n          ? workout.exercises.map((e) => ({\n              exerciseId: e.exerciseId,\n              exerciseLength: e.videoLength,\n              break: e.breakAfterExercise,\n              groupName: e.exerciseGroupName,\n            }))\n          : workout.exercises.map((e) => ({\n              renderedWorkoutExerciseName: e.exerciseName,\n              renderedWorkoutExerciseVideo: e.exerciseVideo,\n            })),\n      };\n      const res = await createWorkout(w);\n      if (res && res.data) {\n        setWorkoutIdsThatNeedToBeUpdated([\n          ...workoutIdsThatNeedToBeUpdated,\n          { weelId: myWeekId ? myWeekId : currentWeek, workout: res.data },\n        ]);\n      }\n    }\n    console.log(\"here\");\n  };\n\n  const addWorkoutToWeek = () => {\n    console.log(\"please work ayo\", workoutTitle);\n    if (workoutTitle.length > 0) {\n      // console.log(\"update\", update);\n      // check for update and update return if found\n      let flag = checkForWorkout();\n      console.log(flag);\n      // return;\n      let w = [];\n      if (flag) {\n        let q = [...weeks];\n        let weekThatContainWorkout = q.filter(\n          (week) => week.weekId === currentWeek\n        )[0];\n        weekThatContainWorkout = weekThatContainWorkout.workouts.map(\n          (workout) => {\n            if (workout.workoutId === workoutToUpdate) {\n              return {\n                ...workout,\n                workoutTitle,\n                workoutSubtitle,\n                groupName,\n                infoTitle,\n                infoFile,\n                // points,\n                workoutIntroVideoFile,\n                workoutIntroVideoLength,\n                relatedProducts,\n                relatedEquipments,\n                renderWorkout,\n                exercises: renderWorkout\n                  ? nonRenderedWorkoutExercises\n                  : renderedWorkoutExercises,\n              };\n            }\n            return workout;\n          }\n        );\n        w = q.map((week) => {\n          if (week.weekId === currentWeek) {\n            return {\n              ...week,\n              workouts: weekThatContainWorkout,\n            };\n          }\n          return week;\n        });\n        console.log(\"here\", update);\n        //this function works only when user is in update mode\n        update && updateWorkoutOnTheBackend(weekThatContainWorkout, \"update\");\n      } else {\n        w = weeks.map((week) => {\n          // add a new workout\n          if (week.weekId === currentWeek) {\n            return {\n              ...week,\n              workouts: [\n                ...week.workouts,\n                {\n                  workoutId: v4(),\n                  workoutTitle,\n                  workoutSubtitle,\n                  groupName,\n                  infoTitle,\n                  infoFile,\n                  // points,\n                  workoutIntroVideoFile,\n                  workoutIntroVideoLength,\n                  relatedProducts,\n                  relatedEquipments,\n                  renderWorkout,\n                  exercises: renderWorkout\n                    ? nonRenderedWorkoutExercises\n                    : renderedWorkoutExercises,\n                },\n              ],\n            };\n          }\n          return week;\n        });\n        console.log(\"here\", update);\n        update &&\n          updateWorkoutOnTheBackend(\n            {\n              workoutId: v4(),\n              workoutTitle,\n              workoutSubtitle,\n              groupName,\n              infoTitle,\n              infoFile,\n              // points,\n              workoutIntroVideoFile,\n              workoutIntroVideoLength,\n              relatedProducts,\n              relatedEquipments,\n              renderWorkout,\n              exercises: renderWorkout\n                ? nonRenderedWorkoutExercises\n                : renderedWorkoutExercises,\n            },\n            \"new\"\n          );\n      }\n      setWorkoutToUpdate(\"\");\n      setCurrentStep(0);\n      setCurrentWeek(\"\");\n      setAddWorkoutModalVisible(false);\n      setWorkoutTile(\"\");\n      setInfoTile(\"\");\n      setInfoFile(\"\");\n      // setPoints(0);\n      setWorkoutIntroVideoFile(\"\");\n      setRelatedProducts([]);\n      setRelatedEquipments([]);\n      setRenderWorkout(false);\n      setRenderWorkoutExercises([\n        {\n          exerciseId: v4(),\n          exerciseName: \"\",\n          exerciseVideo: \"\",\n        },\n      ]);\n      setNonRenderedWorkoutExercises([\n        {\n          exerciseId: v4(),\n          exerciseName: \"\",\n          exerciseVideo: \"\",\n          videoLength: \"\",\n          voiceOverFile: \"\",\n          breakAfterExercise: \"\",\n          exerciseGroupName: \"\",\n        },\n      ]);\n      setWeeks(w);\n    } else {\n      message.error(\"Please enter workout name!\");\n    }\n  };\n\n  const createWorkoutStep1 = () => (\n    <div\n      className=\"new-workout-creator-container-1\"\n      style={{ height: workoutModalFullscreen ? \"60vh\" : \"100%\" }}\n    >\n      <div>\n        <p className=\"font-paragraph-white\">Workout title</p>\n        <Input\n          value={workoutTitle}\n          onChange={(e) => setWorkoutTile(e.target.value)}\n        />\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Workout Subtitle</p>\n        <Input\n          value={workoutSubtitle}\n          onChange={(e) => setWorkoutSubtile(e.target.value)}\n        />\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Info title</p>\n        <Input\n          value={infoTitle}\n          onChange={(e) => setInfoTile(e.target.value)}\n        />\n      </div>\n      {/* <div>\n        <p className=\"font-paragraph-white\">Points</p>\n        <Input\n          value={points}\n          onChange={(e) => setPoints(e.target.value)}\n          type=\"number\"\n        />\n      </div> */}\n      <div>\n        <p className=\"font-paragraph-white\">Info File</p>\n        <Button\n          className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n          style={{ marginTop: 0 }}\n          onClick={() => {\n            setMediaManagerVisible(true);\n            setMediaManagerType(\"docs\");\n            setMediaManagerActions([infoFile, setInfoFile]);\n          }}\n          icon={<UploadOutlined />}\n        >\n          Click to Upload\n        </Button>\n        <div className=\"font-paragraph-white\" style={{ color: \"#ff7700\" }}>\n          {infoFile.name}{\" \"}\n          {infoFile && (\n            <span style={{ cursor: \"pointer\" }} onClick={() => setInfoFile(\"\")}>\n              <DeleteOutlined />\n            </span>\n          )}\n        </div>\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Upload Intro Video</p>\n\n        <Button\n          className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n          style={{ marginTop: 0 }}\n          icon={<UploadOutlined />}\n          onClick={() => {\n            setMediaManagerVisible(true);\n            setMediaManagerType(\"videos\");\n            setMediaManagerActions([\n              workoutIntroVideoFile,\n              setWorkoutIntroVideoFile,\n            ]);\n          }}\n        >\n          Click to Upload\n        </Button>\n\n        <div className=\"font-paragraph-white\" style={{ color: \"#ff7700\" }}>\n          {workoutIntroVideoFile.name}{\" \"}\n          {workoutIntroVideoFile && (\n            <span\n              style={{ cursor: \"pointer\" }}\n              onClick={() => setWorkoutIntroVideoFile(\"\")}\n            >\n              <DeleteOutlined />\n            </span>\n          )}\n        </div>\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Intro Video Length</p>\n        <Input\n          value={workoutIntroVideoLength}\n          onChange={(e) => setWorkoutIntroVideoLength(e.target.value)}\n        />\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Select Related Products</p>\n        <Select\n          mode=\"multiple\"\n          showSearch\n          style={{ width: \"100%\" }}\n          value={relatedProducts}\n          optionFilterProp=\"children\"\n          onChange={(e) => setRelatedProducts(e)}\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {allProducts.map((m, i) => (\n            <Option value={m._id}>{m.name}</Option>\n          ))}\n        </Select>\n      </div>\n      <div>\n        <p className=\"font-paragraph-white\">Select Related Equipments</p>\n        <Select\n          mode=\"multiple\"\n          showSearch\n          value={relatedEquipments}\n          style={{ width: \"100%\" }}\n          optionFilterProp=\"children\"\n          onChange={(e) => setRelatedEquipments(e)}\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {allEquipments.map((m, i) => (\n            <Option value={m._id}>{m.name}</Option>\n          ))}\n        </Select>\n        <Button\n          style={{\n            backgroundColor: \"var(--color-orange)\",\n            border: \"none\",\n            color: \"white\",\n            marginTop: \"5px\",\n          }}\n          onClick={() => setEquipmentModal(true)}\n        >\n          Manage Equipments\n        </Button>\n      </div>\n      {/* <div>\n        <p className=\"font-paragraph-white\">Group Name</p>\n        <Input\n          value={groupName}\n          onChange={(e) => setGroupName(e.target.value)}\n        />\n      </div> */}\n      <div>\n        <p className=\"font-paragraph-white\">\n          Check if you need to render workout:\n        </p>\n        <Checkbox\n          checked={renderWorkout}\n          onChange={(e) => {\n            setRenderWorkout(e.target.checked);\n          }}\n          className=\"font-paragraph-white\"\n        >\n          Render Workout\n        </Checkbox>\n      </div>\n    </div>\n  );\n\n  const handleRenderedWorkoutExerciseName = (rId, value) => {\n    if (update) {\n      let w = [...renderedWorkoutExercises];\n      w[0] = {\n        ...w[0],\n        exerciseName: value,\n      };\n\n      setRenderWorkoutExercises(w);\n    } else {\n      let w = [...renderedWorkoutExercises];\n      console.log(\"exercise from new challenge workout\", w, value);\n      w[0] = {\n        ...w[0],\n        exerciseName: value,\n      };\n      setRenderWorkoutExercises(w);\n    }\n  };\n\n  const handleRenderedWorkoutExerciseVideo = (value) => {\n    console.log(\"video to be uploded\", value);\n    if (update) {\n      let w = [...renderedWorkoutExercises];\n      w[0] = {\n        ...w[0],\n        exerciseVideo: value && value.link,\n      };\n\n      setRenderWorkoutExercises(w);\n    } else {\n      let w = [...renderedWorkoutExercises];\n      console.log(\"exercise from new challenge workout\", w, value);\n      w[0] = {\n        ...w[0],\n        exerciseVideo: value && value.link,\n      };\n      setRenderWorkoutExercises(w);\n    }\n  };\n\n  const handleNonRenderedWorkoutExerciseName = (rId, id) => {\n    if (update) {\n      const exercise = allExercises.filter((e) => e._id === id);\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i._id === rId) {\n          i.exerciseName = exercise[0].title;\n          i.exerciseVideo = exercise[0].videoURL;\n          i.voiceOverFile = exercise[0].voiceOverLink;\n          i.exerciseId = id;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n    } else {\n      const exercise = allExercises.filter((e) => e._id === id);\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i.exerciseId === rId) {\n          i.exerciseName = exercise[0].title;\n          i.exerciseVideo = exercise[0].videoURL;\n          i.voiceOverFile = exercise[0].voiceOverLink;\n          i._id = id;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n    }\n  };\n\n  const handleNonRenderedWorkoutExerciseWorkoutLength = (eId, value) => {\n    // const exercise = allExercises.filter((e) => e._id === eId);\n    if (update) {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i._id === eId) {\n          i.videoLength = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n      // console.log(eId, value);\n    } else {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i.exerciseId === eId) {\n          i.videoLength = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n      // console.log(eId, value);\n    }\n  };\n\n  const handleNonRenderedWorkoutExerciseGroupName = (eId, value) => {\n    // const exercise = allExercises.filter((e) => e._id === eId);\n    if (update) {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i._id === eId) {\n          i.exerciseGroupName = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n    } else {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i.exerciseId === eId) {\n          i.exerciseGroupName = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n      // console.log(eId, value);\n    }\n  };\n\n  const handleNonRenderedWorkoutExerciseBreak = (eId, value) => {\n    if (update) {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i._id === eId) {\n          i.breakAfterExercise = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n    } else {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.map((i) => {\n        if (i.exerciseId === eId) {\n          i.breakAfterExercise = value;\n        }\n        return i;\n      });\n      setNonRenderedWorkoutExercises(w);\n    }\n  };\n  const nonRenderedWorkoutExerciseRemove = (id) => {\n    if (update) {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.filter((i) => i._id !== id);\n      setNonRenderedWorkoutExercises(w);\n    } else {\n      let w = [...nonRenderedWorkoutExercises];\n      w = w.filter((i) => i.exerciseId !== id);\n      setNonRenderedWorkoutExercises(w);\n    }\n  };\n\n  const removeWeek = (id) => {\n    let w = [...weeks];\n    w = w.filter((i) => i.weekId !== id);\n    setWeeks(w);\n  };\n\n  const createWorkoutStep2 = () => {\n    if (!renderWorkout) {\n      return (\n        <div className=\"new-workout-creator-container-2-rendered\">\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <h3 className=\"font-heading-white\">Add Exercise</h3>\n          </div>\n          {renderedWorkoutExercises.map((e, i) => (\n            <div\n              style={{\n                backgroundColor: \"#fff\",\n                padding: \"10px 15px 30px 15px\",\n              }}\n            >\n              <p\n                className=\"font-paragraph-black\"\n                style={{ color: \"var(--color-orange)\", fontWeight: \"600\" }}\n              >\n                Select Exercise\n              </p>\n              {/* <Select\n                showSearch\n                style={{ width: \"100%\" }}\n                placeholder=\"Select a exercise\"\n                optionFilterProp=\"children\"\n                value={update ? e.exerciseId : e._id}\n                onChange={(exe) =>\n                  handleRenderedWorkoutExerciseName(\n                    update ? e._id : e.exerciseId,\n                    exe\n                  )\n                }\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                  0\n                }\n              >\n                {allExercises.map((e, i) => (\n                  <Option value={e._id} key={i}>\n                    {e.title}\n                  </Option>\n                ))}\n              </Select> */}\n              <p\n                className=\"font-paragraph-black\"\n                style={{ color: \"var(--color-orange)\", fontWeight: \"600\" }}\n              >\n                Title\n              </p>\n              <Input\n                value={e.exerciseName}\n                // disabled={true}\n                onChange={(w) =>\n                  handleRenderedWorkoutExerciseName(\n                    update ? e._id : e.exerciseId,\n                    w.target.value\n                  )\n                }\n              />\n              <p\n                className=\"font-paragraph-white\"\n                style={{ color: \"var(--color-orange)\", fontWeight: \"600\" }}\n              >\n                Video\n              </p>\n\n              <Button\n                onClick={() => {\n                  setMediaManagerVisible(true);\n                  setMediaManagerType(\"videos\");\n                  setMediaManagerActions([\n                    e.exerciseVideo,\n                    handleRenderedWorkoutExerciseVideo,\n                  ]);\n                }}\n              >\n                Upload Video\n              </Button>\n              <div\n                className=\"font-paragraph-white\"\n                style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n              >\n                {e.exerciseVideo && e.exerciseVideo}\n              </div>\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"new-workout-creator-container-2-nonrender\"\n          style={{\n            height: workoutModalFullscreen ? \"60vh\" : \"50vh\",\n            background: \"#232932\",\n          }}\n        >\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              background: \"#232932\",\n              // padding: \"10px\",\n            }}\n          >\n            <h3 className=\"font-heading-white\">Add Exercises</h3>\n            <Button\n              onClick={() =>\n                setNonRenderedWorkoutExercises([\n                  ...nonRenderedWorkoutExercises,\n                  nonRenderedWorkoutExercise,\n                ])\n              }\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                border: \"var(--color-orange)\",\n                color: \"white\",\n                marginRight: \"10px\",\n              }}\n            >\n              <PlusOutlined /> Add\n            </Button>\n          </div>\n\n          <Collapse defaultActiveKey={[\"1\"]}>\n            {nonRenderedWorkoutExercises.map((e, i) => (\n              <Panel\n                header={`Exercise ${i + 1}`}\n                key={update ? e._id : e.exerciseId}\n              >\n                <div\n                  style={{\n                    background: \"#232932\",\n                    margin: \"-10px\",\n                    padding: \"10px\",\n                  }}\n                >\n                  <Button\n                    type=\"danger\"\n                    onClick={() =>\n                      nonRenderedWorkoutExerciseRemove(\n                        update ? e._id : e.exerciseId\n                      )\n                    }\n                    style={{ float: \"right\" }}\n                  >\n                    Remove\n                  </Button>\n                  <Select\n                    showSearch\n                    style={{ width: \"100%\", marginTop: \"10px\" }}\n                    placeholder=\"Select a exercise\"\n                    optionFilterProp=\"children\"\n                    value={update ? e.exerciseId : e._id}\n                    onChange={(exe) =>\n                      handleNonRenderedWorkoutExerciseName(\n                        update ? e._id : e.exerciseId,\n                        exe\n                      )\n                    }\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .indexOf(input.toLowerCase()) >= 0\n                    }\n                  >\n                    {allExercises.map((e, i) => (\n                      <Option value={e._id} key={i}>\n                        {e.title}\n                      </Option>\n                    ))}\n                  </Select>\n\n                  <div\n                    style={{\n                      display: \"grid\",\n                      gridTemplateColumns:\n                        \"repeat(auto-fit, minmax(220px, 1fr))\",\n                      gridGap: \"10px\",\n                      background: \"#232932 !important\",\n                    }}\n                  >\n                    <div>\n                      <p\n                        className=\"font-paragraph-black\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Exercise Title\n                      </p>\n                      <Input value={e.exerciseName} disabled={true} />\n                    </div>\n                    <div>\n                      <p\n                        className=\"font-paragraph-black\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Exercise Length- must be in seconds\n                      </p>\n                      <Input\n                        value={e.videoLength}\n                        onChange={(l) =>\n                          handleNonRenderedWorkoutExerciseWorkoutLength(\n                            update ? e._id : e.exerciseId,\n                            l.target.value\n                          )\n                        }\n                      />\n                    </div>\n\n                    <div>\n                      <p\n                        className=\"font-paragraph-black\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Break after exercise- must be in seconds\n                      </p>\n                      <Input\n                        placeholder=\"eg. 10\"\n                        type=\"number\"\n                        value={e.breakAfterExercise}\n                        onChange={(l) =>\n                          handleNonRenderedWorkoutExerciseBreak(\n                            update ? e._id : e.exerciseId,\n                            l.target.value\n                          )\n                        }\n                      />\n                    </div>\n\n                    <div>\n                      <p\n                        className=\"font-paragraph-black\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Exercise Group Name\n                      </p>\n                      <Input\n                        placeholder=\"eg. Round 1/3\"\n                        value={e.exerciseGroupName}\n                        onChange={(l) =>\n                          handleNonRenderedWorkoutExerciseGroupName(\n                            update ? e._id : e.exerciseId,\n                            l.target.value\n                          )\n                        }\n                      />\n                    </div>\n\n                    <div>\n                      <p\n                        className=\"font-paragraph-white\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Uploaded Video\n                      </p>\n                      <div className=\"font-paragraph-white\">\n                        {e.exerciseVideo}{\" \"}\n                      </div>\n                    </div>\n\n                    <div>\n                      <p\n                        className=\"font-paragraph-white\"\n                        style={{\n                          color: \"var(--color-orange)\",\n                          fontWeight: \"600\",\n                        }}\n                      >\n                        Uploaded Voiceover\n                      </p>\n\n                      <div className=\"font-paragraph-white\">\n                        {e.voiceOverFile}{\" \"}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Panel>\n            ))}\n          </Collapse>\n        </div>\n      );\n    }\n  };\n\n  const removeWorkout = (weekId, workoutId) => {\n    let w = [...weeks];\n    console.log(w);\n    w = w.map((j) => {\n      if (j.weekId === weekId) {\n        j.workouts = j.workouts.filter((f) => f.workoutId !== workoutId);\n        return j;\n      }\n      return j;\n    });\n    setWeeks(w);\n  };\n\n  const duplicateWorkout = (weekId, workout) => {\n    const dw = { ...workout };\n    let w = [...weeks];\n    dw.workoutId = v4();\n    delete dw._id;\n    dw.exercises = dw.exercises.map((e) => {\n      let p = { ...e, exerciseId: update ? e.exerciseId : v4() };\n      delete p._id;\n      return p;\n    });\n    w = w.map((j) => {\n      if (j.weekId === weekId) {\n        j.workouts.push(dw);\n        return j;\n      }\n      return j;\n    });\n\n    update && updateWorkoutOnTheBackend(dw, \"new\", weekId);\n\n    // console.log(\"workoouts\", workoutIdsThatNeedToBeUpdated);\n    setWeeks(w);\n  };\n\n  const duplicateExercise = (weekId, workout, exercise) => {\n    const newE = {\n      ...exercise,\n      exerciseId: update ? exercise.exerciseId : v4(),\n    };\n    // console.log(\"who cares\", newE, exercise);\n    // return;\n    delete newE._id;\n    let w = [...weeks];\n    w = w.map((week) => {\n      if (week.weekId === weekId) {\n        week.workouts = week.workouts.map((wo) => {\n          if (wo.workoutId === workout.workoutId) {\n            return {\n              ...wo,\n              exercises: [...wo.exercises, newE],\n            };\n          }\n          return wo;\n        });\n        return week;\n      }\n      return week;\n    });\n\n    console.log(\"here 2\", w);\n    // return;\n    setWeeks(w);\n    setTimeout(() => {\n      // console.log(\"yelloe mello\", w.workout, w);\n      update && updateWorkoutOnTheBackend(w[0].workouts, \"update\");\n    }, 1000);\n  };\n\n  const duplicateWeek = (week) => {\n    const ObjectId = v4();\n    let newWeek = {\n      ...week,\n      weekId: ObjectId,\n      workouts: week.workouts.map((t) => {\n        let p = {\n          ...t,\n          exercises: t.exercises.map((l) => {\n            delete l._id;\n            return l;\n          }),\n        };\n        delete p._id;\n        update && updateWorkoutOnTheBackend(p, \"new\", ObjectId);\n        return p;\n      }),\n      // _id: ObjectId,\n    };\n    delete newWeek._id;\n\n    console.log(\"here3\", newWeek, week);\n    // return;\n    setWeeks([...weeks, newWeek]);\n  };\n  const updateWorkout = (workout) => {\n    //   this is for new workout creation process\n    setWorkoutToUpdate(workout.workoutId);\n    setCurrentStep(0);\n    setWorkoutTile(workout.workoutTitle);\n    setWorkoutSubtile(workout.workoutSubtitle);\n    setGroupName(workout.groupName);\n    setInfoTile(workout.infoTitle);\n    setInfoFile(workout.infoFile);\n    // setPoints(workout.points);\n    setWorkoutIntroVideoFile(workout.workoutIntroVideoFile);\n    setRelatedProducts(workout.relatedProducts);\n    setRelatedEquipments(workout.relatedEquipments);\n    setRenderWorkout(workout.renderWorkout);\n    !workout.renderWorkout && setRenderWorkoutExercises(workout.exercises);\n    workout.renderWorkout && setNonRenderedWorkoutExercises(workout.exercises);\n    setAddWorkoutModalVisible(true);\n  };\n\n  const handleToggle = () => {\n    setWorkoutModalFullscreen(!workoutModalFullscreen);\n  };\n\n  const onDragEnd = (result) => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(weeks, result.source.index, result.destination.index);\n\n    setWeeks(items);\n  };\n\n  return (\n    <div className=\"newchallenge-creator-container-tab\">\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fethData}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n      {/* media manager popup */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n\n      {/* {console.log(\n        \"renderedWorkoutExercisesrenderedWorkoutExercisesrenderedWorkoutExercises\",\n        nonRenderedWorkoutExercises\n      )} */}\n      {/* modal to create a new equipment */}\n      <Modal\n        onCancel={() => setEquipmentModal(false)}\n        footer={false}\n        visible={equipmentModal}\n      >\n        <p className=\"font-paragraph-white\">Enter New Equipment Name</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newEquipmentName}\n            onChange={(e) => setNewEquipmentName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newEquipmentName.length > 0) {\n                await createChallengeEquipment({\n                  name: newEquipmentName,\n                  language,\n                });\n                // setEquipmentModal(false);\n                fethData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Equipment</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allEquipments}\n            renderItem={(equipment) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{equipment.name}</span>\n\n                <span>\n                  <Button\n                    onClick={() => {\n                      removeItem(equipment._id);\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Equipment\");\n                      setSelectedItemForUpdate(equipment);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* main form */}\n      {/* create a workout modal */}\n\n      <Modal\n        visible={addWorkoutModalVisible}\n        onCancel={() => setAddWorkoutModalVisible(false)}\n        footer={false}\n        width={workoutModalFullscreen ? \"100%\" : \"50%\"}\n        style={{ resize: \"none\" }}\n        bodyStyle={{ height: workoutModalFullscreen ? \"90vh\" : \"100%\" }}\n        maskStyle={{ height: workoutModalFullscreen ? \"90vh\" : \"100%\" }}\n      >\n        <div\n          ref={workoutModalRef}\n          style={{\n            backgroundColor: \"var(--color-gray)\",\n          }}\n        >\n          <span\n            style={{\n              float: \"right\",\n              color: \"white\",\n              padding: \"3px 5px\",\n              border: \"1px solid white\",\n              position: \"absolute\",\n              right: \"40px\",\n              cursor: \"pointer\",\n              top: \"5px\",\n              fontSize: \"15px\",\n              zIndex: \"10000\",\n            }}\n            onClick={() => handleToggle()}\n          >\n            {workoutModalFullscreen ? (\n              <ShrinkOutlined />\n            ) : (\n              <ArrowsAltOutlined />\n            )}\n          </span>\n          <h1 className=\"font-subheading-white\" style={{ margin: \"5px\" }}>\n            Create a workout\n          </h1>\n\n          <div className=\"new-workout-creator-container\">\n            <>\n              {currentStep === 0 && createWorkoutStep1()}\n              {currentStep === 0 && (\n                <div style={{ textAlign: \"right\" }}>\n                  <Button\n                    size=\"large\"\n                    className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n                    onClick={() => setCurrentStep(1)}\n                  >\n                    Next Step\n                  </Button>\n                </div>\n              )}\n              {currentStep === 1 && createWorkoutStep2()}\n              {currentStep === 1 && (\n                <div>\n                  <Button\n                    size=\"large\"\n                    className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n                    onClick={() => setCurrentStep(0)}\n                  >\n                    Prev Step\n                  </Button>\n                  <Button\n                    size=\"large\"\n                    className=\"new-workout-creator-container-1-btn font-paragraph-white\"\n                    onClick={addWorkoutToWeek}\n                    style={{ marginRight: \"20px\", float: \"right\" }}\n                  >\n                    Create Workout\n                  </Button>\n                </div>\n              )}\n            </>\n          </div>\n        </div>\n      </Modal>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {weeks.map((w, i) => (\n                <CustomWeekPanel\n                  update={update}\n                  week={w}\n                  index={i}\n                  id={w.weekId}\n                  weeks={weeks}\n                  setWeeks={setWeeks}\n                  removeWeek={removeWeek}\n                  duplicateWeek={duplicateWeek}\n                  handleWeekNameChange={handleWeekNameChange}\n                  handleWeekSubtitleChange={handleWeekSubtitleChange}\n                  setCurrentWeek={setCurrentWeek}\n                  setAddWorkoutModalVisible={setAddWorkoutModalVisible}\n                  removeWorkout={removeWorkout}\n                  updateWorkout={updateWorkout}\n                  duplicateWorkout={duplicateWorkout}\n                  duplicateExercise={duplicateExercise}\n                />\n              ))}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n      {/* </Collapse> */}\n\n      <Button\n        style={{\n          backgroundColor: \"var(--color-orange)\",\n          borderColor: \"var(--color-orange)\",\n          color: \"white\",\n          marginTop: \"10px\",\n        }}\n        onClick={() => setWeeks([...weeks, newWeek])}\n      >\n        Add A Week\n      </Button>\n    </div>\n  );\n}\n\nexport default NewChallengeWorkoutTab;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\mediaManagerUtils.js",["1035","1036"],"import React, { ReactElement, useMemo } from \"react\";\nimport { Button } from \"antd\";\nimport { ChonkyActions, ChonkyFileActionData } from \"chonky\";\nimport Noty from \"noty\";\nimport \"noty/lib/noty.css\";\nimport \"noty/lib/themes/relax.css\";\nimport \"../../../assets/override.css\";\n\n// We ignore some actions to avoid creating noise\nconst ignoredActions = new Set();\nignoredActions.add(ChonkyActions.MouseClickFile.id);\nignoredActions.add(ChonkyActions.KeyboardClickFile.id);\nignoredActions.add(ChonkyActions.StartDragNDrop.id);\nignoredActions.add(ChonkyActions.EndDragNDrop.id);\nignoredActions.add(ChonkyActions.ChangeSelection.id);\n\nexport const showActionNotification = (data) => {\n  if (ignoredActions.has(data.action.id)) return;\n\n  const textParts = [];\n  textParts.push(\n    `<div class=\"noty-action\">Action: <code>${data.action.id}</code></div>`\n  );\n\n  if (data.id === ChonkyActions.OpenFiles.id) {\n    const fileNames = data.payload.files.map((f) => `<code>${f.name}</code>`);\n    if (fileNames.length === 1) {\n      textParts.push(\"You opened a single file:\");\n    } else {\n      textParts.push(`You opened ${fileNames.length} files:`);\n    }\n    textParts.push(...fileNames);\n  }\n\n  if (data.id === ChonkyActions.MoveFiles.id) {\n    const fileCount = data.payload.files.length;\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\n    const source = `<code>${data.payload.source?.name ?? \"~\"}</code>`;\n    const destination = `<code>${data.payload.destination.name}</code>`;\n    textParts.push(\n      `You moved ${countString} from ${source} to ${destination}.`\n    );\n  }\n\n  if (data.id === ChonkyActions.DeleteFiles.id) {\n    const fileCount = data.state.selectedFilesForAction.length;\n    const countString = `${fileCount} file${fileCount !== 1 ? \"s\" : \"\"}`;\n    textParts.push(`You deleted ${countString} files.`);\n  }\n\n  const text = textParts[0] + textParts.slice(1).join(\"<br/>\");\n\n  new Noty({\n    text,\n    type: \"success\",\n    theme: \"relax\",\n    timeout: 3000,\n  }).show();\n};\n\nconst GIT_BRANCH = \"master\";\nexport const useStoryLinks = (links) => {\n  return useMemo(\n    () => {\n      const components = [];\n      for (let i = 0; i < links.length; ++i) {\n        const link = links[i];\n        let name = link.name;\n        let href = link.url;\n        if (link.docsUrl) {\n          href = link.docsUrl;\n          if (!name) name = \"Relevant docs\";\n        } else if (link.gitPath) {\n          href = getGitHubLink(link.gitPath);\n          if (!name) name = \"Story source code\";\n        } else if (!href) {\n          throw new Error(`Link \"${link.name}\" has no URL specified!`);\n        }\n\n        components.push(\n          <Button\n            href={href}\n            size=\"small\"\n            color=\"primary\"\n            target=\"_blank\"\n            variant=\"contained\"\n            key={`story-link-${i}`}\n            rel=\"noreferrer noopener\"\n            style={{ marginBottom: 15, marginRight: 15 }}\n          >\n            {name}\n          </Button>\n        );\n      }\n      return components;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n    // We deliberately leave hook deps empty as we don't exepct links to change.\n  );\n};\nexport const getGitHubLink = (filePath) =>\n  `https://github.com/TimboKZ/chonky-website/blob/${GIT_BRANCH}/${filePath}`;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\MediaManager\\MediaFileUploader.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeMainTab.js",["1037","1038","1039","1040","1041"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Form,\n  Input,\n  Button,\n  Select,\n  Modal,\n  Checkbox,\n  List,\n  InputNumber,\n} from \"antd\";\nimport { LoadingOutlined, CloseSquareOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\n// services\nimport {\n  createChallengeGoal,\n  deleteChallengeTGoal,\n  getAllChallengeGoals,\n} from \"../../../services/createChallenge/goals\";\nimport {\n  createChallengeTag,\n  deleteChallengeTag,\n  getAllChallengeTags,\n} from \"../../../services/createChallenge/tags\";\nimport {\n  getAllBodyFocus,\n  createBodyFocus,\n  deleteChallengeBodyfocus,\n} from \"../../../services/createChallenge/bodyFocus\";\nimport {\n  createTrainerGoal,\n  deleteTrainerGoals,\n  getAllTrainerGoals,\n  getAllTrainers,\n} from \"../../../services/trainers\";\nimport EditTypeName from \"./EditTypeName\";\nimport { LanguageContext } from \"../../../contexts/LanguageContext\";\nimport LanguageSelector from \"../../LanguageSelector/LanguageSelector\";\nimport { T } from \"../../Translate\";\nconst { Option } = Select;\n\nfunction NewChallengeMainTab({\n  form,\n  selectedChallenge,\n  setSelectedChallenge,\n  allChallenges,\n  name,\n  setName,\n  access,\n  setAccess,\n  price,\n  points,\n  setPrice,\n  setPoints,\n  currency,\n  setCurrency,\n  thumbnail,\n  setThumbnail,\n  videoThumbnail,\n  setVideoThumbnail,\n  videoTrailer,\n  setVideoTrailer,\n  trainers,\n  setTrainers,\n  allTrainers,\n  setAllTrainers,\n  description,\n  setDescription,\n  difficulty,\n  setDifficulty,\n  goals,\n  setGoals,\n  selectedFitnessInterest,\n  setSelectedFitnessInterest,\n  bodyFocus,\n  setBodyFocus,\n  duration,\n  setDuration,\n  allGoals,\n  setAllGoals,\n  newGoalName,\n  setNewGoalName,\n  showGoalModal,\n  setShowGoalModal,\n  allBodyfocus,\n  setAllBodyfocus,\n  newBodyfocusName,\n  setNewBodyfocusName,\n  showBodyfocusModal,\n  setShowBodyfocusModal,\n  tags,\n  setTags,\n  allTags,\n  setAllTags,\n  newTagName,\n  setNewTagName,\n  showTagModal,\n  setShowTagModal,\n  update,\n}) {\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n  const [isFree, setIsFree] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const [fitnessInterestModal, setFitnessInterestModal] = useState(false);\n  const [allTrainerGoals, setAllTrainerGoals] = useState([]);\n  const [newTrainerFitnessInterest, setNewTrainerFitnessInterest] =\n    useState(\"\");\n  const [filteredTrainers, setFilteredTrainers] = useState([]);\n  const { language } = useContext(LanguageContext);\n\n  useEffect(() => {\n    fethData();\n  }, [language]);\n\n  async function fethData() {\n    const bodyFocus = await getAllBodyFocus(language);\n    const goals = await getAllChallengeGoals(language);\n    const tags = await getAllChallengeTags(language);\n    const trainers = await getAllTrainers(language);\n    const res = await getAllTrainerGoals(language);\n\n    setAllBodyfocus(bodyFocus.body);\n    setAllGoals(goals.challengeGoals);\n    setAllTags(tags.tags);\n    setAllTrainers(trainers.trainers);\n    setFilteredTrainers(trainers.trainers);\n    setAllTrainerGoals(res.goals);\n  }\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const removeItem = async (type, id) => {\n    if (type === \"goal\") {\n      await deleteChallengeTGoal(id);\n      fethData();\n      return;\n    }\n\n    if (type === \"tag\") {\n      await deleteChallengeTag(id);\n      fethData();\n      return;\n    }\n\n    if (type === \"bodyFocus\") {\n      await deleteChallengeBodyfocus(id);\n      fethData();\n      return;\n    }\n  };\n\n  const selectBefore = (\n    <Select\n      defaultValue=\"$\"\n      className=\"select-before\"\n      value={currency}\n      onChange={(e) => setCurrency(e)}\n      name=\"currency\"\n    >\n      <Option value=\"$\">$</Option>\n      <Option value=\"€\">€</Option>\n    </Select>\n  );\n  return (\n    <div className=\"newchallenge-creator-container-tab\">\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      {/*  */}\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fethData}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n      {/* manage  */}\n\n      {/* modal to create a new trainer goal */}\n      <Modal\n        onCancel={() => setFitnessInterestModal(false)}\n        footer={false}\n        visible={fitnessInterestModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\"> Create A New Fitness Interest</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newTrainerFitnessInterest}\n            onChange={(e) => setNewTrainerFitnessInterest(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newTrainerFitnessInterest.length > 0) {\n                await createTrainerGoal({\n                  name: newTrainerFitnessInterest,\n                  language: language,\n                });\n                // setShowBodyfocusModal(false);\n                fethData();\n              }\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Fitness Interests</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allTrainerGoals}\n            renderItem={(g) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{g.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      await deleteTrainerGoals(g._id);\n                      fethData();\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Fitness Interest\");\n                      setSelectedItemForUpdate(g);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* end */}\n\n      {/* modal to create a new goal */}\n      <Modal\n        onCancel={() => setShowGoalModal(false)}\n        footer={false}\n        visible={showGoalModal}\n      >\n        <p className=\"font-paragraph-white\">\n          <T>adminDashboard.challenges.eng</T>\n        </p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newGoalName}\n            onChange={(e) => setNewGoalName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newGoalName.length > 0) {\n                await createChallengeGoal(newGoalName);\n                // setShowGoalModal(false);\n                fethData();\n              }\n            }}\n          >\n            <T>adminDashboard.create</T>\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Goals</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allGoals}\n            renderItem={(goal) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{goal.name}</span>\n                <CloseSquareOutlined\n                  onClick={() => removeItem(\"goal\", goal._id)}\n                  style={{ color: \"#ff8064\", cursor: \"pointer\" }}\n                />\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* modal to create a new TAGS */}\n      <Modal\n        onCancel={() => setShowTagModal(false)}\n        footer={false}\n        visible={showTagModal}\n      >\n        <p className=\"font-paragraph-white\">Enter New Tag</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newTagName}\n            onChange={(e) => setNewTagName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newTagName.length > 0) {\n                await createChallengeTag(newTagName);\n                // setShowGoalModal(false);\n                fethData();\n              }\n            }}\n          >\n            <T>adminDashboard.create</T>\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Tags</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allTags}\n            renderItem={(tag) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{tag.name}</span>\n                <CloseSquareOutlined\n                  onClick={() => removeItem(\"tag\", tag._id)}\n                  style={{ color: \"#ff8064\", cursor: \"pointer\" }}\n                />\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* modal to create a new body */}\n      <Modal\n        onCancel={() => setShowBodyfocusModal(false)}\n        footer={false}\n        visible={showBodyfocusModal}\n      >\n        {/* body focus stuff */}\n        <p className=\"font-paragraph-white\">\n          {\" \"}\n          <T>adminDashboard.challenges.enterbf</T>\n        </p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newBodyfocusName}\n            onChange={(e) => setNewBodyfocusName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newBodyfocusName.length > 0) {\n                await createBodyFocus(newBodyfocusName);\n                // setShowBodyfocusModal(false);\n                fethData();\n              }\n            }}\n          >\n            {/* Manage Body Focus */}\n\n            <T>adminDashboard.create</T>\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Body Focus</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allBodyfocus}\n            renderItem={(bodyFocus) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{bodyFocus.name}</span>\n\n                <span>\n                  <Button\n                    onClick={() => {\n                      removeItem(\"bodyFocus\", bodyFocus._id);\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Body Focus\");\n                      setSelectedItemForUpdate(bodyFocus);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n      {/* modal to create a new equipment */}\n      {/* <Modal\n        onCancel={() => setEquipmentModal(false)}\n        footer={false}\n        visible={equipmentModal}\n      >\n        <p className=\"font-paragraph-white\">\n          {t(\"adminDashboard.challenges.enterneweq\")}\n        </p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newEquipmentName}\n            onChange={(e) => setNewEquipmentName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            onClick={async () => {\n              if (newEquipmentName.length > 0) {\n                await createChallengeEquipment(newEquipmentName);\n                // setEquipmentModal(false);\n                fethData();\n              }\n            }}\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n          >\n            Create\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Equipment</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allEquipments}\n            renderItem={(equipment) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n              >\n                <span>{equipment.name}</span>\n                <CloseSquareOutlined\n                  onClick={() => removeItem(\"equipment\", equipment._id)}\n                  style={{ color: \"#ff8064\", cursor: \"pointer\" }}\n                />\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal> */}\n\n      <div>\n        {!update && (\n          <>\n            {\" \"}\n            <span style={{ marginRight: \"5px\" }}>Select Language:</span>\n            <LanguageSelector notFromNav={true} />\n          </>\n        )}\n        <div>\n          <span\n            style={{ marginRight: \"5px\" }}\n          >{`Select alternative language version`}</span>\n          <Select\n            style={{ width: \"500px\" }}\n            value={selectedChallenge}\n            onChange={(e) => setSelectedChallenge(e)}\n          >\n            <Option value={\"\"}>-</Option>\n            {!update &&\n              allChallenges.map((r, i) => (\n                <Option value={r._id}>{r.challengeName}</Option>\n              ))}\n            {update &&\n              allChallenges.map(\n                (r, i) =>\n                  r.challengeName !== name && (\n                    <Option value={r._id}>{r.challengeName}</Option>\n                  )\n              )}\n          </Select>\n        </div>\n      </div>\n      {/* main form */}\n      <Form\n        name=\"basic\"\n        layout=\"vertical\"\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n        form={form ? form : null}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"Name\"\n          name=\"challengeName\"\n          rules={[{ required: true, message: \"Please input challenge name!\" }]}\n        >\n          <Input value={name} onChange={(e) => setName(e.target.value)} />\n        </Form.Item>\n        <Form.Item\n          label=\"Description\"\n          name=\"description\"\n          rules={[{ required: true, message: \"Please input description!\" }]}\n        >\n          <Input\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n          />\n        </Form.Item>\n        <Form.Item label=\"Currency\" name=\"currency\">\n          <Select\n            defaultValue=\"$\"\n            className=\"select-before\"\n            value={currency}\n            onChange={(e) => setCurrency(e)}\n            name=\"currency\"\n          >\n            <Option value=\"$\">$</Option>\n            <Option value=\"€\">€</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Price\" name=\"price\">\n          <InputNumber\n            // addonBefore={selectBefore}\n            min={0.1}\n            style={{ width: \"100%\" }}\n            disabled={isFree}\n            value={price}\n            onChange={(e) => setPrice(e)}\n          />\n        </Form.Item>\n        <Form.Item name=\"isFree\">\n          <Checkbox\n            value={isFree}\n            onChange={(e) => {\n              setIsFree(e.target.checked);\n              setPrice(0);\n              setAccess([\"FREE\"]);\n              // form.setFieldValue({\n              //   access: [\"FREE\"],\n              // });\n            }}\n          >\n            Free Challenge\n          </Checkbox>\n          {/* <span></span> */}\n        </Form.Item>\n        <Form.Item label=\"Points\" name=\"points\">\n          <Input\n            type=\"number\"\n            value={points}\n            onChange={(e) => setPoints(e.target.value)}\n          />\n        </Form.Item>\n        <Form.Item\n          label=\"Thumbnail\"\n          name=\"thumbnail\"\n          rules={[{ required: true, message: \"Please input thumbnail!\" }]}\n        >\n          <Button\n            onClick={() => {\n              setMediaManagerVisible(true);\n              setMediaManagerType(\"images\");\n              setMediaManagerActions([thumbnail, setThumbnail]);\n            }}\n          >\n            Upload File\n          </Button>\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n          >\n            <span>{thumbnail && thumbnail.name}</span>\n            {thumbnail && (\n              <CloseSquareOutlined\n                style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\n                onClick={() => setThumbnail(\"\")}\n              />\n            )}\n          </div>\n        </Form.Item>\n        <Form.Item\n          label=\"Video Thumbnail\"\n          name=\"videoThumbnail\"\n          rules={[{ required: true, message: \"Please input thumbnail!\" }]}\n        >\n          <Button\n            onClick={() => {\n              setMediaManagerVisible(true);\n              setMediaManagerType(\"videos\");\n              setMediaManagerActions([videoThumbnail, setVideoThumbnail]);\n            }}\n          >\n            Upload File\n          </Button>\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n          >\n            <span>{videoThumbnail && videoThumbnail.name}</span>\n            {videoThumbnail && (\n              <CloseSquareOutlined\n                style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\n                onClick={() => setVideoThumbnail(\"\")}\n              />\n            )}\n          </div>\n        </Form.Item>\n        <Form.Item\n          label=\"Video Trailer\"\n          name=\"videoTrailer\"\n          rules={[{ required: true, message: \"Please input video trailer!\" }]}\n        >\n          <Button\n            onClick={() => {\n              setMediaManagerVisible(true);\n              setMediaManagerType(\"videos\");\n              setMediaManagerActions([videoTrailer, setVideoTrailer]);\n            }}\n          >\n            Upload File\n          </Button>\n          <div\n            className=\"font-paragraph-white\"\n            style={{ color: \"#ff7700\", margin: \"5px 0\" }}\n          >\n            <span>{videoTrailer && videoTrailer.name}</span>\n            {videoTrailer && (\n              <CloseSquareOutlined\n                style={{ marginLeft: \"10px\", cursor: \"pointer\" }}\n                onClick={() => setVideoTrailer(\"\")}\n              />\n            )}\n          </div>\n        </Form.Item>\n        <Form.Item label=\"Trainers\">\n          {/* {console.log(\"trainers\", trainers)} */}\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={trainers}\n            onChange={(e) => setTrainers(e)}\n            filterOption={false}\n            onSearch={(e) => {\n              const t = allTrainers.filter((f) =>\n                f.firstName\n                  .concat(f.lastName)\n                  ?.toLowerCase()\n                  .includes(e.toLowerCase())\n              );\n              setFilteredTrainers(t);\n            }}\n          >\n            {filteredTrainers.map((trainer) => (\n              <Option value={trainer._id}>\n                {trainer.firstName} {trainer.lastName}\n              </Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Access\" name=\"access\">\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            disabled={isFree}\n            value={access}\n            onChange={(e) => setAccess(e)}\n          >\n            {/* <Option value=\"FREE\">FREE</Option> */}\n            <Option value=\"CHALLENGE-3\">CHALLENGE-3</Option>\n            <Option value=\"CHALLENGE-12\">CHALLENGE-12</Option>\n            <Option value=\"CHALLENGE-1\">CHALLENGE-1</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item label=\"Difficulty\" name=\"difficulty\">\n          <Select\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={difficulty}\n            onChange={(e) => setDifficulty(e)}\n          >\n            <Option value=\"high\">High</Option>\n            <Option value=\"medium\">Medium</Option>\n            <Option value=\"low\">Low</Option>\n          </Select>\n          <Checkbox\n            // checked={}\n            // onChange={(e) => setRenderWorkout(e.target.checked)}\n            className=\"font-paragraph-black\"\n          >\n            This challenge contains more intensities levels\n          </Checkbox>\n        </Form.Item>\n\n        <Form.Item label=\"Goals\" name=\"goals\">\n          {console.log(\"goasl\", goals)}\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={goals}\n            onChange={(e) => setGoals(e)}\n          >\n            <Option value={\"get-fit\"}>\n              {\" \"}\n              <T>wizard.getfit</T>\n            </Option>\n            <Option value={\"lose-weight\"}>\n              <T>wizard.loseweight</T>\n            </Option>\n            <Option value={\"gain-muscle\"}>\n              {\" \"}\n              <T>wizard.gainmuslce</T>{\" \"}\n            </Option>\n          </Select>\n          {/* <Button\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              border: \"none\",\n              color: \"white\",\n              float: \"right\",\n              marginTop: \"5px\",\n            }}\n            onClick={() => setShowGoalModal(true)}\n          >\n            Manage Goals\n          </Button> */}\n        </Form.Item>\n        {/* TODO add link tags */}\n        {/* <Form.Item label=\"Tags\" name=\"tags\">\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={tags}\n            onChange={(e) => setTags(e)}\n          >\n            {allTags.map((t) => (\n              <Option value={t._id}>{t.name}</Option>\n            ))}\n          </Select>\n          <Button\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              border: \"none\",\n              color: \"white\",\n              float: \"right\",\n              marginTop: \"5px\",\n            }}\n            onClick={() => setShowTagModal(true)}\n          >\n            Manage Tag\n          </Button>\n        </Form.Item> */}\n        <Form.Item label=\"Body Focus\" name=\"bodyFocus\">\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={bodyFocus}\n            onChange={(e) => setBodyFocus(e)}\n          >\n            {allBodyfocus.map((bodyfocus) => (\n              <Option value={bodyfocus._id}>{bodyfocus.name}</Option>\n            ))}\n          </Select>\n          <Button\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              border: \"none\",\n              color: \"white\",\n              float: \"right\",\n              marginTop: \"5px\",\n            }}\n            onClick={() => setShowBodyfocusModal(true)}\n          >\n            Manage Body Focus\n          </Button>\n        </Form.Item>\n\n        <Form.Item label=\"Fitness Interests\" name=\"fitnessInterest\">\n          {console.log(\n            \"allTrainerGoals\",\n            allTrainerGoals,\n            selectedFitnessInterest\n          )}\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={selectedFitnessInterest}\n            onChange={(e) => setSelectedFitnessInterest(e)}\n          >\n            {allTrainerGoals.map((g) => (\n              <Option value={g._id}>{g.name}</Option>\n            ))}\n          </Select>\n          <Button\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              border: \"none\",\n              color: \"white\",\n              float: \"right\",\n              marginTop: \"5px\",\n            }}\n            onClick={() => setFitnessInterestModal(true)}\n          >\n            Manage Fitness Interests\n          </Button>\n        </Form.Item>\n\n        {/* <Form.Item label=\"Equipment\" name=\"equipment\">\n          <Select\n            mode=\"multiple\"\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={equipments}\n            onChange={(e) => setEquipments(e)}\n          >\n            {allEquipments.map((equipment) => (\n              <Option value={equipment._id}>{equipment.name}</Option>\n            ))}\n          </Select>\n          <Button\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              border: \"none\",\n              color: \"white\",\n              float: \"right\",\n              marginTop: \"5px\",\n            }}\n            onClick={() => setEquipmentModal(true)}\n          >\n            Manage Equipments\n          </Button>\n        </Form.Item> */}\n        <Form.Item label=\"Duration\" name=\"duration\">\n          {/* <Select\n            allowClear\n            style={{ width: \"100%\" }}\n            placeholder=\"Please select\"\n            value={duration}\n            onChange={(e) => setDuration(e)}\n          >\n            <Option value=\"long\">Long</Option>\n            <Option value=\"short\">Short</Option>\n          </Select> */}\n          <Input\n            value={duration}\n            type=\"number\"\n            placeholder=\"Please enter duration in minutes\"\n            onChange={(e) => setDuration(e.target.value)}\n          />\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nexport default NewChallengeMainTab;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\UserManager\\UpdateUser.js",["1042","1043","1044","1045","1046","1047","1048"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Select, Modal } from \"antd\";\nimport {\n  LoadingOutlined,\n  CloseSquareOutlined,\n  UploadOutlined,\n} from \"@ant-design/icons\";\nimport { registerUser } from \"../../../services/authentication\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { updateUserProfileByAdmin } from \"../../../services/users\";\nimport {\n  getAllTrainerGoals,\n  updateTrainerById,\n} from \"../../../services/trainers\";\n\nconst { Option } = Select;\nfunction UpdateUser({\n  userInfo,\n  show,\n  setShow,\n  onUpdateComplete,\n  fetchUsers,\n  allChallengeGoals,\n}) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // user stuff\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [membership, setMembership] = useState(\"\");\n  const [hero, setHero] = useState(\"\");\n  const [videoTrailer, setVideoTrailer] = useState(\"\");\n  const [motto, setMotto] = useState(\"\");\n  const [bio, setBio] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const [allCountries, setAllCountries] = useState([]);\n  const [goals, setGoals] = useState([]);\n  const [gender, setGender] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [allTrainerGoals, setAllTrainerGoals] = useState([]);\n  const [selectedFitnessInterest, setSelectedFitnessInterest] = useState(\"\");\n\n  useEffect(() => {\n    const allCountries = require(\"../../../assets/data/all-countries.json\");\n    setAllCountries(allCountries);\n    fetchData();\n    console.log(\"user info\", userInfo);\n    form.setFieldsValue({\n      username: userInfo.username,\n      firstName: userInfo.firstName,\n      lastName: userInfo.lastName,\n      email: userInfo.email,\n      role: userInfo.role ? userInfo.role.toUpperCase() : \"\",\n      bio: userInfo.bio,\n      country: userInfo.country,\n      avatarLink: userInfo.avatarLink,\n      hero: userInfo.heroBanner,\n      motto: userInfo.motto,\n      videoTrailer: userInfo.videoTrailerLink,\n      goals: userInfo.trainerGoals ? userInfo.trainerGoals : [],\n      gender: userInfo.gender,\n    });\n    setUsername(userInfo.username);\n    setEmail(userInfo.email);\n    setFirstName(userInfo.firstName);\n    setLastName(userInfo.lastName);\n    setBio(userInfo.bio);\n    setGender(userInfo.gender);\n    userInfo.avatarLink &&\n      setAvatar({ name: userInfo.avatarLink, link: userInfo.avatarLink });\n    setCountry(userInfo.country);\n    userInfo.heroBanner &&\n      setHero({ name: userInfo.heroBanner, link: userInfo.heroBanner });\n    setMotto(userInfo.motto);\n    setGoals(userInfo.goals ? userInfo.goals : []);\n    userInfo.videoTrailerLink &&\n      setVideoTrailer({\n        name: userInfo.videoTrailerLink,\n        link: userInfo.videoTrailerLink,\n      });\n\n    userInfo.role && setRole(userInfo.role.toUpperCase());\n  }, []);\n\n  const onFinish = (values) => {\n    console.log(\"Success:\", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const fetchData = async () => {\n    const res = await getAllTrainerGoals();\n    if (res.goals) {\n      setAllTrainerGoals(res.goals);\n    }\n\n    console.log(\"res\", res);\n  };\n  // function generatePass() {\n  //   var length = 10,\n  //     charset =\n  //       \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  //     retVal = \"\";\n  //   for (var i = 0, n = charset.length; i < length; ++i) {\n  //     retVal += charset.charAt(Math.floor(Math.random() * n));\n  //   }\n  //   setPassword(retVal);\n  //   form.setFieldsValue({\n  //     password: retVal,\n  //   });\n  //   return retVal;\n  // }\n\n  const createANewUser = async () => {\n    let flag = false;\n    console.log(\"here\", flag);\n    if (username && firstName && lastName && email) {\n      flag = true;\n    }\n    console.log(\"here\", flag);\n    if (flag) {\n      if (role === \"ADMIN\") {\n        const data = {\n          firstName,\n          lastName,\n          email,\n          username,\n          gender,\n          role: role.toLowerCase(),\n        };\n        const res = await updateUserProfileByAdmin(data, userInfo._id);\n        fetchUsers();\n        console.log(\"ADMIN CREATED\", res);\n        setLoading(false);\n      } else if (role === \"TRAINER\") {\n        const data = {\n          firstName,\n          lastName,\n          password,\n          email,\n          username,\n          role: role.toLowerCase(),\n          heroBanner: typeof hero === \"object\" ? hero.link : hero,\n          videoTrailerLink:\n            typeof videoTrailer === \"object\" ? videoTrailer.link : videoTrailer,\n          motto,\n          bio,\n          country,\n          gender,\n          trainersFitnessInterest: selectedFitnessInterest,\n          avatarLink: typeof avatar === \"object\" ? avatar.link : avatar,\n          trainerGoals: goals,\n        };\n        const res = await updateTrainerById(userInfo._id, data);\n        fetchUsers();\n        console.log(\"TRAINER CREATED\", res);\n        setLoading(false);\n      } else {\n        const data = {\n          firstName,\n          lastName,\n          password,\n          email,\n          username,\n          gender,\n          role: role.toLowerCase(),\n          hero: typeof hero === \"object\" ? hero.link : hero,\n          videoTrailer:\n            typeof videoTrailer === \"object\" ? videoTrailer.link : videoTrailer,\n          motto,\n          bio,\n          country,\n          avatar: typeof avatar === \"object\" ? avatar.link : avatar,\n        };\n        const res = await updateUserProfileByAdmin(data, userInfo._id);\n\n        console.log(\"AUTHOR NUTRIENT SHOP MANAGER CREATED\", res);\n        fetchUsers();\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <Modal\n      width=\"60%\"\n      visible={show}\n      footer={false}\n      onCancel={() => setShow(false)}\n      onOk={onUpdateComplete}\n    >\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      <h2 className=\"font-heading-white\">Update User</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          name=\"basic\"\n          layout=\"vertical\"\n          form={form}\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Username\"\n            name=\"username\"\n            rules={[{ required: true, message: \"Please input username!\" }]}\n          >\n            <Input\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"email\"\n            label=\"Email Address\"\n            rules={[\n              {\n                type: \"email\",\n                message: \"The input is not valid E-mail!\",\n              },\n              {\n                required: true,\n                message: \"Please input your E-mail!\",\n              },\n            ]}\n          >\n            <Input\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              disabled={true}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"First Name\"\n            name=\"firstName\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              value={firstName}\n              onChange={(e) => setFirstName(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            label=\"Last Name\"\n            name=\"lastName\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input\n              value={lastName}\n              onChange={(e) => setLastName(e.target.value)}\n            />\n          </Form.Item>\n\n          <Form.Item name=\"gender\" label=\"Gender\">\n            <Select\n              className=\"field-focus-orange-border\"\n              placeholder=\"Select A Gender\"\n              value={gender}\n              onChange={(e) => setGender(e)}\n              allowClear\n            >\n              <Option value=\"male\">Male</Option>\n              <Option value=\"female\">Female</Option>\n              <Option value=\"other\">Other</Option>\n            </Select>\n          </Form.Item>\n\n          {/* <Form.Item\n            label=\"Password\"\n            name=\"password\"\n            rules={[{ required: true, message: \"Please input your password!\" }]}\n          >\n            <Input.Password\n              style={{ color: \"black\" }}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              className=\"font-paragraph-white\"\n              onClick={() => generatePass()}\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                float: \"right\",\n                margin: \"10px\",\n              }}\n            >\n              Generate Strong Password\n            </Button>\n          </Form.Item> */}\n\n          <Form.Item\n            name=\"role\"\n            label=\"Role\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              disabled={true}\n              className=\"field-focus-orange-border\"\n              placeholder=\"Select A Role\"\n              onChange={(e) => setRole(e)}\n              allowClear\n            >\n              <Option value=\"ADMIN\">Admin</Option>\n              <Option value=\"TRAINER\">Trainer</Option>\n              <Option value=\"AUTHOR\">Author</Option>\n              <Option value=\"NUTRITIONIST\">Nutritionist</Option>\n              <Option value=\"SHOP-MANAGER\">Shop Manager</Option>\n            </Select>\n          </Form.Item>\n          {role.includes(\"CUSTOMER\") ? (\n            <Form.Item\n              name=\"membership\"\n              label=\"Membership\"\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n            >\n              <Select\n                mode=\"multiple\"\n                className=\"field-focus-orange-border\"\n                placeholder=\"Select A Membership\"\n                onChange={(e) => setMembership(e)}\n                allowClear\n              >\n                {[\n                  \"Challenge Three\",\n                  \"Challenge One\",\n                  \"Challenge Twelve\",\n                  \"Free\",\n                ].map((e) => (\n                  <Option value={e}>{e}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          ) : (\n            \"\"\n          )}\n\n          {!role.includes(\"ADMIN\") && (\n            <>\n              <Form.Item label=\"Avatar\" name=\"avatar\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"images\");\n                    setMediaManagerActions([avatar, setAvatar]);\n                  }}\n                >\n                  Upload Image\n                </Button>\n                {avatar && (\n                  <div style={{ margin: \"10px\" }}>\n                    <img\n                      src={\n                        avatar.link ===\n                        \"https://thumbs.dreamstime.com/b/default-avatar-photo-placeholder-profile-icon-eps-file-easy-to-edit-default-avatar-photo-placeholder-profile-icon-124557887.jpg\"\n                          ? avatar.link\n                          : `${avatar.link}`\n                      }\n                      height=\"120px\"\n                      width=\"150px\"\n                      alt=\"\"\n                    />\n                    <div>\n                      {avatar.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setAvatar(\"\")}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Form.Item>\n\n              <Form.Item label=\"Hero\" name=\"hero\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"images\");\n                    setMediaManagerActions([hero, setHero]);\n                  }}\n                >\n                  Upload Image\n                </Button>\n                {hero && (\n                  <div style={{ margin: \"10px\" }}>\n                    <img\n                      src={`${hero.link}`}\n                      alt=\"\"\n                      height=\"150px\"\n                      width=\"200px\"\n                    />\n                    <div>\n                      {hero.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setHero(\"\")}\n                      />\n                    </div>\n                  </div>\n                )}\n              </Form.Item>\n\n              <Form.Item label=\"Video Trailer\" name=\"videoTrailer\">\n                <Button\n                  onClick={() => {\n                    setMediaManagerVisible(true);\n                    setMediaManagerType(\"videos\");\n                    setMediaManagerActions([videoTrailer, setVideoTrailer]);\n                  }}\n                >\n                  Upload Video\n                </Button>\n                {videoTrailer && (\n                  <div style={{ margin: \"10px\" }}>\n                    <span>\n                      {videoTrailer.name}{\" \"}\n                      <CloseSquareOutlined\n                        style={{ cursor: \"pointer\" }}\n                        onClick={() => setVideoTrailer(\"\")}\n                      />\n                    </span>\n                  </div>\n                )}\n              </Form.Item>\n              <Form.Item label=\"Motto\" name=\"motto\">\n                <Input\n                  value={motto}\n                  onChange={(e) => setMotto(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item label=\"Bio\" name=\"bio\">\n                <Input.TextArea\n                  rows={8}\n                  value={bio}\n                  onChange={(e) => setBio(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item label=\"Country\" name=\"country\">\n                <Select\n                  value={country}\n                  style={{ width: \"100%\" }}\n                  onChange={(e) => setCountry(e)}\n                  showSearch\n                >\n                  {allCountries.map((co) => (\n                    <Option value={co.name}>{co.name}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </>\n          )}\n          {role.includes(\"TRAINER\") && (\n            <Form.Item label=\"Goals\" name=\"goals\">\n              <Select\n                value={goals}\n                style={{ width: \"100%\" }}\n                onChange={(e) => setGoals(e)}\n                mode=\"multiple\"\n              >\n                {allChallengeGoals.map((e) => (\n                  <Option value={e._id}>{e.name}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          )}\n          {role.includes(\"TRAINER\") && (\n            <Form.Item label=\"Fitness Interests\" name=\"fitnessInterest\">\n              <Select\n                mode=\"multiple\"\n                allowClear\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                value={\n                  selectedFitnessInterest.length <= 0\n                    ? []\n                    : selectedFitnessInterest\n                }\n                onChange={(e) => setSelectedFitnessInterest(e)}\n              >\n                {allTrainerGoals.map((g) => (\n                  <Option value={g._id}>{g.name}</Option>\n                ))}\n              </Select>\n            </Form.Item>\n          )}\n\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n              }}\n              onClick={createANewUser}\n            >\n              Update\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default UpdateUser;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ShopManager\\UpdateProduct.js",["1049","1050","1051","1052"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Select, Checkbox, List, Modal } from \"antd\";\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\nimport RemoteMediaManager from \"../MediaManager/RemoteMediaManager\";\nimport { getAllCategories, updateProduct } from \"../../../services/shop\";\nimport { withRouter } from \"react-router-dom\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nfunction UpdateProduct(props) {\n  const [form] = Form.useForm();\n  // media manager stuff\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\n  const [mediaManagerType, setMediaManagerType] = useState(\"images\");\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\n  // products\n  const [productName, setProductName] = useState(\"\");\n  const [productDesc, setProductDesc] = useState(\"\");\n  const [productImg, setProductImg] = useState([]);\n  const [category, setCategory] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [instock, setInstock] = useState(true);\n  const [weight, setWeight] = useState(0);\n  const [dimensions, setDimensions] = useState({\n    length: \"\",\n    width: \"\",\n    height: \"\",\n  });\n  const [allCategories, setAllCategories] = useState([]);\n\n  const fethData = async () => {\n    const data = await getAllCategories();\n    setAllCategories(data.categories);\n    // console.log(props.match.params.productId);\n  };\n\n  useEffect(() => {\n    console.log(props.selectedProduct);\n    form.setFieldsValue({\n      productName: props.selectedProduct.name,\n      productDesc: props.selectedProduct.description,\n      category: props.selectedProduct._id,\n      price: props.selectedProduct.price,\n      weight: props.selectedProduct.weight,\n      inStock: props.selectedProduct.inStock,\n    });\n    props.selectedProduct.dimensions &&\n      setDimensions(props.selectedProduct.dimensions);\n    props.selectedProduct.inStock && setInstock(props.selectedProduct.inStock);\n    props.selectedProduct.uploadImages &&\n      setProductImg(props.selectedProduct.uploadImages);\n    fethData();\n  }, [props.selectedProduct]);\n  const onFinish = async (values) => {\n    console.log(\"Success:\", values);\n    const uploadImages = productImg.map((i) => {\n      if (typeof i === \"object\") {\n        return i.link;\n      }\n      return i;\n    });\n    const d = {\n      name: values.productName,\n      description: values.productDesc,\n      category: values.category,\n      price: values.price,\n      weight: values.weight,\n      dimensions: dimensions,\n      uploadImages: uploadImages,\n      instock: values.inStock,\n    };\n    await updateProduct(d, props.selectedProduct._id);\n    // console.log(d);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const removeImage = (link) => {\n    const imgs = productImg.filter((i) => i.link !== link);\n    setProductImg(imgs);\n  };\n  return (\n    <Modal\n      visible={props.visible}\n      onCancel={() => {\n        props.setVisible(!props.visible);\n        props.getAllProducts();\n      }}\n      width=\"80vw\"\n      key={props.key}\n      footer={false}\n    >\n      {/* media manager */}\n      <RemoteMediaManager\n        visible={mediaManagerVisible}\n        setVisible={setMediaManagerVisible}\n        type={mediaManagerType}\n        actions={mediaManagerActions}\n      />\n      {/*  */}\n\n      <h2 className=\"font-heading-white\">Update Product</h2>\n      <div\n        className=\"admin-newuser-container\"\n        style={{ padding: \"50px 50px 50px 20px\" }}\n      >\n        <Form\n          layout=\"vertical\"\n          name=\"basic\"\n          form={form}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label=\"Product Name\"\n            name=\"productName\"\n            rules={[{ required: true, message: \"Please input product name!\" }]}\n          >\n            <Input\n              value={productName}\n              onChange={(e) => setProductName(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"productDesc\"\n            label=\"Product Description\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input description!\",\n              },\n            ]}\n          >\n            <TextArea\n              rows={4}\n              value={productDesc}\n              onChange={(e) => setProductDesc(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item name=\"category\" label=\"Category\">\n            <Select\n              className=\"field-focus-orange-border\"\n              placeholder=\"Select A Category\"\n              onChange={(e) => setCategory(e)}\n              allowClear\n            >\n              {allCategories.map((cat) => (\n                <Option value={cat._id}>{cat.name}</Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            name=\"price\"\n            label=\"Price\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input price!\",\n              },\n            ]}\n          >\n            <Input\n              addonBefore=\"€\"\n              value={price}\n              type=\"number\"\n              onChange={(e) => setPrice(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item name=\"weight\" label=\"Weight\">\n            <Input\n              addonBefore=\"Kg\"\n              value={weight}\n              type=\"number\"\n              onChange={(e) => setWeight(e.target.value)}\n            />\n          </Form.Item>\n          <Form.Item name=\"dimensions\" label=\"Dimensions\">\n            <Input\n              placeholder=\"Length\"\n              value={dimensions.length}\n              style={{ width: 100 }}\n              type=\"number\"\n              onChange={(e) =>\n                setDimensions({ ...dimensions, length: e.target.value })\n              }\n            />\n            <Input\n              placeholder=\"Width\"\n              style={{ width: 100 }}\n              value={dimensions.width}\n              type=\"number\"\n              onChange={(e) =>\n                setDimensions({ ...dimensions, width: e.target.value })\n              }\n            />\n            <Input\n              placeholder=\"Height\"\n              value={dimensions.height}\n              type=\"number\"\n              style={{ width: 100 }}\n              onChange={(e) =>\n                setDimensions({ ...dimensions, height: e.target.value })\n              }\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"uploadImg\"\n            valuePropName=\"checked\"\n            label=\"Upload Images\"\n          >\n            <Button\n              onClick={() => {\n                setMediaManagerVisible(true);\n                setMediaManagerType(\"images\");\n                setMediaManagerActions([productImg, setProductImg, \"multiple\"]);\n              }}\n            >\n              Upload File\n            </Button>\n            <div style={{ display: \"flex\" }}>\n              {productImg.map((img) => (\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    marginRight: \"15px\",\n                    marginTop: \"10px\",\n                  }}\n                >\n                  <img\n                    alt=\"\"\n                    src={`${typeof img === \"object\" ? img.link : img}`}\n                    height=\"100px\"\n                  />\n                  <span>\n                    <CloseSquareOutlined\n                      style={{ cursor: \"pointer\" }}\n                      onClick={() => removeImage(img.link)}\n                    />\n                  </span>\n                </div>\n              ))}\n            </div>\n          </Form.Item>\n          <Form.Item\n            name=\"inStock\"\n            valuePropName=\"inStock\"\n            label=\"In Stock\"\n            rules={[\n              {\n                required: true,\n                message: \"Please mark if the item is in stock!\",\n              },\n            ]}\n          >\n            <Input\n              type=\"checkbox\"\n              checked={instock}\n              onChange={(e) => setInstock(e.target.checked)}\n            ></Input>\n          </Form.Item>\n\n          <Form.Item>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              style={{\n                backgroundColor: \"var(--color-orange)\",\n                borderColor: \"var(--color-orange)\",\n              }}\n            >\n              Update\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </Modal>\n  );\n}\n\nexport default withRouter(UpdateProduct);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\RenderedVideoPlayer.js",["1053","1054","1055","1056","1057"],"import React, { useContext, useRef, useEffect, useState } from \"react\";\nimport \"../../assets/video-player-design.css\";\nimport \"../../assets/player.css\";\nimport ReactPlayer from \"react-player\";\nimport BreakTimer from \"./BreakTimer\";\nimport PlayerControls from \"./PlayerControls\";\nimport tune from \"../../assets/music/break-start.wav\";\nimport {\n  breakContext,\n  exerciseWorkoutTimeTrackContext,\n  playerStateContext,\n  timerVisibleContext,\n} from \"../../contexts/PlayerState\";\n\nvar count = 0;\n\nconst playAudio = () => {\n  new Audio(tune).play();\n};\n\nfunction RenderedVideoPlayer({\n  exercise,\n  musics,\n  moveToNextExercise,\n  moveToPrevExercise,\n  nextExerciseTitle,\n  completed,\n  // for full screen player video browser\n  workout,\n  setExerciseForHelpModal,\n  setOpenHelpModal,\n  setCurrentExercise,\n  currentExercise,\n  challengePageAddress,\n  inCreation,\n}) {\n  const [timerVisible, setTimerVisible] = useContext(timerVisibleContext);\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\n    exerciseWorkoutTimeTrackContext\n  );\n  const [exerciseSeconds, setExerciseSeconds] = useState(-1);\n  const playerRef = useRef(null);\n  const playerContainerRef = useRef(null);\n  const controlsRef = useRef(null);\n  const descriptionRef = useRef(null);\n  const hasHandledEnd = useRef(false);\n\n  useEffect(() => {\n    if (workout) {\n      const sumAllBreakTime = workout.exercises?.reduce(\n        (a, b) => a + (b[\"break\"] || 0),\n        0\n      );\n      const sumAllExerciseDuration = workout.exercises?.reduce(\n        (a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0),\n        0\n      );\n      const d = sumAllExerciseDuration + sumAllBreakTime;\n      setExerciseWorkoutTimeTrack((prev) => ({ ...prev, total: d }));\n    }\n  }, [workout]);\n\n  useEffect(() => {\n    if (exercise) {\n      if (exercise.exerciseLength) {\n        setExerciseSeconds(parseInt(exercise.exerciseLength));\n      } else if (playerRef.current && playerRef.current.getDuration) {\n        setExerciseSeconds(Math.round(playerRef.current.getDuration()));\n      }\n    }\n  }, [exercise]);\n\n  useEffect(() => {\n    if (exerciseSeconds === 0 && !hasHandledEnd.current) {\n      hasHandledEnd.current = true;\n      if (!inCreation) {\n        playAudio();\n      }\n\n      if (workout?.exercises && workout.exercises[currentExercise.index + 1]) {\n        setPlayerState((prev) => ({ ...prev, playing: false }));\n        setTimeout(() => {\n          setTimerVisible(true);\n        }, 500);\n      } else {\n        moveToNextExercise();\n      }\n    }\n\n    // reset the flag if we're in a new exercise\n    if (exerciseSeconds > 0 && hasHandledEnd.current) {\n      hasHandledEnd.current = false;\n    }\n  }, [exerciseSeconds]);\n\n  const handleProgress = (changeState) => {\n    if (count > 1) {\n      controlsRef.current.style.visibility = \"hidden\";\n      descriptionRef.current.style.visibility = \"visible\";\n      count = 0;\n    }\n    if (controlsRef.current.style.visibility === \"visible\") {\n      count += 1;\n    }\n\n    if (exerciseSeconds > 0 && playerState.playing && !playerState.loading) {\n      setExerciseSeconds(exerciseSeconds - 1);\n      setExerciseWorkoutTimeTrack((prev) => ({\n        ...prev,\n        current: prev.current + 1,\n      }));\n    }\n\n    setPlayerState((prev) => ({ ...prev, progress: changeState }));\n  };\n\n  const handleMouseMove = () => {\n    controlsRef.current.style.visibility = \"visible\";\n    descriptionRef.current.style.visibility = \"hidden\";\n    count = 0;\n  };\n\n  // Don't show the timer if no exercise is available\n  const shouldShowTimer =\n    timerVisible &&\n    workout?.exercises &&\n    currentExercise.index > 0 &&\n    workout.exercises[currentExercise.index - 1];\n\n  return (\n    <div\n      className=\"player-wrapper\"\n      style={{\n        position: \"relative\",\n        minHeight: \"450px\",\n      }}\n      ref={playerContainerRef}\n      onMouseMove={handleMouseMove}\n    >\n      <ReactPlayer\n        ref={playerRef}\n        className=\"react-player\"\n        onBuffer={() => {\n          setPlayerState((prev) => ({ ...prev, loading: true }));\n        }}\n        onBufferEnd={() => {\n          setPlayerState((prev) => ({ ...prev, loading: false }));\n        }}\n        playing={playerState.playing}\n        muted={playerState.muted}\n        loop={true}\n        volume={playerState.volume}\n        url={exercise?.videoURL ? `${exercise.videoURL}` : \"\"}\n        progress={playerState.progress}\n        onProgress={handleProgress}\n        width=\"100%\"\n        height=\"100%\"\n        controls={false}\n      />\n\n      <PlayerControls\n        ref={controlsRef}\n        descriptionRef={descriptionRef}\n        playerRef={playerRef}\n        exerciseTitle={exercise?.title ? exercise.title : \"\"}\n        exerciseLength={exercise?.exerciseLength ? exercise.exerciseLength : \"\"}\n        breakTime={exercise?.break ? exercise.break : \"\"}\n        playerContainerRef={playerContainerRef}\n        musicList={musics}\n        challengePageAddress={challengePageAddress}\n        exerciseSeconds={exerciseSeconds}\n        // for full screen player video browser\n        workout={workout}\n        setExerciseForHelpModal={setExerciseForHelpModal}\n        setOpenHelpModal={setOpenHelpModal}\n        setCurrentExercise={setCurrentExercise}\n        currentExercise={currentExercise}\n        moveToNextExercise={moveToNextExercise}\n        moveToPrevExercise={moveToPrevExercise}\n        inCreation={inCreation}\n      />\n\n      {shouldShowTimer && !inCreation && (\n        <BreakTimer\n          moveToNextExercise={moveToNextExercise}\n          nextExerciseTitle={nextExerciseTitle}\n          exercise={workout.exercises[currentExercise.index - 1]}\n          timerVisible={timerVisible}\n          setTimerVisible={setTimerVisible}\n        />\n      )}\n\n      <div></div>\n    </div>\n  );\n}\n\nexport default RenderedVideoPlayer;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\NonRenderedVideoPlayer.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\services\\adminRequests.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\EditTypeName.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\FaqManager\\UpdateFaq.js",["1058","1059","1060"],"import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Select, Modal, List, Checkbox } from \"antd\";\nimport { CloseSquareOutlined } from \"@ant-design/icons\";\nimport { createPost } from \"../../../services/posts\";\nimport {\n  createFaqCategory,\n  getAllFaqCategories,\n  removeFaqCategory,\n  updateFaq,\n} from \"../../../services/faqs\";\nimport EditTypeName from \"./EditTypeName\";\nconst { Option } = Select;\n\nfunction UpdateFaq({ visible, setVisible, selectedFaq, getAllFaqs }) {\n  const [form] = Form.useForm();\n  const [category, setCategory] = useState([]);\n  const [categoryModal, setCategoryModal] = useState(false);\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [allCategories, setAllCategories] = useState([]);\n  const [isPublic, setIsPublic] = useState(true);\n\n  // update stuff\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\n    useState(false);\n\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = useState({});\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\n    useState(\"\");\n\n  const fetchData = async () => {\n    const aC = await getAllFaqCategories();\n    // console.log(aC);\n    if (aC) {\n      setAllCategories(aC.categories);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n\n    form.setFieldsValue({\n      question: selectedFaq.question,\n      answer: selectedFaq.answer,\n      isPublic: selectedFaq.isPublic,\n      category: selectedFaq.category,\n    });\n\n    setIsPublic(selectedFaq.isPublic);\n    selectedFaq.category && setCategory(selectedFaq.category);\n  }, []);\n\n  const removeCategory = async (id) => {\n    await removeFaqCategory(id);\n    fetchData();\n  };\n  const onFinish = async (values) => {\n    const data = {\n      ...values,\n      category,\n      isPublic,\n    };\n    console.log(data);\n    await updateFaq(data, selectedFaq._id);\n    getAllFaqs();\n    setVisible(false);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  return (\n    <>\n      {/*  */}\n      <EditTypeName\n        editItemNameModalVisible={editItemNameModalVisible}\n        setEditItemModelVisible={setEditItemNameModalVisible}\n        fethData={fetchData}\n        selectedItemForUpdate={selectedItemForUpdate}\n        titleName={selectedItemForUpdateTitle}\n      />\n      {/* modal to create a new goal */}\n      <Modal\n        onCancel={() => setCategoryModal(false)}\n        footer={false}\n        visible={categoryModal}\n      >\n        <p className=\"font-paragraph-white\">Categories</p>\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <Input\n            value={newCategoryName}\n            onChange={(e) => setNewCategoryName(e.target.value)}\n          />\n          <Button\n            type=\"primary\"\n            htmlType=\"submit\"\n            style={{\n              backgroundColor: \"var(--color-orange)\",\n              borderColor: \"var(--color-orange)\",\n              marginLeft: \"5px\",\n            }}\n            onClick={async () => {\n              if (newCategoryName.length > 0) {\n                await createFaqCategory(newCategoryName);\n                // setShowGoalModal(false);\n                fetchData();\n              }\n            }}\n          >\n            Create Category\n          </Button>\n        </div>\n        <div style={{ height: \"300px\", overflow: \"auto\", marginTop: \"10px\" }}>\n          <span className=\"font-subheading-white\">All Categories</span>\n          <List\n            size=\"small\"\n            bordered\n            dataSource={allCategories}\n            renderItem={(cat) => (\n              <List.Item\n                style={{\n                  backgroundColor: \"#fff\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                }}\n                key={cat._id}\n              >\n                <span>{cat.name}</span>\n\n                <span>\n                  <Button\n                    onClick={async () => {\n                      removeCategory(cat._id);\n                    }}\n                    style={{ marginRight: \"10px\" }}\n                    type=\"primary\"\n                    danger\n                  >\n                    Delete\n                  </Button>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      setSelectedItemForUpdateTitle(\"Update Faq Category\");\n                      setSelectedItemForUpdate(cat);\n                      setEditItemNameModalVisible(true);\n                    }}\n                  >\n                    Edit\n                  </Button>\n                </span>\n              </List.Item>\n            )}\n          />\n        </div>\n      </Modal>\n\n      <Modal\n        visible={visible}\n        onCancel={() => setVisible(false)}\n        footer={false}\n        width=\"70%\"\n      >\n        <h2 className=\"font-heading-white\">Update FAQ</h2>\n        <div\n          className=\"admin-newuser-container\"\n          style={{ padding: \"50px 50px 50px 20px\" }}\n        >\n          <Form\n            layout=\"vertical\"\n            name=\"basic\"\n            form={form}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n          >\n            <Form.Item\n              label=\"Question\"\n              name=\"question\"\n              rules={[{ required: true, message: \"Please input question!\" }]}\n            >\n              <Input.TextArea rows={3} />\n            </Form.Item>\n            <Form.Item\n              label=\"Answer\"\n              name=\"answer\"\n              rules={[{ required: true, message: \"Please input answer!\" }]}\n            >\n              <Input.TextArea rows={6} />\n            </Form.Item>\n\n            <Form.Item label=\"Category\" name=\"category\">\n              <Select\n                mode=\"multiple\"\n                allowClear\n                style={{ width: \"100%\" }}\n                placeholder=\"Please select\"\n                value={category}\n                onChange={(e) => setCategory(e)}\n              >\n                {allCategories.map((cat) => (\n                  <Option value={cat._id} key={cat._id}>\n                    {cat.name}\n                  </Option>\n                ))}\n              </Select>\n              <Button\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  border: \"none\",\n                  color: \"white\",\n                  float: \"right\",\n                  marginTop: \"5px\",\n                }}\n                onClick={() => setCategoryModal(true)}\n              >\n                Manage Category\n              </Button>\n            </Form.Item>\n\n            <Form.Item>\n              <Checkbox\n                checked={isPublic}\n                onChange={(e) => setIsPublic(e.target.checked)}\n              >\n                Make public\n              </Checkbox>\n            </Form.Item>\n            {/* footer */}\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{\n                  backgroundColor: \"var(--color-orange)\",\n                  borderColor: \"var(--color-orange)\",\n                  marginTop: \"10px\",\n                }}\n              >\n                Update\n              </Button>\n            </Form.Item>\n          </Form>\n        </div>\n      </Modal>\n    </>\n  );\n}\n\nexport default UpdateFaq;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Challenge\\AddNewButton.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeReviewModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ReplaceFreeChallengePopup.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\PopupPlayer\\PopupPlayer.js",["1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072"],"import React, { useState, useEffect, useRef } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport { VideoSeekSlider } from \"react-video-seek-slider\";\nimport {\n  CaretRightOutlined,\n  PauseOutlined,\n  CloseOutlined,\n} from \"@ant-design/icons\";\nimport Modal from \"react-modal\";\nimport SquarePT from \"../../assets/icons/Square-PT.png\";\n// import PlayerPlayIcon from \"../../assets/icons/player-play-icon.svg\";\nimport PopupPlayIcon from \"../../assets/icons/help-pop-out-play-icon.svg\";\nimport PopupPauseIcon from \"../../assets/icons/help-pop-out-pause-icon.svg\";\n// import PlayerPauseIcon from \"../../assets/icons/player-pause-icon.svg\";\nimport \"../../assets/helpPopupPlayer.css\";\n\nconst formatTime = (seconds) => {\n  if (isNaN(seconds)) {\n    return \"00:00\";\n  }\n\n  const date = new Date(seconds * 1000);\n  const hh = date.getUTCHours();\n  const mm = date.getUTCMinutes();\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\n  if (hh) {\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\n  }\n  return `${mm}:${ss}`;\n};\n\nfunction PopupPlayer({ open, setOpen, onCancel, video }) {\n  const playerRef = useRef(null);\n  const [progress, setProgress] = useState({});\n  const [playing, setPlaying] = useState(false);\n\n  return (\n    <Modal\n      isOpen={open}\n      onRequestClose={() => {\n        setPlaying(false);\n        onCancel();\n      }}\n      contentLabel=\"Example Modal\"\n      style={{ zIndex: 3 }}\n    >\n      <div\n        style={{\n          marginBottom: \"10px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}></div>\n        <CloseOutlined\n          style={{ color: \"#fff\", fontSize: \"30px\", cursor: \"pointer\" }}\n          onClick={() => {\n            setPlaying(false);\n            onCancel();\n          }}\n        />\n      </div>\n      <div\n        className=\"helpPopOut-player-wrapper\"\n        style={{ position: \"relative\" }}\n      >\n        <ReactPlayer\n          width=\"100%\"\n          height=\"100%\"\n          url={`${video}`}\n          loop={true}\n          controls={true}\n          muted={false}\n          playing={playing}\n          stopOnUnmount={false}\n        />\n      </div>\n    </Modal>\n  );\n}\n\nexport default PopupPlayer;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeCompleteModal.js",["1073","1074"],"import React, { useState, useEffect, useContext } from \"react\";\nimport Modal from \"react-modal\";\nimport ClappingIcon from \"../../assets/icons/large-clapping-icon.svg\";\nimport YelloIcon from \"../../assets/icons/yellow-diamond-icon.svg\";\nimport \"../../assets/challengeCompletedModal.css\";\nimport { Button, Input, Rate } from \"antd\";\nimport { ReactComponent as FacebookIcon } from \"../../assets/icons/complete-challenge-facebook-button.svg\";\nimport { ReactComponent as TwitterIcon } from \"../../assets/icons/complete-challenge-twitter-button.svg\";\nimport { ReactComponent as InstagramIcon } from \"../../assets/icons/complete-challenge-instagram-button.svg\";\nimport { ReactComponent as PintrestIcon } from \"../../assets/icons/complete-challenge-pinterest-button.svg\";\nimport { ReactComponent as LinkedinIcon } from \"../../assets/icons/complete-challenge-linkedin-button.svg\";\nimport { addChallengeReview } from \"../../services/createChallenge/main\";\nimport { getRecommandedChallenges } from \"../../services/users\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport ChallengeCompleteNextModal from \"./ChallengeCompleteNextModal\";\nimport { createPost } from \"../../services/communityPosts\";\nimport slug from \"elegant-slug\";\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\n\nconst ChallengeCompleteModal = ({\n  visible,\n  setVisible,\n  points,\n  challenge,\n  challengeId,\n  fetchData,\n}) => {\n  const userInfo = useContext(userInfoContext)[0];\n  const { language } = useContext(LanguageContext);\n  const [input, setInput] = useState(\"\");\n  const [rating, setRating] = useState(1);\n  const [currentLayout, setCurrentLayout] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [recommandedChallenges, setRecommandedChallenges] = useState([]);\n\n  useEffect(() => {\n    if (userInfo.id) {\n      getNextChallenges();\n    }\n  }, []);\n\n  const getNextChallenges = async () => {\n    setLoading(true);\n    const rc = await getRecommandedChallenges(userInfo.id, language);\n    rc && setRecommandedChallenges(rc.recommendedchallenge);\n    setLoading(false);\n  };\n  const submitReview = async () => {\n    // console.log(challenge);\n    // return;\n    if (input.length > 0 && rating) {\n      const data = {\n        title: `I have completed ${challenge?.challengeName}`,\n        text: input,\n        image: challenge?.thumbnailLink,\n        type: \"Finished Completed\",\n        url: `/challenge/${slug(challenge?.challengeName)}/${challenge?._id}`,\n        language: language,\n      };\n\n      const res = await addChallengeReview(\n        challengeId,\n        rating,\n        input,\n        language\n      );\n      await createPost(data);\n\n      if (res.success) {\n        setVisible(false);\n        fetchData();\n      }\n      // console.log(\"ewvie\", res);\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={visible}\n      onRequestClose={() => setVisible(false)}\n      contentLabel=\"Example Modal\"\n    >\n      {currentLayout === 1 ? (\n        <div className=\"challenge-complete-modal-container\">\n          <div className=\"challenge-complete-modal-container--c1\">\n            <img src={ClappingIcon} alt=\"clapping-icon\" />\n            <h3 className=\"font-heading-white\">Well done!</h3>\n            <p className=\"font-paragraph-white\">\n              {\" \"}\n              <img src={YelloIcon} alt=\"points-earned\" />{\" \"}\n              <span>{challenge?.points} points earned</span>\n            </p>\n            <span className=\"font-paragraph-white\">\n              You did it! Congratulations on finishing the challenge. Keep this\n              momentum going and continue creating these healthy habits for a\n              happy balanced healthy lifestyle\n            </span>\n          </div>\n          <div className=\"challenge-complete-modal-container--c2\">\n            <div className=\"challenge-complete-modal-container--c2--r1\">\n              <p className=\"font-paragraph-white\">\n                Please review this challenge.\n              </p>\n              <Input.TextArea\n                rows={3}\n                onChange={(e) => setInput(e.target.value)}\n                value={input}\n              />\n              <Rate onChange={(e) => setRating(e)} value={rating} />\n              <button\n                className=\"common-transparent-button font-paragraph-white\"\n                onClick={submitReview}\n                style={{\n                  border: \"2px solid #ff7700\",\n                  display: \"block\",\n                  marginTop: \"10px\",\n                  padding: \"10px 50px\",\n                  cursor: \"pointer\",\n                }}\n              >\n                Submit\n              </button>\n            </div>\n            <div className=\"challenge-complete-modal-container--c2--r2\">\n              <p className=\"font-paragraph-white\">Spread the word :)</p>\n              <div>\n                <FacebookIcon className=\"challenge-completed-icon\" />\n                <TwitterIcon className=\"challenge-completed-icon\" />\n                <InstagramIcon className=\"challenge-completed-icon\" />\n                <LinkedinIcon className=\"challenge-completed-icon\" />\n                <PintrestIcon className=\"challenge-completed-icon\" />\n              </div>\n              <button\n                className=\"common-transparent-button font-paragraph-white\"\n                onClick={() => setCurrentLayout(2)}\n                style={{\n                  border: \"2px solid #ff7700\",\n                  display: \"block\",\n                  marginTop: \"10px\",\n                  padding: \"10px 50px\",\n                  cursor: \"pointer\",\n                }}\n              >\n                Next\n              </button>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ChallengeCompleteNextModal\n          goBack={() => setCurrentLayout(1)}\n          loading={loading}\n          recommandedChallenges={recommandedChallenges}\n        />\n      )}\n    </Modal>\n  );\n};\nexport default ChallengeCompleteModal;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\EditTypeName.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\PlayerControls.js",["1075","1076","1077","1078"],"import React, { forwardRef, useState, useContext, useEffect } from \"react\";\nimport FullScreenPlayerVideosBrowser from \"./FullScreenPlayerVideosBrowser\";\nimport { VideoSeekSlider } from \"react-video-seek-slider\";\nimport { Link } from \"react-router-dom\";\nimport \"react-video-seek-slider/lib/ui-video-seek-slider.css\";\nimport { PauseOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport PlayerAudioIcon from \"../../assets/icons/player-audio-icon.svg\";\nimport PlayerAudioMuteIcon from \"../../assets/icons/player-audio-mute-icon.svg\";\nimport PlayerChromeIcon from \"../../assets/icons/chrome-tv-icon.svg\";\nimport PlayerMusicIcon from \"../../assets/icons/player-music-icon.svg\";\nimport PlayerSmallFullscreenIcon from \"../../assets/icons/player-fullscreen-small-icon.svg\";\nimport SmPlayerAudioIcon from \"../../assets/icons/sm-player-audio-icon.svg\";\nimport SmPlayerAudioMuteIcon from \"../../assets/icons/sm-player-audio-mute-icon.svg\";\nimport SmPlayerChromeIcon from \"../../assets/icons/sm-chrome-tv-icon.svg\";\nimport SmPlayerMusicIcon from \"../../assets/icons/sm-player-music-icon.svg\";\nimport SmPlayerFullscreenIcon from \"../../assets/icons/sm-player-fullscreen-icon.svg\";\nimport {\n  exerciseWorkoutTimeTrackContext,\n  playerFullscreenContext,\n  playerStateContext,\n} from \"../../contexts/PlayerState\";\nimport screenfull from \"screenfull\";\nimport MusicPlayer from \"./MusicPlayer\";\nimport SkipLeftIcon from \"../../assets/icons/player-play-left-icon.svg\";\nimport SkipRightIcon from \"../../assets/icons/player-play-right-icon.svg\";\nimport PlayerPlayIcon from \"../../assets/icons/player-play-icon.svg\";\nimport PlayerPauseIcon from \"../../assets/icons/player-pause-icon.svg\";\nimport BackButton from \"../../assets/icons/big-back-button.svg\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\n\nconst playerIconStyle = {\n  // width: \"24px\",\n  cursor: \"pointer\",\n  marginRight: \"10px\",\n};\nconst formatTime = (seconds) => {\n  if (isNaN(seconds)) {\n    return \"00:00\";\n    // return \"0 sec\";\n  }\n\n  const date = new Date(seconds * 1000);\n  const hh = date.getUTCHours();\n  const mm = date.getUTCMinutes();\n  const ss = date.getUTCSeconds().toString().padStart(2, \"0\");\n  if (hh) {\n    return `${hh}:${mm.toString().padStart(2, \"0\")}:${ss}`;\n  }\n  return `${mm}:${ss}`;\n  // return `${Math.round(seconds)} sec`;\n};\n\nfunction PlayerControls(\n  {\n    playerRef,\n    playerContainerRef,\n    descriptionRef,\n    exerciseTitle,\n    exerciseLength,\n    breakTime,\n    musicList,\n    exerciseSeconds,\n    // for full screen player video browser\n    resumeSecondsCounter,\n    pauseSecondsCounter,\n    workout,\n    setExerciseForHelpModal,\n    setOpenHelpModal,\n    setCurrentExercise,\n    currentExercise,\n    moveToNextExercise,\n    moveToPrevExercise,\n    challengePageAddress,\n    inCreation,\n  },\n  ref\n) {\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [musicPlayerVisible, setMusicPlayerVisible] = useState(false);\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\n    exerciseWorkoutTimeTrackContext\n  );\n  const { height, width } = useWindowDimensions();\n\n  useEffect(() => {\n    console.log(\"lworkout\", exerciseWorkoutTimeTrack);\n  }, [exerciseWorkoutTimeTrack]);\n  useEffect(() => {\n    if (\n      width === playerContainerRef.current.clientWidth &&\n      height === playerContainerRef.current.clientHeight\n    ) {\n      setFullscreen(true);\n      console.log(\"in full screen\");\n    } else {\n      setFullscreen(false);\n    }\n  });\n  const currentTime = playerRef.current\n    ? playerRef.current.getCurrentTime()\n    : \"00:00\";\n  // const currentTime = playerRef.current\n  //   ? playerRef.current.getCurrentTime()\n  //   : \"0 sec\";\n  const duration = playerRef.current\n    ? playerRef.current.getDuration()\n    : \"00:00\";\n  // const duration = playerRef.current\n  //   ? playerRef.current.getDuration()\n  //   : \"0 sec\";\n  const elapsedTime = formatTime(currentTime);\n  const totalDuration = formatTime(duration);\n\n  const onMute = () => {\n    setPlayerState({ ...playerState, muted: !playerState.muted });\n  };\n\n  const onPlayPause = () => {\n    setPlayerState({ ...playerState, playing: !playerState.playing });\n  };\n\n  const toggleFullscreen = () => {\n    if (fullscreen) {\n      setFullscreen(false);\n    } else {\n      setFullscreen(true);\n    }\n\n    screenfull.toggle(playerContainerRef.current);\n    console.log(screenfull.isFullscreen, playerContainerRef.current);\n  };\n\n  const onSeek = (e) => {\n    setPlayerState({\n      ...playerState,\n      progress: { ...playerState.progress, played: parseFloat(e / 100) },\n    });\n    playerRef.current.seekTo(e / 100);\n  };\n\n  const handleRewind = () => {\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() - 15);\n  };\n\n  const handleFastforward = () => {\n    playerRef.current.seekTo(playerRef.current.getCurrentTime() + 15);\n  };\n\n  return (\n    <div>\n      <div className=\"controls-details\" ref={descriptionRef}>\n        <div className=\"controls-details-top-title font-paragraph-white\">\n          <span>{exerciseTitle}</span>\n          {exerciseLength && (\n            <span style={{ marginTop: \"10px\" }}>\n              <span style={{ fontSize: \"26px\", marginRight: \"5px\" }}>\n                {exerciseLength || Math.round(exerciseSeconds)}\n              </span>\n              Sec\n            </span>\n          )}\n        </div>\n        {console.log(workout, currentExercise)}\n        <div className=\"controls-details-bottom-title font-paragraph-white\">\n          {breakTime && (\n            <span>\n              Up next: Rest\n              <span style={{ fontSize: \"26px\", margin: \"0 5px\" }}>\n                {breakTime}\n              </span>\n              sec\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"controls-wrapper\" ref={ref}>\n        {fullscreen && (\n          <FullScreenPlayerVideosBrowser\n            showVideos={true}\n            workout={workout}\n            setExerciseForHelpModal={setExerciseForHelpModal}\n            setOpenHelpModal={setOpenHelpModal}\n            setCurrentExercise={setCurrentExercise}\n            currentExercise={currentExercise}\n          />\n        )}\n        <div>\n          <MusicPlayer\n            musicList={musicList}\n            setMusicPlayerVisible={setMusicPlayerVisible}\n            visible={musicPlayerVisible}\n          />\n        </div>\n\n        <div className=\"controls-wrapper-top\">\n          <div>\n            {(fullscreen || width <= 768) && (\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <Link\n                  to={challengePageAddress}\n                  style={{\n                    color: \"#ff7700\",\n                    alignSelf: \"flex-start\",\n                    marginTop: \"10px\",\n                  }}\n                >\n                  <img\n                    src={BackButton}\n                    alt=\"back-button\"\n                    className=\"player-back-button\"\n                  />\n                </Link>\n                <div className=\"player-back-text\">\n                  <span className=\"font-heading-white\">{workout.title}</span>\n                  <span className=\"font-paragraph-white\">\n                    {workout.subtitle}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"player-top-icons\">\n            {fullscreen ? (\n              <>\n                {playerState.muted ? (\n                  <img\n                    src={PlayerAudioMuteIcon}\n                    alt=\"player-audio-icon\"\n                    style={playerIconStyle}\n                    onClick={onMute}\n                  />\n                ) : (\n                  <img\n                    onClick={onMute}\n                    src={PlayerAudioIcon}\n                    alt=\"player-audio-icon\"\n                    style={playerIconStyle}\n                  />\n                )}\n                <img\n                  src={PlayerChromeIcon}\n                  alt=\"player-chrome-icon\"\n                  style={playerIconStyle}\n                />\n                <img\n                  src={PlayerMusicIcon}\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\n                  alt=\"player-music-icon\"\n                  style={playerIconStyle}\n                />\n                <img\n                  src={PlayerSmallFullscreenIcon}\n                  alt=\"player-fullscreen-icon\"\n                  style={playerIconStyle}\n                  onClick={toggleFullscreen}\n                />\n              </>\n            ) : (\n              <>\n                {playerState.muted ? (\n                  <img\n                    src={SmPlayerAudioMuteIcon}\n                    alt=\"player-audio-icon\"\n                    style={playerIconStyle}\n                    onClick={onMute}\n                  />\n                ) : (\n                  <img\n                    onClick={onMute}\n                    src={SmPlayerAudioIcon}\n                    alt=\"player-audio-icon\"\n                    style={playerIconStyle}\n                  />\n                )}\n                {/* <img\n                  src={SmPlayerChromeIcon}\n                  alt=\"player-chrome-icon\"\n                  style={playerIconStyle}\n                /> */}\n                <img\n                  src={SmPlayerMusicIcon}\n                  onClick={() => setMusicPlayerVisible(!musicPlayerVisible)}\n                  alt=\"player-music-icon\"\n                  style={playerIconStyle}\n                />\n                {!inCreation && (\n                  <img\n                    src={SmPlayerFullscreenIcon}\n                    alt=\"player-fullscreen-icon\"\n                    style={playerIconStyle}\n                    onClick={toggleFullscreen}\n                  />\n                )}\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* middle controls */}\n        {playerState.loading ? (\n          <span\n            style={{\n              height: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <LoadingOutlined\n              style={{\n                color: \"var(--color-orange)\",\n              }}\n              className=\"middle-player-icons\"\n            />\n          </span>\n        ) : (\n          <div className=\"controls-wrapper-middle\">\n            <span className=\"controls-wrapper-middle-icons\"></span>\n\n            <span className=\"controls-wrapper-middle-icons\"></span>\n          </div>\n        )}\n\n        {!workout.renderWorkout ? (\n          <>\n            <div\n              className=\"controls-wrapper-bottom\"\n              style={{ position: \"relative\" }}\n            >\n              <span className=\"font-paragraph-white player-elasped-time-container\">\n                {elapsedTime}\n              </span>\n              <div>\n                <img\n                  src={SkipLeftIcon}\n                  alt=\"skip-left-icon\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={handleRewind}\n                />\n                <span className=\"font-paragraph-white\">15</span>\n                {playerState.playing ? (\n                  // PlayerPauseIcon\n                  <img\n                    src={PlayerPauseIcon}\n                    alt=\"skip-left-icon\"\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\n                    className=\"controls-wrapper-bottom-icons\"\n                    onClick={onPlayPause}\n                  />\n                ) : (\n                  <img\n                    src={PlayerPlayIcon}\n                    alt=\"skip-left-icon\"\n                    style={{ cursor: \"pointer\", margin: \"0 20px 0 35px\" }}\n                    className=\"controls-wrapper-bottom-icons\"\n                    onClick={onPlayPause}\n                  />\n                )}\n                <span className=\"font-paragraph-white\">15</span>\n                <img\n                  src={SkipRightIcon}\n                  alt=\"skip-left-icon\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={handleFastforward}\n                />\n              </div>\n              <span\n                className=\"font-paragraph-white player-elasped-time-container\"\n                style={{ textAlign: \"right\" }}\n              >\n                {totalDuration}\n              </span>\n            </div>\n            <div style={{ margin: \"0 30px 0 35px\", paddingBottom: \"20px\" }}>\n              <VideoSeekSlider\n                max={100}\n                currentTime={playerState.progress.played * 100}\n                progress={playerState.progress.loaded * 100}\n                onChange={onSeek}\n                offset={0}\n                limitTimeTooltipBySides={true}\n                hideSeekTimes={false}\n                secondsPrefix=\"00:00:\"\n                minutesPrefix=\"00:\"\n                tipFormatter={(v) => `${elapsedTime}`}\n              />\n            </div>\n          </>\n        ) : (\n          <>\n            <div\n              className=\"controls-wrapper-bottom\"\n              style={{ position: \"relative\" }}\n            >\n              <span className=\"font-paragraph-white player-elasped-time-container\">\n                {/* {elapsedTime} */}\n                {formatTime(exerciseWorkoutTimeTrack.current)}\n              </span>\n              <div>\n                <img\n                  src={SkipLeftIcon}\n                  alt=\"skip-left-icon\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    if (currentExercise && currentExercise.index !== 0) {\n                      const s =\n                        parseInt(exerciseLength) - parseInt(exerciseSeconds);\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s, parseInt(workout.exercises[currentExercise.index - 1].exerciseLength))\n                      // setTotalDurationTimer(totalDurationTimer - s - parseInt(workout.exercises[currentExercise.index - 1].exerciseLength));\n                      moveToPrevExercise();\n                    }\n                  }}\n                />\n                {/* PlayerPlayIcon */}\n                {playerState.playing ? (\n                  <img\n                    src={PlayerPauseIcon}\n                    alt=\"skip-left-icon\"\n                    style={{ cursor: \"pointer\", margin: \"0 30px 0 30px\" }}\n                    className=\"controls-wrapper-bottom-icons\"\n                    onClick={onPlayPause}\n                  />\n                ) : (\n                  <img\n                    src={PlayerPlayIcon}\n                    alt=\"skip-left-icon\"\n                    style={{ cursor: \"pointer\", margin: \"0 25px 0 35px\" }}\n                    className=\"controls-wrapper-bottom-icons\"\n                    onClick={onPlayPause}\n                  />\n                )}\n                <img\n                  src={SkipRightIcon}\n                  alt=\"skip-left-icon\"\n                  style={{ cursor: \"pointer\" }}\n                  onClick={() => {\n                    if (\n                      currentExercise &&\n                      currentExercise.index !== workout.exercises.length - 1\n                    ) {\n                      // const s = parseInt(exerciseLength);\n                      // console.log(\"exerciseSeconds\",totalDurationTimer,s)\n                      // setTotalDurationTimer(totalDurationTimer + s);\n                      moveToNextExercise();\n                    }\n                  }}\n                />\n              </div>\n              <span\n                className=\"font-paragraph-white player-elasped-time-container\"\n                style={{ textAlign: \"right\" }}\n              >\n                {/* {totalDuration} */}\n                {formatTime(exerciseWorkoutTimeTrack.total)}\n              </span>\n            </div>\n            <div\n              className=\"react-player-stepper-container\"\n              style={{\n                gridTemplateColumns: `repeat(${\n                  workout && workout.exercises.length\n                }, 1fr)`,\n              }}\n            >\n              {workout &&\n                workout.exercises.map((j, i) => (\n                  <div\n                    className=\"react-player-stepper\"\n                    style={{\n                      background:\n                        currentExercise &&\n                        currentExercise.index === i &&\n                        currentExercise.index !== -1\n                          ? \"#fff\"\n                          : \"#FB7600\",\n                    }}\n                  ></div>\n                ))}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default forwardRef(PlayerControls);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Challenge\\ChallengeCompleteNextModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\MusicPlayer.js",["1079","1080","1081","1082","1083","1084","1085","1086"],"import React, { useState, useContext, useEffect } from \"react\";\nimport { Modal, Slider } from \"antd\";\nimport ReactPlayer from \"react-player\";\n// import { Scrollbars } from \"react-custom-scrollbars\";\nimport { CloseOutlined, CustomerServiceOutlined } from \"@ant-design/icons\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\n\nimport MusicIcon from \"../../assets/icons/music-player-volume-icon.png\";\nimport MuteMusicIcon from \"../../assets/icons/music-player-volume-mute-icon.png\";\nimport MusicListIcon from \"../../assets/icons/music-list-icon.png\";\nimport PlayerState, {\n  breakContext,\n  playerStateContext,\n} from \"../../contexts/PlayerState\";\n\nfunction MusicPlayer({ visible, setMusicPlayerVisible, musicList }) {\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\n  const { height, width } = useWindowDimensions();\n  const [currentPlaying, setCurrentPLaying] = useState({\n    id: 12345,\n    _id: 12345,\n    name: \"\",\n    url: \"\",\n  });\n  const [volume, setVolume] = useState(100);\n  const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n    if (playerState.playing) {\n      localStorage.setItem(\"music-playing\", true);\n      return;\n    }\n\n    // if (currentBreak && !playerState.playing) {\n    //   localStorage.setItem(\"music-playing\", true);\n    //   return;\n    // }\n\n    localStorage.removeItem(\"music-playing\");\n  }, [playerState.playing, currentBreak]);\n  const handleOnMusicSelect = (m) => {\n    if (m === \"stop\") {\n      console.log(\"hereere\");\n      // setPlaying(false);\n      setCurrentPLaying({\n        _id: 12345,\n        name: \"\",\n        url: \"\",\n      });\n      localStorage.removeItem(\"music-playing\");\n      return;\n    }\n\n    setCurrentPLaying(m);\n    localStorage.setItem(\"music-playing\", true);\n    // setPlaying(true);\n  };\n  const onVolumeChange = (e) => {\n    // volume needs to be between 0 and 1\n    setVolume(e / 100);\n  };\n  // const onPlayPause = () => {\n  //   setPlaying((prev) => !prev);\n  // };\n  return (\n    <div\n      className=\"music-player-modal-container\"\n      style={{ display: visible ? \"flex\" : \"none\" }}\n    >\n      {console.log(\"currentPlaying\", musicList)}\n      <CloseOutlined\n        onClick={() => setMusicPlayerVisible(false)}\n        style={{\n          color: \"rgb(255, 255, 255)\",\n          top: \"20px\",\n          position: \"absolute\",\n          fontSize: \"30px\",\n          right: \"50px\",\n        }}\n      />\n      <ReactPlayer\n        width=\"100%\"\n        height=\"100px\"\n        url={`${currentPlaying.url || currentPlaying.link}`}\n        style={{ outline: \"none\", border: \"none\", display: \"none\" }}\n        playing={localStorage.getItem(\"music-playing\")}\n        controls={false}\n        volume={volume}\n        loop={true}\n      />\n      <div className=\"music-player-slider-container\">\n        <img src={MuteMusicIcon} alt=\"\" />\n        <Slider\n          value={volume * 100}\n          min={0}\n          max={100}\n          style={{ width: \"70%\", display: \"inline-block\" }}\n          onChange={onVolumeChange}\n          onAfterChange={onVolumeChange}\n          tipFormatter={(v) => `${v}%`}\n        />\n        <img src={MusicIcon} alt=\"\" />\n      </div>\n      <div className=\"music-player-modal-container--list\">\n        <img src={MusicListIcon} alt=\"music-list-icon\" />{\" \"}\n        <h3 className=\"font-paragraph-white\">Choose your mood</h3>\n        <div className=\"music-player-modal-container--list-files\">\n          <div key={1234} onClick={() => handleOnMusicSelect(\"stop\")}>\n            <span\n              style={{\n                color:\n                  currentPlaying._id !== 12345 ? \"#fff\" : \"var(--color-orange)\",\n                transform:\n                  currentPlaying._id !== 12345 ? \"scale(1)\" : \"scale(1.02)\",\n                display: \"flex\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n                gap: \"10px\",\n              }}\n              className=\"font-paragraph-white\"\n            >\n              <CustomerServiceOutlined />\n              <span\n                style={{\n                  maxWidth: \"300px\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                  display: \"inline-block\",\n                  verticalAlign: \"bottom\",\n                }}\n              >\n                No Music\n              </span>\n            </span>\n          </div>\n          {musicList.map((m) => (\n            <div key={m._id} onClick={() => handleOnMusicSelect(m)}>\n              {console.log(\"ammar\", currentPlaying, m)}\n              <span\n                className=\"font-paragraph-white\"\n                style={{\n                  color:\n                    (currentPlaying?._id &&\n                      m?._id &&\n                      currentPlaying._id === m._id) ||\n                    (currentPlaying?.id && m?.id && currentPlaying.id === m.id)\n                      ? \"var(--color-orange)\"\n                      : \"#fff\",\n                  transform:\n                    (currentPlaying?._id &&\n                      m?._id &&\n                      currentPlaying._id === m._id) ||\n                    (currentPlaying?.id && m?.id && currentPlaying.id === m.id)\n                      ? \"scale(1.02)\"\n                      : \"scale(1)\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  cursor: \"pointer\",\n                  gap: \"10px\",\n                }}\n              >\n                <CustomerServiceOutlined />\n                <span\n                  style={{\n                    maxWidth: \"300px\",\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                    display: \"inline-block\",\n                    verticalAlign: \"bottom\",\n                  }}\n                >\n                  {m.name}\n                </span>\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n    // </Modal>\n  );\n}\n\nexport default MusicPlayer;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\FullScreenPlayerVideosBrowser.js",["1087"],"import React, { useContext } from \"react\";\nimport \"../../assets/FullScreenPlayerVideoBrowser.css\";\nimport {\n  playerFullscreenContext,\n  playerStateContext,\n} from \"../../contexts/PlayerState\";\nimport PlayerVideoBrowser from \"./PlayerVideoBrowser\";\n\nfunction FullScreenPlayerVideosBrowser({\n  showVideos,\n  workout,\n  setExerciseForHelpModal,\n  setOpenHelpModal,\n  setCurrentExercise,\n  currentExercise,\n}) {\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\n  return showVideos ? (\n    <div className=\"fspvb-container\">\n      {/* <h1 style={{ color: \"white\" }}>fAGGOT</h1> */}\n      <PlayerVideoBrowser\n        fullscreen={fullscreen}\n        workout={workout}\n        playerState={playerState}\n        setPlayerState={setPlayerState}\n        setExerciseForHelpModal={setExerciseForHelpModal}\n        setOpenHelpModal={setOpenHelpModal}\n        setCurrentExercise={setCurrentExercise}\n        currentExercise={currentExercise}\n        fromFullScreen={true}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n}\n\nexport default FullScreenPlayerVideosBrowser;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Player\\BreakTimer.js",["1088","1089","1090","1091"],"import React, { useEffect, useContext } from \"react\";\nimport Countdown from \"react-countdown\";\nimport { Progress } from \"antd\";\nimport tune from \"../../assets/music/break-end.wav\";\nimport {\n  breakContext,\n  playerStateContext,\n  timerVisibleContext,\n} from \"../../contexts/PlayerState\";\n\nfunction BreakTimer({ exercise, nextExerciseTitle, moveToNextExercise }) {\n  const [currentBreak, setCurrentBreak] = useContext(breakContext);\n  const [playerState, setPlayerState] = useContext(playerStateContext);\n  const [timerVisible, setTimerVisible] = useContext(timerVisibleContext);\n\n  useEffect(() => {\n    // Only run this once when the component mounts\n    if (!exercise?.break) {\n      moveToNextExercise();\n      setTimerVisible(false);\n      setCurrentBreak(false);\n    } else {\n      // Only set currentBreak to true on mount if we're actually showing a break\n      setCurrentBreak(true);\n    }\n  }, []);\n\n  const playAudio = () => {\n    new Audio(tune).play();\n  };\n\n  const CountdownDisplay = ({ hours, minutes, seconds, total }) => {\n    const totalSeconds = total / 1000;\n    const givenSeconds = (exercise?.break * 1000) / 1000;\n    const progress = ((givenSeconds - totalSeconds) / givenSeconds) * 100;\n    return (\n      <div className=\"inner-layout-break\">\n        <div style={{ width: \"30%\", textAlign: \"center\" }}>\n          <span style={{ marginTop: \"10px\" }}>\n            <span className=\"inner-layout-break-totalsecs\">{totalSeconds}</span>\n            <span className=\"inner-layout-break-sec\">Sec</span>\n          </span>\n          <Progress percent={progress} showInfo={false} />\n        </div>\n        <div className=\"inner-layout-break-text\">\n          {nextExerciseTitle ? (\n            <>\n              <span>\n                {exercise?.exerciseGroupName === \"Introduction\"\n                  ? \"First Exercise\"\n                  : \"Next Exercise\"}\n              </span>{\" \"}\n              <span>{nextExerciseTitle}</span>\n            </>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"break-layout-for-player\">\n      <Countdown\n        date={Date.now() + (exercise?.break || 0) * 1000}\n        renderer={CountdownDisplay}\n        onMount={() => {\n          // Don't call moveToNextExercise here - it's likely causing a loop\n          // Just ensure the player is paused during the break\n          setPlayerState((prevState) => ({ ...prevState, playing: false }));\n          console.log(\"break mounted\");\n        }}\n        onTick={(e) => {\n          if (e.seconds === 3) {\n            playAudio();\n          }\n          console.log(\"tick tick tick mf\", e);\n        }}\n        onComplete={(e) => {\n          console.log(\"timer completed\");\n          setTimerVisible(false);\n          setCurrentBreak(false);\n          moveToNextExercise();\n          setPlayerState((prevState) => ({ ...prevState, playing: true }));\n          console.log(\"break ended\");\n        }}\n      />\n    </div>\n  );\n}\n\nexport default React.memo(BreakTimer);\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWeekPanel.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomWorkoutPanel.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\UserDashboard\\CommentSection.js",["1092","1093","1094","1095"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { CloseOutlined, UserOutlined } from \"@ant-design/icons\";\n// import { Scrollbars } from \"react-custom-scrollbars\";\nimport { Input, Button } from \"antd\";\nimport { addNewComment } from \"../../services/posts\";\nimport { addNewCommunityPostComment } from \"../../services/communityPosts\";\nimport Modal from \"react-modal\";\nimport \"../../assets/challengeReviewModal.css\";\nimport moment from \"moment\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\nimport TopIcon from \"../../assets/icons/comment-header-icon.svg\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport NoCommentBack from \"../../assets/icons/no-comments-background.svg\";\nimport Avatar from \"antd/lib/avatar/avatar\";\n\nfunction CommentSection({ post, updatePosts, visible, setVisible, community }) {\n  const userInfo = useContext(userInfoContext)[0];\n  const [newComment, setNewComment] = useState(\"\");\n  const [allComments, setAllComments] = useState([]);\n  const { width } = useWindowDimensions();\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: width < 700 ? \"90%\" : \"60%\",\n      overflow: \"hidden\",\n      // height:\"600px\"\n    },\n  };\n\n  useEffect(() => {\n    console.log(post);\n    setAllComments(post.comments ? post.comments : []);\n  }, [post]);\n\n  const addComment = async () => {\n    if (newComment.length > 0) {\n      if (community) {\n        var n = await addNewCommunityPostComment(post._id, {\n          text: newComment,\n        });\n      } else {\n        var n = await addNewComment(post._id, { text: newComment });\n      }\n\n      console.log(n);\n      setAllComments(n);\n      setNewComment(\"\");\n    }\n  };\n  return (\n    <Modal\n      isOpen={visible}\n      onRequestClose={() => {\n        setVisible(false);\n        updatePosts(post._id, allComments);\n      }}\n      style={customStyles}\n      contentLabel=\"Comments\"\n    >\n      <div className=\"challenge-review-modal-header\">\n        <span>\n          <img src={TopIcon} alt=\"\" />\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\n            COMMENTS\n          </span>\n        </span>\n        <CloseOutlined\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\n          onClick={() => {\n            setVisible(false);\n            updatePosts(post._id, allComments);\n          }}\n        />\n      </div>\n      <div className=\"challenge-review-modal\">\n        {/* todo do later */}\n        {/* <Scrollbars style={{ height: \"400px\" }}>\n          {allComments.length > 0 ? (\n            allComments.map((comment) => (\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\n              //   <span className=\"challenge-profile-comment-username\">\n              //     <UserOutlined /> {comment.username}\n              //   </span>\n              //   <span>{comment.text}</span>\n              // </div>\n              <div\n                className=\"comment-container\"\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\n              >\n                <div\n                  className=\"comment-container-c1 font-paragraph-white\"\n                  style={{\n                    alignItems: \"flex-start\",\n                    flexDirection: width < 700 ? \"column\" : \"row\",\n                  }}\n                >\n                  <Avatar src={comment.user.avatarLink} shape=\"square\" />{\" \"}\n                  <span\n                    style={{\n                      marginLeft: \"5px\",\n                      fontWeight: \"bolder\",\n                      fontSize: \"16px\",\n                    }}\n                  >\n                    {comment.user.username}\n                  </span>\n                  <div style={{ paddingLeft: width < 700 ? \"0\" : \"20px\" }}>\n                    <div\n                      className=\"comment-container-c2 font-paragraph-white\"\n                      style={{\n                        padding: 0,\n                        fontWeight: \"200\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {comment.text}\n                    </div>\n                    <div\n                      className=\"font-paragraph-white comment-container-c3\"\n                      style={{ color: \"#82868b\", padding: 0 }}\n                    >\n                      {moment(comment.createdAt).format(\"MMM, Do YY\")}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <img\n              src={NoCommentBack}\n              alt=\"\"\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n              }}\n            />\n          )}\n        </Scrollbars> */}\n        <div style={{ marginTop: \"10px\" }}>\n          <div style={{ display: \"flex\", alignItems: \"flex-start\" }}>\n            <Avatar\n              src={`${userInfo.avatar}`}\n              shape=\"square\"\n              style={{ marginRight: \"10px\" }}\n            />{\" \"}\n            <Input.TextArea\n              rows=\"3\"\n              placeholder=\"Enter New Comment\"\n              value={newComment}\n              onChange={(e) => setNewComment(e.target.value)}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              margin: \"10px 10px 10px 40px\",\n            }}\n          >\n            <Button\n              className=\"font-paragraph-white\"\n              style={{\n                padding: \"3px 20px\",\n                color: \"#fff\",\n                backgroundColor: \"transparent\",\n                border: \"2px solid #ff7700\",\n                borderRadius: \"0\",\n              }}\n              onClick={() => {\n                setVisible(false);\n                updatePosts(post._id, allComments);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              className=\"common-orange-button font-paragraph-white\"\n              style={{ padding: \"3px 10px\", borderRadius: \"0\" }}\n              onClick={() => addComment()}\n            >\n              New Comment\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default CommentSection;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\ChallengeManager\\NewChallengeWorkoutCollapse\\CustomExercisePanel.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Common\\ReviewsModal.js",["1096","1097","1098","1099","1100"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { CloseOutlined } from \"@ant-design/icons\";\n// import { Scrollbars } from \"react-custom-scrollbars\";\nimport { Input, Button, Rate } from \"antd\";\n// import { addNewComment } from \"../../services/posts\";\nimport Modal from \"react-modal\";\nimport \"../../assets/challengeReviewModal.css\";\nimport moment from \"moment\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport Avatar from \"antd/lib/avatar/avatar\";\nimport TopIcon from \"../../assets/icons/review-challenge-header-icon.svg\";\nimport BackIcon from \"../../assets/icons/review-challenge-icon.svg\";\nimport { addRecipeReview } from \"../../services/recipes\";\nimport { userInfoContext } from \"../../contexts/UserStore\";\n\nfunction ReviewsModal({ item, visible, setVisible, type, fetchData }) {\n  const [alreadyReviewd, setAlreadyReviewd] = useState(false);\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\n  const [newReview, setNewReview] = useState({ text: \"\", rating: 1 });\n  const [allReviews, setAllReviews] = useState([]);\n  const { width } = useWindowDimensions();\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      transform: \"translate(-50%, -50%)\",\n      width: width < 700 ? \"90%\" : \"60%\",\n      overflow: \"hidden\",\n      // height:\"600px\"\n    },\n  };\n\n  useEffect(() => {\n    console.log(item);\n    setAllReviews(item.reviews);\n    const g =\n      item.reviews && item.reviews.filter((f) => f.user._id === userInfo.id);\n    if (g && g.length > 0) {\n      setAlreadyReviewd(true);\n    } else {\n      setAlreadyReviewd(false);\n    }\n    //   setAllComments(post.comments ? post.comments : []);\n  }, [item]);\n\n  const addReview = async () => {\n    if (newReview.text.length > 0) {\n      if (type === \"recipes\") {\n        const n = await addRecipeReview(\n          item._id,\n          newReview.text,\n          newReview.rating\n        );\n        setVisible(false);\n        fetchData();\n        console.log(n);\n      }\n      // const n = await addNewComment(post._id, { text: newComment });\n      console.log(newReview);\n      // setAllComments(n);\n      // setNewComment(\"\");\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={visible}\n      onRequestClose={() => {\n        setVisible(false);\n      }}\n      style={customStyles}\n      contentLabel=\"Comments\"\n    >\n      <div className=\"challenge-review-modal-header\">\n        <span>\n          <img src={TopIcon} alt=\"\" />\n          <span className=\"font-paragraph-white\" style={{ marginLeft: \"10px\" }}>\n            REVIEWS\n          </span>\n        </span>\n        <CloseOutlined\n          style={{ color: \"#fff\", fontSize: \"26px\", cursor: \"pointer\" }}\n          onClick={() => {\n            setVisible(false);\n          }}\n        />\n      </div>\n      <div className=\"challenge-review-modal\">\n        {/* todo do later */}\n        {/* <Scrollbars style={{ height: \"300px\" }}>\n          {allReviews.length > 0 ? (\n            allReviews.map((review) => (\n              // <div className=\"challenge-profile-comment font-paragraph-white\">\n              //   <span className=\"challenge-profile-comment-username\">\n              //     <UserOutlined /> {comment.username}\n              //   </span>\n              //   <span>{comment.text}</span>\n              // </div>\n              <div\n                className=\"comment-container\"\n                style={{ marginBottom: width < 700 ? \"20px\" : \"10px\" }}\n              >\n                <div\n                  className=\"comment-container-c1 font-paragraph-white\"\n                  style={{\n                    alignItems: \"flex-start\",\n                    flexDirection: width < 700 ? \"column\" : \"row\",\n                  }}\n                >\n                  <span>\n                    <Avatar src={review.user.avatarLink} shape=\"square\" />{\" \"}\n                    <p\n                      style={{\n                        marginLeft: \"5px\",\n                        fontWeight: \"bolder\",\n                        fontSize: \"16px\",\n                        marginTop: \"0\",\n                        // border: \"2px solid red\",\n                        width: \"140px\",\n                        display: \"inline-block\",\n                      }}\n                    >\n                      {review.user.username}\n                    </p>\n                  </span>\n                  <div\n                    style={{\n                      paddingLeft: width < 700 ? \"0\" : \"20px\",\n                    }}\n                  >\n                    <Rate value={review.rating} disabled={true} />\n                    <div\n                      className=\"comment-container-c2 font-paragraph-white\"\n                      style={{\n                        padding: 0,\n                        fontWeight: \"200\",\n                        fontSize: \"14px\",\n                      }}\n                    >\n                      {review.comment}\n                    </div>\n                    <div\n                      className=\"font-paragraph-white comment-container-c3\"\n                      style={{ color: \"#82868b\", padding: 0 }}\n                    >\n                      {moment(review.createdAt).format(\"MMM, Do YY\")}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <img\n              src={BackIcon}\n              alt=\"\"\n              style={{\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n              }}\n            />\n          )}\n        </Scrollbars> */}\n        {localStorage.getItem(\"jwtToken\") ? (\n          !alreadyReviewd ? (\n            <div style={{ marginTop: \"10px\" }}>\n              <span style={{ display: \"flex\", alignItems: \"center\" }}>\n                <Avatar\n                  src={`${process.env.REACT_APP_SERVER}/${userInfo.avatar}`}\n                  shape=\"square\"\n                  style={{ marginRight: \"10px\" }}\n                />\n                <span style={{ width: \"100%\" }}>\n                  <Rate\n                    style={{ marginBottom: \"10px\" }}\n                    onChange={(e) =>\n                      setNewReview((prevalue) => ({ ...prevalue, rating: e }))\n                    }\n                    value={newReview.rating}\n                  />\n\n                  <Input.TextArea\n                    rows=\"3\"\n                    placeholder=\"Write your review here\"\n                    value={newReview.text}\n                    onChange={(e) =>\n                      setNewReview((preValue) => ({\n                        ...preValue,\n                        text: e.target.value,\n                      }))\n                    }\n                  />\n                </span>\n              </span>\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  margin: \"10px\",\n                }}\n              >\n                <Button\n                  className=\"font-paragraph-white\"\n                  style={{\n                    padding: \"3px 20px\",\n                    color: \"#fff\",\n                    backgroundColor: \"transparent\",\n                    border: \"2px solid #ff7700\",\n                  }}\n                  onClick={() => {\n                    setVisible(false);\n                  }}\n                >\n                  Close\n                </Button>\n                <Button\n                  className=\"common-orange-button font-paragraph-white\"\n                  style={{ padding: \"3px 10px\" }}\n                  onClick={() => addReview()}\n                >\n                  Submit\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <p className=\"font-paragraph-white\">{\"Already Reviewed\"}</p>\n          )\n        ) : (\n          <p className=\"font-paragraph-white\">\n            Please signup or login to review\n          </p>\n        )}\n      </div>\n    </Modal>\n  );\n}\n\nexport default ReviewsModal;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\New\\Wizard.js",["1101","1102","1103","1104"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { Steps, Button, InputNumber, Switch } from \"antd\";\nimport {\n  ForwardOutlined,\n  ArrowRightOutlined,\n  RightOutlined,\n  ArrowLeftOutlined,\n} from \"@ant-design/icons\";\nimport \"../../assets/wizard.css\";\nimport \"../../assets/home.css\";\nimport MaleSexLogo from \"../../assets/icons/male.svg\";\nimport FemaleSexLogo from \"../../assets/icons/female.svg\";\nimport WaistLogo from \"../../assets/icons/waist-icon.svg\";\nimport HeartcheckFont from \"../../assets/icons/heart-icon.svg\";\nimport DumbellIcon from \"../../assets/icons/dumbell-icon.svg\";\n\nimport { getAllTrainerGoals } from \"../../services/trainers\";\nimport { T } from \"../Translate\";\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\n\nconst { Step } = Steps;\n\nfunction Wizard({ setWizardCompleted }) {\n  const { language } = useContext(LanguageContext);\n  const [allFitnessInterests, setAllFitnessInterests] = useState([]);\n  const [selectedFitnessInterests, setSelectedFitnessInterests] = useState([]);\n  const [current, setCurrent] = useState(0);\n  const [gender, setGender] = useState(null);\n  const [goal, setGoal] = useState(null);\n  const [fitnessLevel, setFitnessLevel] = useState(null);\n  const [details, setDetails] = useState({\n    age: null,\n    height: null,\n    weight: null,\n    metric: true,\n  });\n  // eslint-disable-next-line\n  const [bmi, setBmi] = useState(null);\n  // eslint-disable-next-line\n  const [bodyFat, setBodyFat] = useState(null);\n  // eslint-disable-next-line\n  const [calories, setCalories] = useState(null);\n  const next = () => {\n    setCurrent(current + 1);\n  };\n\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n  useEffect(() => {\n    getAllFitnessInterests();\n  }, []);\n  useEffect(() => {\n    const getPal = () => {\n      let pal = 0;\n      switch (fitnessLevel) {\n        case \"inactive\":\n          pal = 1.2;\n          break;\n        case \"light-actve\":\n          pal = 1.45;\n          break;\n        case \"average-active\":\n          pal = 1.65;\n          break;\n        case \"active\":\n          pal = 1.85;\n          break;\n        case \"very-active\":\n          pal = 2.2;\n          break;\n        default:\n          pal = 0;\n          break;\n      }\n      console.log(pal);\n      return pal;\n    };\n    let BMI = 0;\n    let BMR = 0;\n    let c = 0;\n    BMI = details.weight / ((details.height / 100) * 2);\n    console.log(\"BMI\", BMI, getPal(), fitnessLevel);\n    if (gender === \"male\") {\n      BMR =\n        88.362 +\n        13.397 * details.weight +\n        4.799 * details.height -\n        5.677 * details.age;\n    }\n    if (gender === \"female\") {\n      BMR =\n        447.593 +\n        9.247 * details.weight +\n        3.098 * details.height -\n        4.33 * details.age;\n    }\n    c = getPal() * BMR;\n    setCalories(c.toFixed(2));\n    setBodyFat(BMR.toFixed(2));\n    setBmi(BMI.toFixed(2));\n  }, [gender, details, fitnessLevel]);\n\n  const getAllFitnessInterests = async () => {\n    const res = await getAllTrainerGoals(language);\n    if (res) {\n      console.log(res);\n      setAllFitnessInterests(res.goals);\n    }\n  };\n  function getWeightDependingOnCurrentMonth(weight) {\n    const month = new Date().getMonth();\n    const months = new Array(12).fill(0);\n    months[month] = weight;\n    return months;\n  }\n\n  function onSetWizardComplete() {\n    const d = {\n      gender,\n      goals: [goal],\n      currentFitnessLevel: [fitnessLevel],\n      age: parseInt(details.age),\n      weight: getWeightDependingOnCurrentMonth(details.weight),\n      measureSystem: \"metrics\",\n      height: parseInt(details.height),\n      bmi: parseInt(bmi),\n      bmir: parseInt(bodyFat),\n      caloriesPerDay: parseInt(calories),\n      amountOfProtein: goal === \"gain-muscle\" ? 30 : 25,\n      amountOfFat: goal === \"gain-muscle\" ? 20 : 30,\n      amountOfCarbohydrate: goal === \"gain-muscle\" ? 50 : 45,\n    };\n    setWizardCompleted(d);\n  }\n\n  const steps = [\n    {\n      // title: \"\",\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"font-heading-white\">\n            <T>wizard.wg</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>wizard.yd</T>\n          </p>\n          <div className=\"wizard-gender-selection-container\">\n            <div\n              onClick={() => {\n                setGender(\"male\");\n              }}\n              style={{\n                border:\n                  gender && gender === \"male\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-gender-selection-container-gender\"\n            >\n              <img src={MaleSexLogo} alt=\"\" />\n              <p className=\"font-paragraph-white\" style={{ fontSize: \"20px\" }}>\n                <T>wizard.man</T>\n              </p>\n            </div>\n            <div\n              onClick={() => {\n                setGender(\"female\");\n              }}\n              style={{\n                border:\n                  gender && gender === \"female\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-gender-selection-container-gender\"\n            >\n              <img src={FemaleSexLogo} alt=\"\" />\n              <p className=\"font-paragraph-white\" style={{ fontSize: \"20px\" }}>\n                <T>wizard.woman</T>\n              </p>\n            </div>\n          </div>\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => next()}\n          >\n            <span className=\"font-paragraph-white\">Next</span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"font-heading-white\">\n            <T>wizard.whatg</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>wizard.sgda</T>\n          </p>\n          <div className=\"wizard-goal-selection-container\">\n            <div\n              style={{\n                border:\n                  goal && goal === \"gain-muscle\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-goal-selection-container-goal\"\n              onClick={() => {\n                setGoal(\"gain-muscle\");\n              }}\n            >\n              <img src={DumbellIcon} alt=\"\" />\n              <span className=\"font-paragraph-white\">\n                {\" \"}\n                <T>wizard.gainmuslce</T> (Bulk)\n              </span>\n            </div>\n            <div\n              style={{\n                border:\n                  goal && goal === \"get-fit\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-goal-selection-container-goal\"\n              onClick={() => {\n                setGoal(\"get-fit\");\n              }}\n            >\n              <img src={HeartcheckFont} alt=\"\" />\n              <span className=\"font-paragraph-white\">\n                <T>wizard.getfit</T>\n              </span>\n            </div>\n            <div\n              style={{\n                border:\n                  goal && goal === \"lose-weight\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-goal-selection-container-goal\"\n              onClick={() => {\n                setGoal(\"lose-weight\");\n              }}\n            >\n              <img src={WaistLogo} alt=\"\" />\n              <span className=\"font-paragraph-white\">\n                <T>wizard.loseweight</T> (Cut)\n              </span>\n            </div>\n          </div>\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => next()}\n          >\n            <span className=\"font-paragraph-white\">Next</span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h2 className=\"font-heading-white\" style={{ fontSize: \"23px\" }}>\n            <T>wizard.currentfitness</T>\n          </h2>\n          <p className=\"font-paragraph-white\">\n            <T>wizard.smatch</T>\n          </p>\n          <div className=\"wizard-goal-selection-container\">\n            <div\n              style={{\n                border:\n                  fitnessLevel && fitnessLevel === \"inactive\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-fitness-selection-container-level font-paragraph-white\"\n              onClick={() => {\n                setFitnessLevel(\"inactive\");\n              }}\n            >\n              <ForwardOutlined\n                style={{ fontSize: \"25px\", paddingRight: \"10px\" }}\n              />{\" \"}\n              <div>\n                <T>wizard.inactive</T>\n                <br />\n                <span\n                  style={{\n                    fontSize: \"1.3rem\",\n                    display: \"block\",\n                  }}\n                >\n                  <T>wizard.sjn</T>\n                </span>\n              </div>\n            </div>\n            <div\n              style={{\n                border:\n                  fitnessLevel && fitnessLevel === \"light-actve\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-fitness-selection-container-level font-paragraph-white\"\n              onClick={() => {\n                setFitnessLevel(\"light-actve\");\n              }}\n            >\n              <ForwardOutlined\n                style={{ fontSize: \"25px\", paddingRight: \"10px\" }}\n              />{\" \"}\n              <div>\n                <T>wizard.la</T>\n                <br />\n                <span\n                  style={{\n                    fontSize: \"1.3rem\",\n                    display: \"block\",\n                  }}\n                >\n                  <T>wizard.seated</T>\n                </span>\n              </div>\n            </div>\n            <div\n              style={{\n                border:\n                  fitnessLevel && fitnessLevel === \"average-active\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-fitness-selection-container-level font-paragraph-white\"\n              onClick={() => {\n                setFitnessLevel(\"average-active\");\n              }}\n            >\n              <ForwardOutlined\n                style={{ fontSize: \"25px\", paddingRight: \"10px\" }}\n              />{\" \"}\n              <div>\n                <T>wizard.avgactive</T> <br />\n                <span\n                  style={{\n                    fontSize: \"1.3rem\",\n                    display: \"block\",\n                  }}\n                >\n                  <T>wizard.sj3</T>\n                </span>\n              </div>\n            </div>\n            <div\n              style={{\n                border:\n                  fitnessLevel && fitnessLevel === \"active\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-fitness-selection-container-level font-paragraph-white\"\n              onClick={() => {\n                setFitnessLevel(\"active\");\n              }}\n            >\n              <ForwardOutlined\n                style={{ fontSize: \"25px\", paddingRight: \"10px\" }}\n              />{\" \"}\n              <div>\n                <T>wizard.active</T> <br />\n                <span\n                  style={{\n                    fontSize: \"1.3rem\",\n                    display: \"block\",\n                  }}\n                >\n                  <T>wizard.sj4</T>\n                </span>\n              </div>\n            </div>\n            <div\n              style={{\n                border:\n                  fitnessLevel && fitnessLevel === \"very-active\"\n                    ? \"2px solid var(--color-orange)\"\n                    : \"2px solid var(--color-gray)\",\n              }}\n              className=\"wizard-fitness-selection-container-level font-paragraph-white\"\n              onClick={() => {\n                setFitnessLevel(\"very-active\");\n              }}\n            >\n              <ForwardOutlined\n                style={{ fontSize: \"25px\", paddingRight: \"10px\" }}\n              />{\" \"}\n              <div>\n                <T>wizard.veryactive</T> <br />\n                <span\n                  style={{\n                    fontSize: \"1.3rem\",\n                    display: \"block\",\n                  }}\n                >\n                  <T>wizard.hw</T>\n                </span>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => next()}\n          >\n            <span className=\"font-paragraph-white\">Next</span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h2 className=\"font-heading-white\" style={{ fontSize: \"23px\" }}>\n            Fitness Interests\n          </h2>\n          <p className=\"font-paragraph-white\" style={{ textAlign: \"left\" }}>\n            According to your goals and interests we will design the best\n            challenges fo you\n          </p>\n          <div\n            style={{\n              maxHeight: \"300px\",\n              display: \"flex\",\n              alignItems: \"flex-start\",\n              // border: \"2px solid red\",\n              flexWrap: \"wrap\",\n              overflowY: \"auto\",\n            }}\n          >\n            {allFitnessInterests &&\n              allFitnessInterests.map((i) => (\n                <span\n                  onClick={() => {\n                    if (selectedFitnessInterests.includes(i._id)) {\n                      setSelectedFitnessInterests(\n                        selectedFitnessInterests.filter(\n                          (inte) => inte !== i._id\n                        )\n                      );\n                    } else {\n                      setSelectedFitnessInterests([\n                        ...selectedFitnessInterests,\n                        i._id,\n                      ]);\n                    }\n                  }}\n                  key={i._id}\n                  style={{\n                    color: \"#fff\",\n                    fontSize: \"18px\",\n                    backgroundColor: \"#232932\",\n                    padding: \"10px\",\n                    margin: \"5px\",\n                    minWidth: \"100px\",\n                    whiteSpace: \"nowrap\",\n                    cursor: \"pointer\",\n                    border: selectedFitnessInterests.includes(i._id)\n                      ? \"2px solid var(--color-orange)\"\n                      : \"2px solid #232932\",\n                  }}\n                >\n                  <ForwardOutlined\n                    style={{ fontSize: \"25px\", paddingRight: \"5px\" }}\n                  />{\" \"}\n                  {i.name}\n                </span>\n              ))}\n          </div>\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => next()}\n          >\n            <span className=\"font-paragraph-white\">Next</span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h1 className=\"font-heading-white\">\n            <T>wizard.fd</T>\n          </h1>\n          <p className=\"font-paragraph-white\">\n            <T>wizard.almost</T>\n          </p>\n          <div className=\"finaldetails-field-container\">\n            <InputNumber\n              size=\"large\"\n              placeholder=\"Age\"\n              value={details.age}\n              onChange={(e) => setDetails({ ...details, age: e })}\n              className=\"finaldetails-field\"\n              style={{ width: \"100%\", marginTop: \"10px\" }}\n            />\n            <InputNumber\n              size=\"large\"\n              className=\"finaldetails-field\"\n              value={details.height}\n              style={{ width: \"100%\", marginTop: \"10px\" }}\n              onChange={(e) => setDetails({ ...details, height: e })}\n              placeholder={`Height ${details.metric ? \" (cm)\" : \" (ft)\"}`}\n            />\n            <InputNumber\n              size=\"large\"\n              className=\"finaldetails-field\"\n              value={details.weight}\n              onChange={(e) => setDetails({ ...details, weight: e })}\n              style={{ width: \"100%\", marginTop: \"10px\" }}\n              placeholder={`Weight ${details.metric ? \" (kg)\" : \" (lb)\"}`}\n            />\n          </div>\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => next()}\n          >\n            <span className=\"font-paragraph-white\">Next</span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n    {\n      content: (\n        <div style={{ textAlign: \"center\" }}>\n          <h2 className=\"font-heading-white\">\n            <T>wizard.improve</T>\n          </h2>\n          <p className=\"font-paragraph-white\">\n            {\" \"}\n            <T>wizard.joinfree</T>\n          </p>\n          <div\n            className=\"finaldetails-field-container\"\n            style={{ textAlign: \"left\" }}\n          >\n            <div className=\"show-detail-field font-paragraph-white\">\n              <T>wizard.bmi</T>: {bmi}\n            </div>\n            <div className=\"show-detail-field font-paragraph-white\">\n              Your Body Fat is:{\" \"}\n              {gender === \"female\"\n                ? (1.2 * bmi + 0.23 * details.age - 5.4).toFixed(2)\n                : (1.2 * bmi + 0.23 * details.age - 16.2).toFixed(2)}{\" \"}\n              %\n            </div>\n            <div className=\"show-detail-field font-paragraph-white\">\n              <T>wizard.kal</T>: {calories}\n            </div>\n          </div>\n          <div\n            style={{\n              color: \"#00ffff\",\n              fontWeight: \"400\",\n              fontSize: \"1.8rem\",\n              padding: \"10px\",\n              textAlign: \"left\",\n            }}\n          >\n            <T>wizard.gettailor</T>\n          </div>\n\n          <div\n            className=\"create-payment-check-out poppins-medium-white-20px\"\n            style={{\n              width: \"100%\",\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              cursor: \"pointer\",\n              marginTop: \"20px\",\n            }}\n            onClick={() => onSetWizardComplete()}\n          >\n            <span className=\"font-paragraph-white\">\n              <T>wizard.tryfree</T>\n            </span>\n            <ArrowRightOutlined\n              style={{ color: \"#fff\", fontSize: \"20px\", marginLeft: \"10px\" }}\n            />\n          </div>\n        </div>\n      ),\n    },\n  ];\n\n  return (\n    <div style={{ background: \"#2a2f36\" }}>\n      {current >= 1 && (\n        <button\n          onClick={prev}\n          className=\"font-paragraph-white\"\n          style={{\n            color: \"#fff\",\n            fontSize: \"18px\",\n            backgroundColor: \"var(--mirage)\",\n            padding: \"10px \",\n            float: \"left\",\n            margin: \"10px 0 0 50px\",\n            position: \"absolute\",\n            border: \"none\",\n            cursor: \"pointer\",\n          }}\n        >\n          <ArrowLeftOutlined /> Back\n        </button>\n      )}\n      <div className=\"wizard-background\">\n        <Steps current={current} style={{ width: \"280px\", marginTop: \"20px\" }}>\n          {steps.map((item) => (\n            <Step key={item.title} title={item.title} />\n          ))}\n        </Steps>\n        <div className=\"wizard-container\">\n          <div className=\"steps-content\">{steps[current].content}</div>\n          <div className=\"steps-action\">\n            {/* {current > 0 && (\n              <Button\n                type=\"link\"\n                style={{\n                  margin: \"0 8px\",\n                  opacity: \"0.8\",\n                  color: \"var(--color-white)\",\n                }}\n                onClick={() => prev()}\n                className=\"font-paragraph-white\"\n              >\n                <T>wizard.back</T>\n              </Button>\n            )} */}\n            {/* {current === steps.length - 1 && (\n            <Button\n              type=\"primary\"\n              onClick={() => message.success(\"Processing complete!</T>\n            >\n              Done\n            </Button>\n          )} */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Wizard;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Nutrition\\SearchNutrition.js",["1105"],"import React, { useState, useEffect } from \"react\";\nimport \"../../assets/home.css\";\nimport \"../../assets/trainers.css\";\nimport { Collapse, Input, Slider } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport \"../../assets/nutrition.css\";\nimport _ from \"lodash\";\n\nimport ChallengeCard from \"../Cards/ChallengeCard\";\nimport { Link } from \"react-router-dom\";\nimport useWindowDimensions from \"../../helpers/useWindowDimensions\";\nimport slug from \"elegant-slug\";\nimport { T } from \"../Translate\";\n\nfunction SearchNutrition({\n  allRecipies,\n  allDiets,\n  allMealTypes,\n  allIngredients,\n}) {\n  const [mealName, setMealName] = useState(\"\");\n  const [allMeals, setAllMeals] = useState([]);\n  const [mealTypeFilters, setMealTypeFilters] = useState([]);\n  const [ingredientsTypeFilter, setIngredientsTypeFilter] = useState([]);\n  const [dietTypeFilter, setDietTypeFilter] = useState([]);\n  const [preprationTimeFilter, setPreprationTimeFilter] = useState([5, 55]);\n  const [caloriesFilter, setCaloriesFilter] = useState([100, 955]);\n  const [filterMeals, setFilterMeals] = useState([]);\n  const { width } = useWindowDimensions();\n\n  useEffect(() => {\n    const r = allRecipies ? allRecipies.filter((r) => r.isPublic) : [];\n    setAllMeals(r);\n    console.log(r);\n    setFilterMeals(r);\n  }, [allRecipies]);\n\n  // useEffect(\n  //   () => {\n  //     let filteredWithMealType = allMeals.map((meal) => {\n  //       if (mealTypeFilters.every((val) => meal.mealTypes.includes(val))) {\n  //         return meal;\n  //       } else {\n  //         return undefined;\n  //       }\n  //     });\n  //     filteredWithMealType = allMeals.map((meal) => {\n  //       if (\n  //         ingredientsTypeFilter.every((val) => meal.ingredients.includes(val))\n  //       ) {\n  //         return meal;\n  //       } else {\n  //         return undefined;\n  //       }\n  //     });\n  //     filteredWithMealType = allMeals.map((meal) => {\n  //       if (dietTypeFilter.every((val) => meal.diet.includes(val))) {\n  //         return meal;\n  //       } else {\n  //         return undefined;\n  //       }\n  //     });\n  //     filteredWithMealType = allMeals.map((meal) => {\n  //       if (\n  //         meal.preprationTime >= preprationTimeFilter[0] &&\n  //         meal.preprationTime < preprationTimeFilter[1]\n  //       ) {\n  //         console.log(\"here\");\n  //         return meal;\n  //       } else {\n  //         return undefined;\n  //       }\n  //     });\n  //     filteredWithMealType = allMeals.map((meal) => {\n  //       if (\n  //         meal.calories >= caloriesFilter[0] &&\n  //         meal.calories < caloriesFilter[1]\n  //       ) {\n  //         console.log(\"here\");\n  //         return meal;\n  //       } else {\n  //         return undefined;\n  //       }\n  //     });\n  //     setFilterMeals(_.compact(filteredWithMealType));\n  //   },\n  //   // eslint-disable-next-line\n  //   [\n  //     // filteredWithMealType,\n  //     mealTypeFilters,\n  //     ingredientsTypeFilter,\n  //     dietTypeFilter,\n  //     preprationTimeFilter,\n  //     caloriesFilter,\n  //   ]\n  // );\n\n  function onSelectFilter(type, value) {\n    if (type === \"mealType\") {\n      const check = mealTypeFilters.includes(value);\n      if (check) {\n        const newArray = mealTypeFilters.filter((str) => str !== value);\n        setMealTypeFilters(newArray);\n        // console.log(\"====>\", newArray);\n      } else {\n        setMealTypeFilters((prev) => [...prev, value]);\n      }\n      console.log(value);\n      console.log(check);\n      console.log(mealTypeFilters);\n    }\n    if (type === \"ingredientsType\") {\n      const check = ingredientsTypeFilter.includes(value);\n      if (check) {\n        const newArray = ingredientsTypeFilter.filter((str) => str !== value);\n        setIngredientsTypeFilter(newArray);\n        // console.log(\"====>\", newArray);\n      } else {\n        setIngredientsTypeFilter((prev) => [...prev, value]);\n      }\n      console.log(value);\n      console.log(check);\n      console.log(mealTypeFilters);\n    }\n    if (type === \"diet\") {\n      const check = dietTypeFilter.includes(value);\n      if (check) {\n        const newArray = dietTypeFilter.filter((str) => str !== value);\n        setDietTypeFilter(newArray);\n        // console.log(\"====>\", newArray);\n      } else {\n        setDietTypeFilter((prev) => [...prev, value]);\n      }\n\n      console.log(value);\n      console.log(check);\n      console.log(mealTypeFilters);\n    }\n  }\n  function removeAllFilters() {\n    setMealTypeFilters([]);\n    setIngredientsTypeFilter([]);\n    setDietTypeFilter([]);\n    setPreprationTimeFilter([5, 55]);\n    setCaloriesFilter([100, 955]);\n    setFilterMeals(allRecipies);\n  }\n  return (\n    <div className=\"search-nutrition-container\">\n      {/* trainers */}\n      <div className=\"trainers-3-row\">\n        <Input\n          size=\"large\"\n          placeholder=\"Search Keyword\"\n          style={{\n            backgroundColor: \"transparent\",\n            padding: \"20px\",\n            color: \"#fff\",\n            fontSize: \"2rem\",\n            opacity: \"0.8\",\n          }}\n          value={mealName}\n          onChange={(e) => {\n            console.log(e.target.value);\n            setMealName(e.target.value);\n            // setFilterMeals(\n            console.log(\n              allMeals.filter((meal) =>\n                meal.name.toUpperCase().includes(e.target.value.toUpperCase())\n              )\n            );\n\n            // );\n          }}\n          prefix={<SearchOutlined />}\n        />\n        {width <= 700 && (\n          <Collapse ghost>\n            <Collapse.Panel\n              showArrow={false}\n              header={\n                <p\n                  className=\"font-paragraph-white\"\n                  style={{\n                    margin: 0,\n                    padding: 0,\n                    fontSize: \"18px\",\n                  }}\n                >\n                  Filter Nutritions\n                </p>\n              }\n              key=\"1\"\n            >\n              <div className=\"nutrition-filters\">\n                <div\n                  className=\"nutrition-filters-mealtype\"\n                  style={{ paddingTop: \"20px\" }}\n                >\n                  <h2\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\n                    className=\"font-subheading-white\"\n                  >\n                    <T>userDashboard.nutrient.mealtype</T>\n                  </h2>\n                  <div className=\"selectable-values\">\n                    {allMealTypes.map((value) => (\n                      <div\n                        className=\"selectable-values-value font-paragraph-white\"\n                        style={{\n                          backgroundColor: mealTypeFilters.includes(value._id)\n                            ? \"#ff7700\"\n                            : \"#333b44\",\n                        }}\n                        onClick={() => onSelectFilter(\"mealType\", value._id)}\n                      >\n                        {value.name}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"nutrition-filters-ingredients\">\n                  <h2\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\n                    className=\"font-subheading-white\"\n                  >\n                    <T>userDashboard.nutrient.ingredients</T>\n                  </h2>\n                  <div className=\"selectable-values\">\n                    {allIngredients.map((value) => (\n                      <div\n                        className=\"selectable-values-value font-paragraph-white\"\n                        style={{\n                          backgroundColor: ingredientsTypeFilter.includes(\n                            value._id\n                          )\n                            ? \"#ff7700\"\n                            : \"#333b44\",\n                        }}\n                        onClick={() =>\n                          onSelectFilter(\"ingredientsType\", value._id)\n                        }\n                      >\n                        {value.name}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"nutrition-filters-preprationTime\">\n                  <h2\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\n                    className=\"font-subheading-white\"\n                  >\n                    <T>userDashboard.nutrient.pt</T>\n                  </h2>\n                  {console.log(\"recipes all meals\", allMeals)}\n                  <Slider\n                    min={5}\n                    max={55}\n                    range\n                    onChange={(value) => setPreprationTimeFilter(value)}\n                    defaultValue={preprationTimeFilter}\n                  />\n                  <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\n                    {`${preprationTimeFilter[0]} - ${preprationTimeFilter[1]}`}\n                  </div>\n                </div>\n                <div className=\"nutrition-filters-calories\">\n                  <h2\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\n                    className=\"font-subheading-white\"\n                  >\n                    <T>userDashboard.nutrient.calories</T>\n                  </h2>\n                  <Slider\n                    min={100}\n                    max={955}\n                    range\n                    onChange={(value) => setCaloriesFilter(value)}\n                    defaultValue={caloriesFilter}\n                  />\n                  <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\n                    {`${caloriesFilter[0]} - ${caloriesFilter[1]}`}\n                  </div>\n                </div>\n                <div className=\"nutrition-filters-diet\">\n                  <h2\n                    style={{ color: \"#fff\", opacity: \"0.8\" }}\n                    className=\"font-subheading-white\"\n                  >\n                    <T>userDashboard.nutrient.diet</T>\n                  </h2>\n                  <div className=\"selectable-values\">\n                    {allDiets.map((value) => (\n                      <div\n                        className=\"selectable-values-value font-paragraph-white\"\n                        style={{\n                          backgroundColor: dietTypeFilter.includes(value._id)\n                            ? \"#ff7700\"\n                            : \"#333b44\",\n                        }}\n                        onClick={() => onSelectFilter(\"diet\", value._id)}\n                      >\n                        {value.name}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                <div\n                  className=\"reset-all-filters\"\n                  onClick={() => removeAllFilters()}\n                >\n                  <T>userDashboard.nutrient.raf</T>\n                </div>\n              </div>\n            </Collapse.Panel>\n          </Collapse>\n        )}\n\n        <div className=\"nutrition-container\">\n          {width > 700 && (\n            <div className=\"nutrition-filters\">\n              <div\n                className=\"nutrition-filters-mealtype\"\n                style={{ paddingTop: \"20px\" }}\n              >\n                <h2\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\n                  className=\"font-subheading-white\"\n                >\n                  <T>userDashboard.nutrient.mealtype</T>\n                </h2>\n                <div className=\"selectable-values\">\n                  {allMealTypes.map((value) => (\n                    <div\n                      className=\"selectable-values-value font-paragraph-white\"\n                      style={{\n                        backgroundColor: mealTypeFilters.includes(value._id)\n                          ? \"#ff7700\"\n                          : \"#333b44\",\n                      }}\n                      onClick={() => onSelectFilter(\"mealType\", value._id)}\n                    >\n                      {value.name}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"nutrition-filters-ingredients\">\n                <h2\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\n                  className=\"font-subheading-white\"\n                >\n                  <T>userDashboard.nutrient.ingredients</T>\n                </h2>\n                <div className=\"selectable-values\">\n                  {allIngredients.map((value) => (\n                    <div\n                      className=\"selectable-values-value font-paragraph-white\"\n                      style={{\n                        backgroundColor: ingredientsTypeFilter.includes(\n                          value._id\n                        )\n                          ? \"#ff7700\"\n                          : \"#333b44\",\n                      }}\n                      onClick={() =>\n                        onSelectFilter(\"ingredientsType\", value._id)\n                      }\n                    >\n                      {value.name}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"nutrition-filters-preprationTime\">\n                <h2\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\n                  className=\"font-subheading-white\"\n                >\n                  <T>userDashboard.nutrient.pt</T>\n                </h2>\n                {console.log(\"recipes all meals\", allMeals)}\n                <Slider\n                  min={5}\n                  max={55}\n                  range\n                  onChange={(value) => setPreprationTimeFilter(value)}\n                  defaultValue={preprationTimeFilter}\n                />\n                <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\n                  {`${preprationTimeFilter[0]} - ${preprationTimeFilter[1]}`}\n                </div>\n              </div>\n              <div className=\"nutrition-filters-calories\">\n                <h2\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\n                  className=\"font-subheading-white\"\n                >\n                  <T>userDashboard.nutrient.calories</T>\n                </h2>\n                <Slider\n                  min={100}\n                  max={955}\n                  range\n                  onChange={(value) => setCaloriesFilter(value)}\n                  defaultValue={caloriesFilter}\n                />\n                <div style={{ color: \"#fff\", fontSize: \"1.5rem\" }}>\n                  {`${caloriesFilter[0]} - ${caloriesFilter[1]}`}\n                </div>\n              </div>\n              <div className=\"nutrition-filters-diet\">\n                <h2\n                  style={{ color: \"#fff\", opacity: \"0.8\" }}\n                  className=\"font-subheading-white\"\n                >\n                  <T>userDashboard.nutrient.diet</T>\n                </h2>\n                <div className=\"selectable-values\">\n                  {allDiets.map((value) => (\n                    <div\n                      className=\"selectable-values-value font-paragraph-white\"\n                      style={{\n                        backgroundColor: dietTypeFilter.includes(value._id)\n                          ? \"#ff7700\"\n                          : \"#333b44\",\n                      }}\n                      onClick={() => onSelectFilter(\"diet\", value._id)}\n                    >\n                      {value.name}\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div\n                className=\"reset-all-filters\"\n                onClick={() => removeAllFilters()}\n              >\n                <T>userDashboard.nutrient.raf</T>\n              </div>\n            </div>\n          )}\n          <div className=\"trainers-3-row-cards nutrition-cards\">\n            {filterMeals.map((meal) => (\n              <Link to={`/recipe/${slug(meal.name)}/${meal._id}`}>\n                {console.log(meal)}\n                <ChallengeCard\n                  picture={`${\n                    process.env.REACT_APP_SERVER\n                  }/uploads/${meal.image.replaceAll(\" \", \"%20\")}`}\n                  name={meal.name}\n                  rating={meal.rating}\n                  newc={true}\n                  preprationTime={meal.prepTime}\n                  recipe={true}\n                />\n              </Link>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchNutrition;\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Workout.js",["1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116"],"import React, { useContext, useEffect } from \"react\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { Button, Spin, Tag } from \"antd\";\r\n\r\nimport BackButton from \"../../../../assets/icons/Back-button.png\";\r\nimport WorkoutStudio from \"../../../../assets/icons/workout-studio.svg\";\r\nimport DumbellIcon from \"../../../../assets/icons/dumbell.svg\";\r\nimport AttachIcon from \"../../../../assets/icons/attach-copy.svg\";\r\nimport \"../../../../assets/challengePlayer.css\";\r\nimport \"./workout.css\";\r\nimport Attachment from \"./Attachment/Attachment\";\r\nimport RemoteMediaManager from \"../../MediaManager/RemoteMediaManager\";\r\nimport EquipmentModal from \"./EquipmentModal/EquipmentModal\";\r\nimport {\r\n  deleteChallengeEquipment,\r\n  getAllChallengeEquipments,\r\n} from \"../../../../services/createChallenge/equipments\";\r\nimport { LanguageContext } from \"../../../../contexts/LanguageContext\";\r\nimport EditTypeName from \"../../ChallengeManager/EditTypeName\";\r\nimport Exercises from \"./Exercise/Exercises\";\r\nimport { v4 } from \"uuid\";\r\nimport Player from \"../../../Player/Player\";\r\nimport { useChallenge } from \"../../../../contexts/ChallengeCreatorV2\";\r\nimport {\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerStateContext,\r\n} from \"../../../../contexts/PlayerState\";\r\nimport MusicIcon from \"../../../../assets/icons/music-icon-white.svg\";\r\nimport MusicChooseModal from \"./MusicChooseModal/MusicChooseModal\";\r\nimport HelpPopupPlayer from \"../../../Player/HelpPopupPlayer\";\r\n\r\nfunction Workout() {\r\n  const {\r\n    weeks,\r\n    selectedWorkoutForStudioId,\r\n    setWeeks,\r\n    setShowVideoCreator,\r\n    musics,\r\n    setMusics,\r\n  } = useChallenge();\r\n  const { language } = useContext(LanguageContext);\r\n  const [mediaManagerVisible, setMediaManagerVisible] = React.useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = React.useState(\"images\");\r\n  const [mediaManagerActions, setMediaManagerActions] = React.useState([]);\r\n  //\r\n  const [introVideoFile, setIntroVideoFile] = React.useState(null);\r\n\r\n  const [infoFile, setInfoFile] = React.useState(null);\r\n  //\r\n  const [allEquipments, setAllEquipments] = React.useState([]);\r\n  const [equipmentModal, setEquipmentModal] = React.useState(false);\r\n  const [editItemNameModalVisible, setEditItemNameModalVisible] =\r\n    React.useState(false);\r\n  const [selectedItemForUpdate, setSelectedItemForUpdate] = React.useState({});\r\n  const [selectedItemForUpdateTitle, setSelectedItemForUpdateTitle] =\r\n    React.useState(\"\");\r\n  const [selectedExercise, setSelectedExercise] = React.useState({\r\n    exercise: {},\r\n    index: 0,\r\n    completed: 0,\r\n  });\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [workoutInfo, setWorkoutInfo] = React.useState({});\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const [musicChooseModalVisible, setMusicChooseModalVisible] =\r\n    React.useState(false);\r\n  const [exerciseForHelpModal, setExerciseForHelpModal] = React.useState({});\r\n  const [openHelpModal, setOpenHelpModal] = React.useState(false);\r\n\r\n  const getWorkoutInfo = () => {\r\n    const workout = weeks.find((week) =>\r\n      week.id === selectedWorkoutForStudioId.weekId\r\n        ? week.workouts.find(\r\n            (workout) => workout.id === selectedWorkoutForStudioId.workoutId\r\n          )\r\n        : null\r\n    );\r\n    return workout\r\n      ? workout.workouts.find(\r\n          (workout) => workout.id === selectedWorkoutForStudioId.workoutId\r\n        )\r\n      : null;\r\n  };\r\n\r\n  // Call getWorkoutInfo only when selectedWorkoutForStudioId changes\r\n  useEffect(() => {\r\n    const workout = getWorkoutInfo();\r\n    setWorkoutInfo(workout);\r\n\r\n    if (workout) {\r\n      const infoFile = workout.infoFile;\r\n      if (infoFile) {\r\n        setInfoFile(infoFile);\r\n      }\r\n    }\r\n  }, [selectedWorkoutForStudioId, weeks]); // Dependencies: selectedWorkoutForStudioId and weeks\r\n\r\n  useEffect(() => {\r\n    if (workoutInfo) {\r\n    }\r\n    setSelectedExercise({\r\n      ...selectedExercise,\r\n      exercise: workoutInfo.exercises?.length > 0 && workoutInfo.exercises[0],\r\n    });\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (introVideoFile) {\r\n      setWorkoutInfo({\r\n        ...workoutInfo,\r\n        exercises: workoutInfo.exercises?.map((exercise) => {\r\n          if (exercise.id === selectedExercise.id) {\r\n            return {\r\n              ...exercise,\r\n              videoURL: introVideoFile?.link,\r\n            };\r\n          }\r\n          return exercise;\r\n        }),\r\n      });\r\n    }\r\n  }, [introVideoFile]);\r\n\r\n  useEffect(() => {\r\n    if (infoFile) {\r\n      setWorkoutInfo({\r\n        ...workoutInfo,\r\n        infoFile: infoFile,\r\n      });\r\n    }\r\n  }, [infoFile]);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    await getAllEquipments();\r\n    setLoading(false);\r\n  };\r\n\r\n  const updateWorkoutInfo = (e) => {\r\n    setWorkoutInfo({\r\n      ...workoutInfo,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const onWorkoutInfoChange = () => {\r\n    setMediaManagerVisible(true);\r\n    setMediaManagerType(\"docs\");\r\n    setMediaManagerActions([infoFile, setInfoFile]);\r\n  };\r\n\r\n  const onEquipmentSelect = () => {\r\n    setEquipmentModal(true);\r\n  };\r\n\r\n  const getAllEquipments = async () => {\r\n    const data = await getAllChallengeEquipments(language);\r\n    if (data) {\r\n      setAllEquipments(data.equipments);\r\n    }\r\n  };\r\n  const removeEquipment = async (id) => {\r\n    await deleteChallengeEquipment(id);\r\n    const updatedEquipments = workoutInfo.equipments.filter(\r\n      (item) => item._id !== id\r\n    );\r\n    setWorkoutInfo({\r\n      ...workoutInfo,\r\n      equipments: updatedEquipments,\r\n    });\r\n    fetchData();\r\n  };\r\n\r\n  const handleUpdateRenderedExercise = (event, e) => {\r\n    // stop event propagation\r\n    event.stopPropagation();\r\n    setSelectedExercise(e);\r\n    setMediaManagerVisible(true);\r\n    setMediaManagerType(\"videos\");\r\n    setMediaManagerActions([introVideoFile, setIntroVideoFile]);\r\n  };\r\n\r\n  const updateExerciseWorkoutTimer = (type, index) => {\r\n    if (type === \"next\") {\r\n      const allExercisesBeforeTheNextExercise = workoutInfo.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workoutInfo.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n\r\n    if (type === \"prev\") {\r\n      const allExercisesBeforeTheNextExercise = workoutInfo.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workoutInfo.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const moveToNextExercise = (playerProgress) => {\r\n    if (workoutInfo.exercises[selectedExercise.index + 1]) {\r\n      // console.log(\"dasdsa\", currentExercise);\r\n      const completeionRate = Math.round(\r\n        ((selectedExercise.index + 1) / (workoutInfo.exercises.length - 1)) *\r\n          100\r\n      );\r\n      setSelectedExercise({\r\n        exercise: workoutInfo.exercises[selectedExercise.index + 1],\r\n        index: selectedExercise.index + 1,\r\n        completed: completeionRate,\r\n      });\r\n\r\n      updateExerciseWorkoutTimer(\"next\", selectedExercise.index + 1);\r\n      setPlayerState({ ...playerState, playing: false });\r\n      return;\r\n    } else {\r\n      setPlayerState({ ...playerState, playing: false });\r\n      setSelectedExercise({\r\n        exercise: selectedExercise.exercise,\r\n        index: -1,\r\n        completed: 100,\r\n      });\r\n      // setFinishWorkoutPopupVisible(true);\r\n    }\r\n  };\r\n\r\n  const moveToPrevExercise = (playerProgress) => {\r\n    if (workoutInfo.exercises[selectedExercise.index - 1]) {\r\n      // console.log(\"dasdsa\", currentExercise);\r\n      const completeionRate = Math.round(\r\n        ((selectedExercise.index - 1) / (workoutInfo.exercises.length - 1)) *\r\n          100\r\n      );\r\n      setSelectedExercise({\r\n        exercise: workoutInfo.exercises[selectedExercise.index - 1],\r\n        index: selectedExercise.index - 1,\r\n        completed: completeionRate,\r\n      });\r\n      updateExerciseWorkoutTimer(\"prev\", selectedExercise.index - 1);\r\n      setPlayerState({ ...playerState, playing: true });\r\n      return;\r\n    } else {\r\n      alert(\"nothing on backside\");\r\n    }\r\n  };\r\n\r\n  const openMusicAdder = () => {\r\n    setMusicChooseModalVisible(true);\r\n  };\r\n\r\n  const handleCloseExerciseForHelp = () => {\r\n    setPlayerState({ ...playerState, playing: false, muted: true });\r\n    setOpenHelpModal(false);\r\n    setExerciseForHelpModal({});\r\n    if (\r\n      localStorage.getItem(\"music-playing\") &&\r\n      localStorage.getItem(\"music-playing\") === false\r\n    ) {\r\n      localStorage.setItem(\"music-playing\", true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"challenge-player-container\"\r\n      style={{\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      {loading && (\r\n        <div className=\"center-inpage\">\r\n          <LoadingOutlined style={{ fontSize: \"50px\", color: \"#ff7700\" }} />\r\n        </div>\r\n      )}\r\n      {openHelpModal && (\r\n        <HelpPopupPlayer\r\n          open={openHelpModal}\r\n          onCancel={handleCloseExerciseForHelp}\r\n          setOpen={setOpenHelpModal}\r\n          exercise={exerciseForHelpModal}\r\n        />\r\n      )}\r\n      <MusicChooseModal\r\n        open={musicChooseModalVisible}\r\n        setOpen={setMusicChooseModalVisible}\r\n        musics={musics}\r\n        setMusics={setMusics}\r\n      />\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"20px\",\r\n          right: \"30px\",\r\n          opacity: 0.7,\r\n        }}\r\n      >\r\n        {/* {saving ? (\r\n          <>\r\n            <Spin size=\"small\" style={{ color: \"#fff\" }} />\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                color: \"#fff\",\r\n                marginLeft: \"10px\",\r\n              }}\r\n            >\r\n              Saving...\r\n            </span>\r\n          </>\r\n        ) : (\r\n          <Button\r\n            style={{\r\n              backgroundColor: \"#ff7700\",\r\n              color: \"#fff\",\r\n              border: \"none\",\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        )} */}\r\n      </div>\r\n      <div className=\"v2challenge-player-container\">\r\n        <div className=\"v2workout-studio-top\">\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <img\r\n              onClick={() => {\r\n                const updatedWeeks = weeks?.map((week) => {\r\n                  if (week.id === selectedWorkoutForStudioId.weekId) {\r\n                    return {\r\n                      ...week,\r\n                      workouts: week.workouts?.map((workout) =>\r\n                        workout.id === selectedWorkoutForStudioId.workoutId\r\n                          ? { ...workout, ...workoutInfo } // Update the workout with workoutInfo\r\n                          : workout\r\n                      ),\r\n                    };\r\n                  }\r\n                  return week;\r\n                });\r\n\r\n                setWeeks(updatedWeeks);\r\n                setShowVideoCreator(false); // Close the video creator\r\n              }}\r\n              src={BackButton}\r\n              alt=\"back-button\"\r\n              style={{\r\n                cursor: \"pointer\",\r\n                marginRight: \"20px\",\r\n                height: \"30px\",\r\n              }}\r\n            />\r\n\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                marginLeft: \"10px\",\r\n              }}\r\n            >\r\n              <input\r\n                onChange={updateWorkoutInfo}\r\n                name=\"title\"\r\n                className=\"v2workout-field v2workout-title\"\r\n                value={workoutInfo.title}\r\n                type=\"title\"\r\n                placeholder=\"Type Title\"\r\n              />\r\n              <input\r\n                onChange={updateWorkoutInfo}\r\n                name=\"subtitle\"\r\n                className=\"v2workout-field v2workout-subtitle\"\r\n                value={workoutInfo.subtitle}\r\n                placeholder=\"Type more info\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <img src={WorkoutStudio} alt=\"workout-studio\" />\r\n        </div>\r\n\r\n        <div style={{ position: \"relative\", marginTop: \"20px\" }}>\r\n          <button className=\"music-icon-button\" onClick={openMusicAdder}>\r\n            <span>Add background music</span>\r\n            <img src={MusicIcon} alt=\"music-icon\" />\r\n          </button>\r\n          <Player\r\n            moveToNextExercise={moveToNextExercise}\r\n            moveToPrevExercise={moveToPrevExercise}\r\n            musics={musics}\r\n            nextExerciseTitle={\r\n              workoutInfo.exercises &&\r\n              workoutInfo.exercises[selectedExercise.index + 1]\r\n                ? workoutInfo.exercises[selectedExercise.index + 1].title\r\n                : \"\"\r\n            }\r\n            exercise={selectedExercise.exercise}\r\n            // challengePageAddress={`/challenge/${challengeName}/${challengeId}`}\r\n            key={selectedExercise.exercise?.id}\r\n            // for full screen player video browser\r\n            workout={workoutInfo}\r\n            setExerciseForHelpModal={setExerciseForHelpModal}\r\n            setOpenHelpModal={setOpenHelpModal}\r\n            setCurrentExercise={setSelectedExercise}\r\n            currentExercise={selectedExercise}\r\n            inCreation={true}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"v2workout-studio-middle\">\r\n          <div className=\"v2workout-studio-middle-exercises\">\r\n            {workoutInfo && workoutInfo.exercises && (\r\n              <Exercises\r\n                workout={workoutInfo}\r\n                setWorkout={setWorkoutInfo}\r\n                setCurrentExercise={setSelectedExercise}\r\n                currentExercise={selectedExercise}\r\n                handleUpdateRenderedExercise={handleUpdateRenderedExercise}\r\n                setExerciseForHelpModal={setExerciseForHelpModal}\r\n                setOpenHelpModal={setOpenHelpModal}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"v2workout-studio-bottom\"\r\n          style={{\r\n            marginBottom: \"50px\",\r\n          }}\r\n        >\r\n          <h2\r\n            className=\"font-heading-white\"\r\n            style={{\r\n              color: \"#686D73\",\r\n              fontSize: \"20px\",\r\n              marginBottom: \"0px\",\r\n            }}\r\n          >\r\n            EXERCISES\r\n          </h2>\r\n          <h3\r\n            className=\"font-paragraph-white\"\r\n            style={{\r\n              fontSize: \"15px\",\r\n              color: \"#898C91\",\r\n            }}\r\n          >\r\n            Navigate to each exercise or hit the personal trainer button for\r\n            audio explanation\r\n          </h3>\r\n          <div className=\"v2workout-studio-bottom-grid\">\r\n            <Attachment\r\n              heading={\"TODAY’S WORKOUT ATTACHMENT\"}\r\n              logo={AttachIcon}\r\n              onClick={onWorkoutInfoChange}\r\n              selectedValue={infoFile}\r\n              setSelectedValue={setInfoFile}\r\n            />\r\n            <div>\r\n              <Attachment\r\n                heading={\"TODAY’S EQUIPMENTS\"}\r\n                logo={DumbellIcon}\r\n                onClick={onEquipmentSelect}\r\n              />\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  marginTop: \"5px\",\r\n                }}\r\n              >\r\n                {workoutInfo.equipments?.map((equipment) => (\r\n                  <p\r\n                    className=\"font-paragraph-white\"\r\n                    style={{\r\n                      border: \"1px solid #fff\",\r\n                      opacity: 0.7,\r\n                      padding: \"5px\",\r\n                      borderRadius: \"5px\",\r\n                      marginRight: \"10px\",\r\n                    }}\r\n                  >\r\n                    {equipment.name}\r\n                    <span\r\n                      style={{\r\n                        marginLeft: \"10px\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => {\r\n                        const updatedEquipments = workoutInfo.equipments.filter(\r\n                          (item) => item._id !== equipment._id\r\n                        );\r\n                        setWorkoutInfo({\r\n                          ...workoutInfo,\r\n                          equipments: updatedEquipments,\r\n                        });\r\n                      }}\r\n                    >\r\n                      X\r\n                    </span>\r\n                  </p>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <EquipmentModal\r\n        selectedEquipments={workoutInfo.equipments}\r\n        setSelectedEquipments={(updatedEquipments) => {\r\n          setWorkoutInfo({\r\n            ...workoutInfo,\r\n            equipments: updatedEquipments,\r\n          });\r\n        }}\r\n        equipmentModal={equipmentModal}\r\n        setEquipmentModal={setEquipmentModal}\r\n        allEquipments={allEquipments}\r\n        fethData={fetchData}\r\n        removeItem={removeEquipment}\r\n        setSelectedItemForUpdateTitle={setSelectedItemForUpdateTitle}\r\n        setSelectedItemForUpdate={setSelectedItemForUpdate}\r\n        setEditItemNameModalVisible={setEditItemNameModalVisible}\r\n      />\r\n      <EditTypeName\r\n        editItemNameModalVisible={editItemNameModalVisible}\r\n        setEditItemModelVisible={setEditItemNameModalVisible}\r\n        fethData={fetchData}\r\n        selectedItemForUpdate={selectedItemForUpdate}\r\n        titleName={selectedItemForUpdateTitle}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Workout;\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Attachment\\Attachment.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\EquipmentModal\\EquipmentModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\Exercise\\Exercises.js",["1117","1118","1119","1120","1121","1122"],"import React, { useContext } from \"react\";\r\n\r\nimport Carousel from \"react-multi-carousel\";\r\nimport VideoThumbnail from \"react-video-thumbnail\";\r\nimport {\r\n  exerciseWorkoutTimeTrackContext,\r\n  playerFullscreenContext,\r\n  playerStateContext,\r\n} from \"../../../../../contexts/PlayerState\";\r\nimport AddExercise from \"../../../../../assets/icons/add-exercise.svg\";\r\nimport AddNewExercise from \"../../../../../assets/icons/add-new-exercise.svg\";\r\nimport { CopyOutlined, DeleteFilled } from \"@ant-design/icons\";\r\nimport { v4 } from \"uuid\";\r\nimport { useChallenge } from \"../../../../../contexts/ChallengeCreatorV2\";\r\nimport ExerciseChooseModal from \"../ExerciseChooseModal/ExerciseChooseModal\";\r\nimport {\r\n  DraggableArea,\r\n  DraggableHandle,\r\n  DraggableItem,\r\n  ItemTypeExercise,\r\n} from \"../../../../../helpers/DndWrapper\";\r\nimport DragAndDropIcon from \"../../../../../assets/icons/drag-drop-icon-white.svg\";\r\nimport SquarePT from \"../../../../../assets/icons/Square-PT.png\";\r\nconst responsive = {\r\n  superLargeDesktop: {\r\n    // the naming can be any, depends on you.\r\n    breakpoint: { max: 4000, min: 3000 },\r\n    items: 4,\r\n  },\r\n  desktop3: {\r\n    breakpoint: { max: 3000, min: 1600 },\r\n    items: 4,\r\n  },\r\n  desktop2: {\r\n    breakpoint: { max: 1600, min: 1350 },\r\n    items: 3.5,\r\n  },\r\n  desktop: {\r\n    breakpoint: { max: 1350, min: 1100 },\r\n    items: 3,\r\n  },\r\n  tablet: {\r\n    breakpoint: { max: 1100, min: 850 },\r\n    items: 2.5,\r\n  },\r\n  mobile2: {\r\n    breakpoint: { max: 850, min: 600 },\r\n    items: 1,\r\n  },\r\n  mobile: {\r\n    breakpoint: { max: 600, min: 0 },\r\n    items: 1,\r\n  },\r\n};\r\n\r\nfunction Exercises({\r\n  workout,\r\n  setWorkout,\r\n  setExerciseForHelpModal,\r\n  setOpenHelpModal,\r\n  setCurrentExercise,\r\n  currentExercise,\r\n  handleUpdateRenderedExercise,\r\n  fromFullScreen = true,\r\n}) {\r\n  const { allExercises, seletedTrainers } = useChallenge();\r\n  const [showExerciseModal, setShowExerciseModal] = React.useState(false);\r\n  const [playerState, setPlayerState] = useContext(playerStateContext);\r\n  const [fullscreen, setFullscreen] = useContext(playerFullscreenContext);\r\n  const [exerciseWorkoutTimeTrack, setExerciseWorkoutTimeTrack] = useContext(\r\n    exerciseWorkoutTimeTrackContext\r\n  );\r\n  const [exerciseIdToUpdate, setExerciseIdToUpdate] = React.useState(null);\r\n\r\n  const handleOpenExerciseForHelp = (e) => {\r\n    const exercise = allExercises.find(\r\n      (exercise) => exercise._id === e.exerciseId\r\n    );\r\n    setPlayerState({ ...playerState, playing: false, muted: true });\r\n    setExerciseForHelpModal({ ...e, description: exercise?.description || \"\" });\r\n    setOpenHelpModal(true);\r\n  };\r\n\r\n  const handleChangeExercise = (i) => {\r\n    setCurrentExercise({\r\n      exercise: workout.exercises[i],\r\n      index: i,\r\n      completed: Math.round((i / (workout.exercises.length - 1)) * 100),\r\n    });\r\n    setPlayerState({ ...playerState, playing: false, muted: false });\r\n    updateExerciseWorkoutTimer(i);\r\n  };\r\n\r\n  const updateExerciseWorkoutTimer = (index) => {\r\n    if (workout.renderWorkout) {\r\n      const allExercisesBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce(\r\n          (a, b) => parseInt(a, 0) + (parseInt(b[\"exerciseLength\"]) || 0),\r\n          0\r\n        );\r\n      const allBreaksBeforeTheNextExercise = workout.exercises\r\n        .slice(0, index)\r\n        .reduce((a, b) => parseInt(a, 0) + (parseInt(b[\"break\"]) || 0), 0);\r\n      // console.log(\"allExercisesBeforeTheNextExercise\",allExercisesBeforeTheNextExercise+allBreaksBeforeTheNextExercise)\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleExerciseDuration = (e, id) => {\r\n    e.preventDefault();\r\n    const { value } = e.target;\r\n    const exercise = workout.exercises.find((exercise) => exercise.id === id);\r\n    const updatedExercise = { ...exercise, exerciseLength: value };\r\n    const updatedExercises = workout.exercises.map((exercise) =>\r\n      exercise.id === id ? updatedExercise : exercise\r\n    );\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n\r\n    // if current exercise is the one being updated, update the workout time track\r\n    if (currentExercise && currentExercise?.exercise.id === id) {\r\n      const allExercisesBeforeTheNextExercise = workout.exercises\r\n        .slice(0, currentExercise.index)\r\n        .reduce((a, b) => a + (parseInt(b[\"exerciseLength\"]) || 0), 0);\r\n      const allBreaksBeforeTheNextExercise = workout.exercises\r\n        .slice(0, currentExercise.index)\r\n        .reduce((a, b) => a + (parseInt(b[\"break\"]) || 0), 0);\r\n      setExerciseWorkoutTimeTrack((prev) => ({\r\n        ...prev,\r\n        current:\r\n          allExercisesBeforeTheNextExercise + allBreaksBeforeTheNextExercise,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleExerciseBreakTimer = (e, id) => {\r\n    e.preventDefault();\r\n    const { value } = e.target;\r\n    const exercise = workout.exercises.find((exercise) => exercise.id === id);\r\n    const updatedExercise = { ...exercise, break: parseInt(value) };\r\n    const updatedExercises = workout.exercises.map((exercise) =>\r\n      exercise.id === id ? updatedExercise : exercise\r\n    );\r\n\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n  };\r\n\r\n  const handleExerciseTitle = (e, id) => {\r\n    e.preventDefault();\r\n    const { value } = e.target;\r\n    const exercise = workout.exercises.find((exercise) => exercise.id === id);\r\n    const updatedExercise = { ...exercise, title: value };\r\n    const updatedExercises = workout.exercises.map((exercise) =>\r\n      exercise.id === id ? updatedExercise : exercise\r\n    );\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n  };\r\n\r\n  const handleExerciseGroupName = (e, id) => {\r\n    e.preventDefault();\r\n    const { value } = e.target;\r\n    const exercise = workout.exercises.find((exercise) => exercise.id === id);\r\n    const updatedExercise = { ...exercise, exerciseGroupName: value };\r\n    const updatedExercises = workout.exercises.map((exercise) =>\r\n      exercise.id === id ? updatedExercise : exercise\r\n    );\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n  };\r\n\r\n  const addNewExercise = () => {\r\n    const newExercise = {\r\n      break: 0,\r\n      createdAt: \"\",\r\n      exerciseGroupName: \"\",\r\n      exerciseLength: 0,\r\n      title: \"\",\r\n      videoURL: \"\",\r\n      voiceOverLink: \"\",\r\n      id: v4(),\r\n    };\r\n    setWorkout((prev) => ({\r\n      ...prev,\r\n      exercises: [...prev.exercises, newExercise],\r\n    }));\r\n  };\r\n\r\n  const removeExercise = (e, exercise) => {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    const updatedExercises = workout.exercises.filter(\r\n      (ex) => ex.id !== exercise.id\r\n    );\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n  };\r\n\r\n  const duplicateExercise = (exercise) => {\r\n    const newExercise = {\r\n      id: v4(),\r\n      title: exercise.title || \"\",\r\n      videoURL: exercise.videoURL || \"\",\r\n      voiceOverLink: exercise.voiceOverLink || \"\",\r\n      break: exercise.break || 0,\r\n      exerciseGroupName: exercise.exerciseGroupName || \"\",\r\n      exerciseLength: exercise.exerciseLength || 0,\r\n      exerciseId: exercise.exerciseId || \"\",\r\n    };\r\n    setWorkout((prev) => ({\r\n      ...prev,\r\n      exercises: [...prev.exercises, newExercise],\r\n    }));\r\n  };\r\n\r\n  const openExerciseModal = (e) => {\r\n    setShowExerciseModal(true);\r\n    setExerciseIdToUpdate(e.id);\r\n  };\r\n\r\n  const onSelectExercise = (exercise, duration, exerciseBreak) => {\r\n    const updatedExercises = workout.exercises.map((ex) => {\r\n      if (ex.id === exerciseIdToUpdate) {\r\n        return {\r\n          ...ex,\r\n          title: exercise.title,\r\n          videoURL: exercise.videoURL,\r\n          voiceOverLink: exercise.voiceOverLink,\r\n          exerciseId: exercise._id,\r\n          exerciseLength: parseInt(duration) || ex.exerciseLength,\r\n          break: parseInt(exerciseBreak) || ex.break,\r\n        };\r\n      }\r\n      return ex;\r\n    });\r\n    setWorkout({ ...workout, exercises: updatedExercises });\r\n    setShowExerciseModal(false);\r\n    setExerciseIdToUpdate(null);\r\n  };\r\n\r\n  const handleExerciseOrder = (newOrder) => {\r\n    //  remove undefined ids\r\n    const filteredOrder = newOrder.filter((id) => id !== undefined);\r\n    const newOrderedKeys = filteredOrder.map((exercise) => exercise.key);\r\n    const updatedExercises = newOrderedKeys.map((id) => {\r\n      return workout.exercises.find((exercise) => exercise.id === id);\r\n    });\r\n\r\n    // update the order of all exercises other than the first\r\n    const firstExercise = workout.exercises[0];\r\n\r\n    const updatedOrderedExercises = [firstExercise, ...updatedExercises];\r\n    setWorkout((prev) => ({\r\n      ...prev,\r\n      exercises: updatedOrderedExercises,\r\n    }));\r\n  };\r\n  const firstExercise = workout.exercises && workout.exercises[0];\r\n  const remainingExercises = workout.exercises && workout.exercises.slice(1);\r\n\r\n  return (\r\n    <>\r\n      <ExerciseChooseModal\r\n        open={showExerciseModal}\r\n        setOpen={setShowExerciseModal}\r\n        exercises={allExercises}\r\n        seletedTrainers={seletedTrainers}\r\n        onExerciseSelect={onSelectExercise}\r\n      />\r\n      <div\r\n        className=\"challenge-player-container-exercies\"\r\n        style={{\r\n          background: fromFullScreen && \"none\",\r\n          width: fromFullScreen && \"100%\",\r\n        }}\r\n      >\r\n        <div className=\"video-browser-container\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              overflowX: \"auto\",\r\n              overflowY: \"hidden\",\r\n              maxWidth: \"90vw\",\r\n            }}\r\n          >\r\n            {firstExercise && (\r\n              <div\r\n                key={0}\r\n                aria-label={`Exercise 0`}\r\n                className={`${\r\n                  currentExercise.index === 0\r\n                    ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\r\n                    : \"exercise-browser-card\"\r\n                }`}\r\n              >\r\n                <div>\r\n                  <h4 className=\"challenge-player-container-exercies-round font-paragraph-white\">\r\n                    {firstExercise.exerciseGroupName ? (\r\n                      firstExercise.exerciseGroupName\r\n                    ) : (\r\n                      <span style={{ opacity: 0 }}>-</span>\r\n                    )}\r\n                  </h4>\r\n                </div>\r\n                {/* {workout.renderWorkout && e.videoURL && (\r\n                      <img\r\n                        src={SquarePlay}\r\n                        onClick={() =>\r\n                          setPlayerState({ ...playerState, playing: true })\r\n                        }\r\n                        alt=\"\"\r\n                        className=\"challenge-player-container-exercies-box-asktrainerbtn\"\r\n                        style={{ padding: \"8px\" }}\r\n                      />\r\n                    )} */}\r\n                <div\r\n                  className=\"challenge-player-container-exercies-box\"\r\n                  key={firstExercise.id}\r\n                  onClick={() => handleChangeExercise(0)}\r\n                >\r\n                  <div\r\n                    className=\"challenge-player-container-exercies-box-imagebox\"\r\n                    onClick={(event) =>\r\n                      handleUpdateRenderedExercise(event, firstExercise)\r\n                    }\r\n                  >\r\n                    {firstExercise.videoURL ? (\r\n                      <VideoThumbnail\r\n                        videoUrl={\r\n                          firstExercise.videoURL\r\n                            ? `${firstExercise.videoURL}`\r\n                            : \"\"\r\n                        }\r\n                        width={250}\r\n                        height={200}\r\n                        cors={true}\r\n                      />\r\n                    ) : (\r\n                      <img src={AddExercise} alt=\"add-exercise\" />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"challenge-player-container-exercies-box-details font-paragraph-white\">\r\n                    <p style={{ lineHeight: \"10px\" }}>{firstExercise.title}</p>\r\n\r\n                    {workout.renderWorkout && (\r\n                      <input\r\n                        onClick={(e) => e.stopPropagation()}\r\n                        className=\"v2workout-field v2workout-field-withborder v2workout-subtitle\"\r\n                        onChange={(t) =>\r\n                          handleExerciseDuration(t, firstExercise.id)\r\n                        }\r\n                        placeholder=\"Exercise Duration in Sec\"\r\n                        value={firstExercise.exerciseLength}\r\n                        style={{\r\n                          marginTop: \"-10px\",\r\n                          paddingLeft: \"5px\",\r\n                          width: \"fit-content\",\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <DraggableArea\r\n              onChange={(newOrder) => handleExerciseOrder(newOrder)}\r\n              direction=\"horizontal\"\r\n              itemType={ItemTypeExercise}\r\n            >\r\n              {remainingExercises &&\r\n                remainingExercises.map((e, i) => {\r\n                  i += 1; // Adjust index to match the original exercise index\r\n                  return (\r\n                    <DraggableItem key={e.id} id={e.id}>\r\n                      <div\r\n                        className={`${\r\n                          currentExercise.index === i\r\n                            ? \"exercise-browser-card challenge-player-container-exercies-box--currentRunning\"\r\n                            : \"exercise-browser-card\"\r\n                        }`}\r\n                        key={e.id}\r\n                      >\r\n                        {workout.renderWorkout && (\r\n                          <DeleteFilled\r\n                            style={{\r\n                              color: \"#fff\",\r\n                              fontSize: \"22px\",\r\n                              position: \"absolute\",\r\n                              right: \"10px\",\r\n                            }}\r\n                            onClick={(event) => removeExercise(event, e)}\r\n                          />\r\n                        )}\r\n                        {workout.renderWorkout && (\r\n                          <DraggableHandle>\r\n                            <img\r\n                              src={DragAndDropIcon}\r\n                              alt=\"drag\"\r\n                              style={{ transform: \"rotate(90deg)\" }}\r\n                            />\r\n                          </DraggableHandle>\r\n                        )}\r\n                        {workout.renderWorkout && (\r\n                          <CopyOutlined\r\n                            onClick={(evet) => {\r\n                              evet.stopPropagation();\r\n                              evet.preventDefault();\r\n                              duplicateExercise(e);\r\n                            }}\r\n                            style={{\r\n                              color: \"#fff\",\r\n                              fontSize: \"20px\",\r\n                              cursor: \"pointer\",\r\n                              marginLeft: \"10px\",\r\n                              position: \"absolute\",\r\n                              top: \"8px\",\r\n                              right: \"35px\",\r\n                            }}\r\n                          />\r\n                        )}\r\n                        {workout.renderWorkout && (\r\n                          <div>\r\n                            <h4 className=\"challenge-player-container-exercies-round font-paragraph-white\">\r\n                              <input\r\n                                className=\"v2workout-field v2workout-field-withborder v2workout-subtitle\"\r\n                                onChange={(t) =>\r\n                                  handleExerciseGroupName(t, e.id)\r\n                                }\r\n                                value={e.exerciseGroupName}\r\n                                onClick={(e) => e.stopPropagation()}\r\n                                placeholder=\"Group 1/3\"\r\n                                style={{\r\n                                  paddingLeft: \"5px\",\r\n                                  width: \"160px\",\r\n                                }}\r\n                              />\r\n                            </h4>\r\n                          </div>\r\n                        )}\r\n                        {workout.renderWorkout &&\r\n                          !fullscreen &&\r\n                          e?.videoURL && (\r\n                            <img\r\n                              src={SquarePT}\r\n                              alt=\"\"\r\n                              className=\"challenge-player-container-exercies-box-asktrainerbtn\"\r\n                              style={{\r\n                                top: \"85px\",\r\n                              }}\r\n                              onClick={() => handleOpenExerciseForHelp(e)}\r\n                            />\r\n                          )}\r\n                        <div\r\n                          className=\"challenge-player-container-exercies-box\"\r\n                          key={e.id}\r\n                          onClick={() => handleChangeExercise(i)}\r\n                        >\r\n                          <div\r\n                            className=\"challenge-player-container-exercies-box-imagebox\"\r\n                            onClick={(event) => {\r\n                              if (workout.renderWorkout) {\r\n                                openExerciseModal(e);\r\n                              } else {\r\n                                handleUpdateRenderedExercise(event, e);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {e.videoURL ? (\r\n                              <VideoThumbnail\r\n                                videoUrl={e.videoURL ? `${e.videoURL}` : \"\"}\r\n                                width={250}\r\n                                height={200}\r\n                                cors={true}\r\n                              />\r\n                            ) : (\r\n                              <img src={AddExercise} alt=\"add-exercise\" />\r\n                            )}\r\n                          </div>\r\n                          <div\r\n                            className=\"challenge-player-container-exercies-box-details font-paragraph-white\"\r\n                            style={{\r\n                              display: \"grid\",\r\n                              gridTemplateRows: \"1fr 1fr\",\r\n                            }}\r\n                          >\r\n                            <input\r\n                              className=\"v2workout-field v2workout-field-withborder v2workout-subtitle\"\r\n                              onChange={(t) => handleExerciseTitle(t, e.id)}\r\n                              placeholder=\"Name Exercise\"\r\n                              value={e.title}\r\n                              disabled={workout.renderWorkout}\r\n                              style={{\r\n                                paddingLeft: \"5px\",\r\n                                width: \"fit-content\",\r\n                              }}\r\n                            />\r\n                            {workout.renderWorkout && (\r\n                              <input\r\n                                onClick={(e) => e.stopPropagation()}\r\n                                className=\"v2workout-field v2workout-field-withborder v2workout-subtitle\"\r\n                                onChange={(t) =>\r\n                                  handleExerciseDuration(t, e.id)\r\n                                }\r\n                                placeholder=\"Duration in sec\"\r\n                                value={e.exerciseLength}\r\n                                type=\"number\"\r\n                                style={{\r\n                                  paddingLeft: \"5px\",\r\n                                  width: \"fit-content\",\r\n                                }}\r\n                              />\r\n                            )}\r\n                            {workout.renderWorkout && (\r\n                              <input\r\n                                onClick={(e) => e.stopPropagation()}\r\n                                className=\"v2workout-field v2workout-field-withborder v2workout-subtitle\"\r\n                                onChange={(t) =>\r\n                                  handleExerciseBreakTimer(t, e.id)\r\n                                }\r\n                                placeholder=\"Exercise Break in Sec\"\r\n                                value={e.break}\r\n                                type=\"number\"\r\n                                style={{\r\n                                  paddingLeft: \"5px\",\r\n                                  width: \"fit-content\",\r\n                                }}\r\n                              />\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </DraggableItem>\r\n                  );\r\n                })}\r\n              {!workout.renderWorkout && workout.exercises?.length === 2 ? (\r\n                <div></div>\r\n              ) : (\r\n                <img\r\n                  src={AddNewExercise}\r\n                  onClick={addNewExercise}\r\n                  alt=\"exercise\"\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                    marginTop: \"00px\",\r\n                  }}\r\n                />\r\n              )}\r\n            </DraggableArea>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst exercisesWithDragAndDrop = (props) => {};\r\nconst exercisesWithoutDragAndDrop = (props) => {};\r\n\r\nexport default Exercises;\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\ChallengeCreatorV2.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\useBrowserEvents.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\ExerciseChooseModal\\ExerciseChooseModal.js",["1123","1124","1125"],"import { Modal } from \"antd\";\r\nimport React, { useContext, useEffect } from \"react\";\r\nimport \"./ExerciseChooseModal.css\";\r\nimport DumbellIcon from \"../../../../../assets/icons/dumb-bell-icon-orange.svg\";\r\nimport { duration } from \"moment\";\r\nimport { userInfoContext } from \"../../../../../contexts/UserStore\";\r\n\r\nfunction ExerciseChooseModal({\r\n  open,\r\n  setOpen,\r\n  exercises,\r\n  seletedTrainers,\r\n  onExerciseSelect,\r\n}) {\r\n  const [userInfo, setUserInfo] = useContext(userInfoContext);\r\n  const [filteredExercises, setFilteredExercises] = React.useState([]);\r\n  const [selectedExercise, setSelectedExercise] = React.useState(null);\r\n  const [currentStep, setCurrentStep] = React.useState(1);\r\n  const [selectedDuration, setSelectedDuration] = React.useState(\"\");\r\n  const [selectedBreak, setSelectedBreak] = React.useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    if (userInfo && userInfo.role === \"admin\") {\r\n      setFilteredExercises(exercises);\r\n    } else {\r\n      if (\r\n        exercises &&\r\n        exercises.length > 0 &&\r\n        seletedTrainers &&\r\n        seletedTrainers.length > 0\r\n      ) {\r\n        const trainerIds = seletedTrainers.map((trainer) => trainer._id);\r\n        const filtered = exercises.filter((exercise) => {\r\n          return exercise.trainer && trainerIds.includes(exercise.trainer._id);\r\n        });\r\n        setFilteredExercises(filtered);\r\n      }\r\n    }\r\n  }, [exercises, seletedTrainers]);\r\n\r\n  useEffect(() => {\r\n    setCurrentStep(1);\r\n    setSelectedExercise(null);\r\n    setSelectedDuration(\"\");\r\n    setSelectedBreak(\"\");\r\n  }, [open]);\r\n\r\n  const handleExerciseSelect = (exercise) => {\r\n    setSelectedExercise(\r\n      exercise._id === selectedExercise?._id ? null : exercise\r\n    );\r\n  };\r\n\r\n  const handleNext = () => {\r\n    makDurationAndBreakEmpty();\r\n    setCurrentStep(2);\r\n  };\r\n\r\n  const handleSave = () => {\r\n    if (selectedExercise && onExerciseSelect) {\r\n      onExerciseSelect(selectedExercise, selectedDuration, selectedBreak);\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const makDurationAndBreakEmpty = () => {\r\n    setSelectedDuration(\"\");\r\n    setSelectedBreak(\"\");\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      footer={null}\r\n      onCancel={() => setOpen(false)}\r\n      title=\"\"\r\n      bodyStyle={{\r\n        backgroundColor: \"#171e27\",\r\n        border: \"1px solid #FF950A\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      {currentStep === 1 && (\r\n        <>\r\n          <div className=\"exercise-selector__header\">\r\n            <img\r\n              src={DumbellIcon}\r\n              alt=\"img\"\r\n              className=\"exercise-selector__icon\"\r\n            />\r\n            <h2 className=\"exercise-selector__title\">Choose Exercise</h2>\r\n          </div>\r\n\r\n          <div className=\"exercise-selector__list\">\r\n            {filteredExercises.map((exercise, index) => (\r\n              <div\r\n                key={index}\r\n                className={`exercise-selector__item ${\r\n                  selectedExercise?._id === exercise?._id\r\n                    ? \"exercise-selector__item--selected\"\r\n                    : \"\"\r\n                }`}\r\n                onClick={() => handleExerciseSelect(exercise)}\r\n              >\r\n                <p>{exercise.name || exercise.title || \"Unnamed Exercise\"}</p>\r\n                <span>Exercise ID: {exercise._id}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <button\r\n            className=\"exercise-selector__next-btn\"\r\n            onClick={handleNext}\r\n            disabled={!selectedExercise}\r\n          >\r\n            Next\r\n          </button>\r\n        </>\r\n      )}\r\n      {currentStep === 2 && (\r\n        <>\r\n          <div className=\"exercise-selector__header\">\r\n            <img\r\n              src={DumbellIcon}\r\n              alt=\"img\"\r\n              className=\"exercise-selector__icon\"\r\n            />\r\n            <h2 className=\"exercise-selector__title\">Choose Exercise</h2>\r\n          </div>\r\n\r\n          <div className=\"exercise-selector__list\">\r\n            <div className={`exercise-selector__item`}>\r\n              <p>\r\n                {selectedExercise.name ||\r\n                  selectedExercise.title ||\r\n                  \"Unnamed Exercise\"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"exercise-selector__inputbox\">\r\n            <div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"00\"\r\n                  type=\"number\"\r\n                  onChange={(e) => setSelectedDuration(e.target.value)}\r\n                />\r\n              </div>\r\n              <label>Duration</label>\r\n            </div>\r\n\r\n            <div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"00\"\r\n                  type=\"number\"\r\n                  onChange={(e) => setSelectedBreak(e.target.value)}\r\n                />\r\n              </div>\r\n              <label>Break</label>\r\n            </div>\r\n          </div>\r\n          <button\r\n            className=\"exercise-selector__next-btn\"\r\n            onClick={() => setCurrentStep(1)}\r\n            style={{ marginRight: \"10px\" }}\r\n          >\r\n            Back\r\n          </button>\r\n          <button\r\n            className=\"exercise-selector__next-btn\"\r\n            onClick={handleSave}\r\n            disabled={!selectedExercise || !selectedDuration || !selectedBreak}\r\n          >\r\n            Save\r\n          </button>\r\n        </>\r\n      )}\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ExerciseChooseModal;\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Workout\\MusicChooseModal\\MusicChooseModal.js",[],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\helpers\\DndWrapper.jsx",["1126","1127"],"import React, { createContext, useContext, useRef } from \"react\";\r\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\nexport const ItemTypeWeek = \"DRAGGABLE_WEEK\";\r\nexport const ItemTypeWorkout = \"DRAGGABLE_WORKOUT\";\r\nexport const ItemTypeExercise = \"DRAGGABLE_EXERCISE\";\r\n\r\nconst DragContext = createContext();\r\n\r\nexport function DraggableArea({\r\n  children,\r\n  onChange,\r\n  direction = \"vertical\",\r\n  itemType,\r\n}) {\r\n  const childArray = React.Children.toArray(children);\r\n\r\n  const moveItem = (dragIndex, hoverIndex) => {\r\n    if (\r\n      dragIndex < 0 ||\r\n      hoverIndex < 0 ||\r\n      dragIndex >= childArray.length ||\r\n      hoverIndex >= childArray.length\r\n    ) {\r\n      console.warn(\"Invalid drag or hover index\", dragIndex, hoverIndex);\r\n      return;\r\n    }\r\n\r\n    const updatedItems = [...childArray];\r\n\r\n    const [removed] = updatedItems.splice(dragIndex, 1);\r\n    updatedItems.splice(hoverIndex, 0, removed);\r\n\r\n    // Call onChange with the new order of data (not React elements)\r\n    if (onChange) {\r\n      // If you pass data as a prop (e.g., data-workout), extract it here\r\n      onChange(\r\n        updatedItems.map((child) => {\r\n          if (!child || !child.props) return null;\r\n          return child.props[\"data-workout\"] || child.props.children;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragContext.Provider value={{ moveItem, direction, itemType }}>\r\n      <div\r\n        style={{\r\n          display: direction === \"horizontal\" ? \"flex\" : \"block\",\r\n          width: \"98.5%\",\r\n        }}\r\n      >\r\n        {childArray.map((child, index) =>\r\n          React.cloneElement(child, { index, key: child.key || index })\r\n        )}\r\n      </div>\r\n    </DragContext.Provider>\r\n  );\r\n}\r\n\r\nexport function DraggableItem({ children, index, ...rest }) {\r\n  const ref = useRef(null);\r\n  const { moveItem, direction, itemType } = useContext(DragContext);\r\n\r\n  const [, drop] = useDrop({\r\n    accept: itemType,\r\n    hover(item) {\r\n      if (!ref.current || item.index === index) return;\r\n\r\n      moveItem(item.index, index);\r\n      item.index = index;\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    type: itemType,\r\n    item: { index },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  preview(drop(ref));\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        opacity: isDragging ? 0.5 : 1,\r\n        display: direction === \"horizontal\" ? \"inline-block\" : \"block\",\r\n      }}\r\n      {...rest}\r\n    >\r\n      <DragContext.Provider value={{ drag }}>{children}</DragContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function DraggableHandle({ children }) {\r\n  const { drag } = useContext(DragContext);\r\n  const ref = useRef(null);\r\n  drag(ref);\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      style={{\r\n        display: \"inline-block\",\r\n        cursor: \"move\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\components\\Admin\\V2\\Common\\ModalForEditList.js",["1128","1129"],"import { useEffect, useState } from \"react\";\r\nimport { Modal, Input, Select } from \"antd\";\r\nimport \"../Workout/ExerciseChooseModal/ExerciseChooseModal.css\";\r\nimport { EditFilled } from \"@ant-design/icons\";\r\n\r\nfunction ModalForEditList({\r\n  open,\r\n  setOpen,\r\n  data,\r\n  onClickEdit,\r\n  title,\r\n  subtext,\r\n  searchPlaceholder = \"Search\",\r\n  searchKeys = [\"challengeName\"], // default keys\r\n}) {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchKey, setSearchKey] = useState(searchKeys[0]);\r\n\r\n  // Filter data based on search and selected key\r\n  const filteredData = data.filter((d) =>\r\n    (d[searchKey] || \"\").toString().toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Reset search when modal opens\r\n    if (open) {\r\n      setSearch(\"\");\r\n    }\r\n  }, [open]);\r\n\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      footer={null}\r\n      onCancel={() => setOpen(false)}\r\n      title=\"\"\r\n      bodyStyle={{\r\n        backgroundColor: \"#171e27\",\r\n        border: \"1px solid #FF950A\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <div className=\"exercise-selector__header\">\r\n        <h2 className=\"exercise-selector__title\">{title}</h2>\r\n      </div>\r\n\r\n      <Input\r\n        placeholder={searchPlaceholder}\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n        style={{ minWidth: 180, marginBottom: \"10px\" }}\r\n        allowClear\r\n      />\r\n\r\n      <div\r\n        className=\"exercise-selector__list\"\r\n        style={{ maxHeight: \"230px\", overflowY: \"auto\" }}\r\n      >\r\n        {filteredData.map((d, index) => (\r\n          <div\r\n            key={index}\r\n            className={`exercise-selector__item`}\r\n            style={{ cursor: \"default\" }}\r\n          >\r\n            <p>{d.name || d.title || d.challengeName || \"Unnamed\"}</p>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontSize: \"12px\",\r\n                  lineHeight: \"100%\",\r\n                  letterSpacing: \"0%\",\r\n                  verticalAlign: \"middle\",\r\n                  color: \"#465060\",\r\n                }}\r\n              >\r\n                {subtext || \"ID\"}: {d._id}\r\n              </span>\r\n\r\n              <EditFilled\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                  color: \"white\",\r\n                  fontSize: \"18px\",\r\n                }}\r\n                onClick={() => onClickEdit(d._id)}\r\n              />\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {filteredData.length === 0 && (\r\n          <div style={{ color: \"#fff\", marginTop: \"20px\" }}>\r\n            No results found.\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ModalForEditList;\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\ExerciseCreatorPopup.js",["1130","1131","1132"],"import { useContext, useEffect, useState } from \"react\";\r\nimport { Modal, Input, Select } from \"antd\";\r\nimport \"../../components/Admin/V2/Workout/MusicChooseModal/MusicChooseModal.css\";\r\nimport ExerciseIcon from \"../../assets/icons/dumb-bell-icon-orange.svg\";\r\nimport RemoteMediaManager from \"../../components/Admin/MediaManager/RemoteMediaManager\";\r\nimport ExericseIconWhite from \"../../assets/icons/dumb-bell-icon.svg\";\r\nimport WhistleIconWhite from \"../../assets/icons/whitsle-icon-white.svg\";\r\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\r\nimport { userInfoContext } from \"../../contexts/UserStore\";\r\nimport {\r\n  createExercise,\r\n  updateExercise,\r\n} from \"../../services/createChallenge/main\";\r\n\r\nfunction ExerciseCreatorPopup({\r\n  open,\r\n  setOpen,\r\n  onSuccess,\r\n  selectedExerciseForEdit,\r\n}) {\r\n  const { language } = useContext(LanguageContext);\r\n  const userInfo = useContext(userInfoContext)[0];\r\n  const [exerciseTitle, setExerciseTitle] = useState(\"\");\r\n  const [exerciseDescription, setExerciseDescription] = useState(\"\");\r\n  const [mediaManagerVisible, setMediaManagerVisible] = useState(false);\r\n  const [mediaManagerType, setMediaManagerType] = useState(\"videos\");\r\n  const [mediaManagerActions, setMediaManagerActions] = useState([]);\r\n\r\n  const [videoFile, setVideoFile] = useState(null);\r\n  const [audioFile, setAudioFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"ammar\", open, selectedExerciseForEdit);\r\n    // Reset the state\r\n    if (open) {\r\n      if (selectedExerciseForEdit) {\r\n        setExerciseTitle(selectedExerciseForEdit.title || \"\");\r\n        setExerciseDescription(selectedExerciseForEdit.description || \"\");\r\n        setVideoFile(\r\n          selectedExerciseForEdit.videoURL\r\n            ? { link: selectedExerciseForEdit.videoURL }\r\n            : null\r\n        );\r\n        setAudioFile(\r\n          selectedExerciseForEdit.voiceOverLink\r\n            ? { link: selectedExerciseForEdit.voiceOverLink }\r\n            : null\r\n        );\r\n      } else {\r\n        setExerciseTitle(\"\");\r\n        setExerciseDescription(\"\");\r\n        setVideoFile(null);\r\n        setAudioFile(null);\r\n        setMediaManagerVisible(false);\r\n        setMediaManagerType(\"videos\");\r\n        setMediaManagerActions([]);\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  const openMediaManager = (type) => {\r\n    setMediaManagerVisible(true);\r\n    setMediaManagerType(type);\r\n    if (type === \"videos\") {\r\n      setMediaManagerActions([videoFile, setVideoFile]);\r\n    } else if (type === \"voiceOvers\") {\r\n      setMediaManagerActions([audioFile, setAudioFile]);\r\n    }\r\n  };\r\n\r\n  const onCreate = async () => {\r\n    if (!exerciseTitle || !videoFile) {\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    try {\r\n      const data = {\r\n        videoURL: videoFile.link,\r\n        voiceOverLink: audioFile?.link,\r\n        trainer: userInfo.id,\r\n        language,\r\n        title: exerciseTitle,\r\n        description: exerciseDescription,\r\n      };\r\n      if (selectedExerciseForEdit) {\r\n        await updateExercise(data, selectedExerciseForEdit._id);\r\n      } else {\r\n        await createExercise(data);\r\n      }\r\n\r\n      setLoading(false);\r\n      setOpen(false);\r\n      onSuccess();\r\n    } catch (error) {\r\n      console.error(\"Error creating exercise:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      footer={null}\r\n      onCancel={() => setOpen(false)}\r\n      title=\"\"\r\n      bodyStyle={{\r\n        backgroundColor: \"#171e27\",\r\n        border: \"1px solid #FF950A\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <RemoteMediaManager\r\n        visible={mediaManagerVisible}\r\n        setVisible={setMediaManagerVisible}\r\n        type={mediaManagerType}\r\n        actions={mediaManagerActions}\r\n      />\r\n      <div className=\"music-selector__header\">\r\n        <img src={ExerciseIcon} alt=\"img\" className=\"music-selector__icon\" />\r\n        <h2 className=\"music-selector__title\">\r\n          <span>Create Exercise</span>\r\n        </h2>\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Exercise Title\"\r\n        value={exerciseTitle}\r\n        onChange={(e) => setExerciseTitle(e.target.value)}\r\n        style={{\r\n          padding: \"6px 10px\",\r\n          borderRadius: \"6px\",\r\n          border: \"1px dashed #fff\",\r\n          color: \"#fff\",\r\n          fontSize: \"16px\",\r\n          background: \"#222935\",\r\n          outline: \"none\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          gap: \"10px\",\r\n          marginTop: \"10px\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => openMediaManager(\"videos\")}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#222935\",\r\n              padding: \"6px 10px\",\r\n              height: \"100px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              position: \"relative\", // Add for X positioning\r\n            }}\r\n          >\r\n            {videoFile ? (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <a\r\n                  style={{\r\n                    textDecoration: \"underline\",\r\n                    color: \"#FF950A\",\r\n                    fontSize: \"12px\",\r\n                    textAlign: \"center\",\r\n                    width: \"150px\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                    textWrap: \"balance\",\r\n                    whiteSpace: \"nowrap\",\r\n                  }}\r\n                  href={videoFile.link}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                >\r\n                  {videoFile.link}\r\n                </a>\r\n                <span\r\n                  style={{\r\n                    color: \"#fff\",\r\n                    cursor: \"pointer\",\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"16px\",\r\n                    marginBottom: \"5px\",\r\n                    marginLeft: \"10px\",\r\n                  }}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setVideoFile(null);\r\n                  }}\r\n                  title=\"Remove\"\r\n                >\r\n                  ×\r\n                </span>\r\n              </div>\r\n            ) : (\r\n              <img src={ExericseIconWhite} alt=\"select-video\" />\r\n            )}\r\n          </div>\r\n          <h2\r\n            style={{\r\n              color: \"#fff\",\r\n              fontSize: \"16px\",\r\n            }}\r\n          >\r\n            Select Video\r\n          </h2>\r\n        </div>\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => openMediaManager(\"voiceOvers\")}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#222935\",\r\n              padding: \"6px 10px\",\r\n              height: \"100px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            {audioFile ? (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <a\r\n                  style={{\r\n                    textDecoration: \"underline\",\r\n                    color: \"#FF950A\",\r\n                    fontSize: \"12px\",\r\n                    textAlign: \"center\",\r\n                    width: \"150px\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                    textWrap: \"balance\",\r\n                    whiteSpace: \"nowrap\",\r\n                  }}\r\n                  href={audioFile.link}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                  }}\r\n                >\r\n                  {audioFile.link}\r\n                </a>\r\n                <span\r\n                  style={{\r\n                    color: \"#fff\",\r\n                    cursor: \"pointer\",\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"16px\",\r\n                    marginBottom: \"5px\",\r\n                    marginLeft: \"10px\",\r\n                  }}\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setAudioFile(null);\r\n                  }}\r\n                  title=\"Remove\"\r\n                >\r\n                  ×\r\n                </span>\r\n              </div>\r\n            ) : (\r\n              <img src={WhistleIconWhite} alt=\"select-audio\" />\r\n            )}\r\n          </div>\r\n          <h2\r\n            style={{\r\n              color: \"#fff\",\r\n              fontSize: \"16px\",\r\n            }}\r\n          >\r\n            Select Audio\r\n            <br /> (Optional)\r\n          </h2>\r\n        </div>\r\n      </div>\r\n      <textarea\r\n        placeholder=\"Exercise Description (Optional)\"\r\n        value={exerciseDescription}\r\n        onChange={(e) => setExerciseDescription(e.target.value)}\r\n        style={{\r\n          padding: \"6px 10px\",\r\n          borderRadius: \"6px\",\r\n          border: \"1px dashed #fff\",\r\n          color: \"#fff\",\r\n          fontSize: \"16px\",\r\n          background: \"#222935\",\r\n          outline: \"none\",\r\n          width: \"100%\",\r\n          marginTop: \"10px\",\r\n          resize: \"vertical\", // allows resizing\r\n          minHeight: \"100px\", // optional: set a minimum height\r\n        }}\r\n      />\r\n      <button\r\n        className=\"music-selector__next-btn\"\r\n        onClick={onCreate}\r\n        style={{ marginTop: \"10px\" }}\r\n        disabled={!exerciseTitle || !videoFile || loading}\r\n      >\r\n        Save\r\n      </button>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default ExerciseCreatorPopup;\r\n","D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\pages\\v2\\WorkoutStudio.js",["1133","1134","1135","1136"],"D:\\Projects\\realchallenge\\realchallenge-frontend-updated\\src\\contexts\\MediaManagerContext.js",["1137"],"import React, { createContext, useContext, useState, useCallback } from \"react\";\r\nimport {\r\n  getAllMediaFolders,\r\n  getMediaFolderFiles,\r\n  uploadMediaFile,\r\n  deleteMediaFile,\r\n  createMediaFolder,\r\n  deleteMediaFolder,\r\n  updateMediaFolder,\r\n  updateMediaFile, // Add this import\r\n  getUserMediaFolders,\r\n  moveMediaFileS,\r\n} from \"../services/mediaManager\";\r\nimport { notification } from \"antd\";\r\n\r\nconst openNotificationWithIcon = (type, message, description) => {\r\n  notification[type]({\r\n    message: message,\r\n    description: description,\r\n  });\r\n};\r\n\r\n// Create context\r\nconst MediaManagerContext = createContext();\r\n\r\n// Provider component\r\nexport const MediaManagerProvider = ({ children }) => {\r\n  const [folders, setFolders] = useState([]);\r\n  const [filesByFolder, setFilesByFolder] = useState({}); // { [folderId]: [files] }\r\n  const [loadingFolders, setLoadingFolders] = useState(false);\r\n  const [loadingFiles, setLoadingFiles] = useState({}); // { [folderId]: boolean }\r\n\r\n  // Fetch all folders (with cache)\r\n  const fetchFolders = useCallback(\r\n    async (force = false) => {\r\n      if (folders.length > 0 && !force) return folders;\r\n      setLoadingFolders(true);\r\n      try {\r\n        const res = await getUserMediaFolders();\r\n        setFolders(res.folders || []);\r\n        return res.folders || [];\r\n      } finally {\r\n        setLoadingFolders(false);\r\n      }\r\n    },\r\n    [folders]\r\n  );\r\n\r\n  // Fetch files for a folder (with cache)\r\n  const fetchFiles = useCallback(\r\n    async (folderId, force = false) => {\r\n      if (filesByFolder[folderId] && !force) return filesByFolder[folderId];\r\n      setLoadingFiles((prev) => ({ ...prev, [folderId]: true }));\r\n      try {\r\n        const res = await getMediaFolderFiles(folderId);\r\n        setFilesByFolder((prev) => ({ ...prev, [folderId]: res.files || [] }));\r\n        return res.files || [];\r\n      } finally {\r\n        setLoadingFiles((prev) => ({ ...prev, [folderId]: false }));\r\n      }\r\n    },\r\n    [filesByFolder]\r\n  );\r\n\r\n  const handleUploadFile = async (folderId, file) => {\r\n    // Find the folder to get its mediaType\r\n    const folder = folders.find((f) => f._id === folderId);\r\n    if (!folder) throw new Error(\"Folder not found\");\r\n\r\n    // Define allowed mime types for each mediaType\r\n    const allowedMimeTypes = {\r\n      picture: [\r\n        \"image/jpeg\",\r\n        \"image/png\",\r\n        \"image/gif\",\r\n        \"image/webp\",\r\n        \"image/svg+xml\",\r\n      ],\r\n      video: [\"video/mp4\", \"video/webm\", \"video/ogg\", \"video/quicktime\"],\r\n      audio: [\r\n        \"audio/mpeg\",\r\n        \"audio/mp3\",\r\n        \"audio/wav\",\r\n        \"audio/ogg\",\r\n        \"audio/webm\",\r\n      ],\r\n      document: [\r\n        \"application/pdf\",\r\n        \"application/msword\",\r\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n        \"application/vnd.ms-excel\",\r\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n        \"text/plain\",\r\n      ],\r\n      other: [], // allow all\r\n    };\r\n\r\n    // If not \"other\", check file type\r\n    if (folder.mediaType !== \"other\") {\r\n      const allowed = allowedMimeTypes[folder.mediaType] || [];\r\n      if (!allowed.includes(file.type)) {\r\n        openNotificationWithIcon(\r\n          \"error\",\r\n          \"Invalid file type\",\r\n          `Only ${folder.mediaType} files are allowed in this folder.`\r\n        );\r\n        throw new Error(\r\n          `Only ${folder.mediaType} files are allowed in this folder.`\r\n        );\r\n      }\r\n    }\r\n\r\n    const res = await uploadMediaFile(folderId, file);\r\n    setFilesByFolder((prev) => ({\r\n      ...prev,\r\n      [folderId]: prev[folderId]\r\n        ? [res.mediaFile, ...prev[folderId]]\r\n        : [res.mediaFile],\r\n    }));\r\n    return res.mediaFile;\r\n  };\r\n\r\n  // Delete file and update cache\r\n  const handleDeleteFile = async (folderId, fileId) => {\r\n    await deleteMediaFile(folderId, fileId);\r\n    setFilesByFolder((prev) => ({\r\n      ...prev,\r\n      [folderId]: prev[folderId]?.filter((f) => f._id !== fileId),\r\n    }));\r\n  };\r\n\r\n  // Create folder and update cache (with hierarchy support)\r\n  const handleCreateFolder = async (data) => {\r\n    const res = await createMediaFolder(data);\r\n    setFolders((prev) => [res.folder, ...prev]);\r\n    return res.folder;\r\n  };\r\n\r\n  // Delete folder and update cache (with recursive child deletion)\r\n  const handleDeleteFolder = async (folderId) => {\r\n    await deleteMediaFolder(folderId);\r\n\r\n    // Remove folder and any child folders from cache\r\n    setFolders((prev) => {\r\n      // Find all folders that are children of the deleted folder (recursively)\r\n      const getAllChildFolders = (parentId, allFolders) => {\r\n        const children = allFolders.filter((f) => f.parentId === parentId);\r\n        let allChildren = [...children];\r\n        children.forEach((child) => {\r\n          allChildren = [\r\n            ...allChildren,\r\n            ...getAllChildFolders(child._id, allFolders),\r\n          ];\r\n        });\r\n        return allChildren;\r\n      };\r\n\r\n      const childFolders = getAllChildFolders(folderId, prev);\r\n      const folderIdsToRemove = [folderId, ...childFolders.map((f) => f._id)];\r\n\r\n      // Remove from folders array\r\n      const newFolders = prev.filter((f) => !folderIdsToRemove.includes(f._id));\r\n\r\n      // Remove from filesByFolder cache\r\n      setFilesByFolder((prevFiles) => {\r\n        const newFiles = { ...prevFiles };\r\n        folderIdsToRemove.forEach((id) => {\r\n          delete newFiles[id];\r\n        });\r\n        return newFiles;\r\n      });\r\n\r\n      return newFolders;\r\n    });\r\n  };\r\n\r\n  // Update folder and update cache\r\n  const handleUpdateFolder = async (folderId, data) => {\r\n    const res = await updateMediaFolder(folderId, data);\r\n    setFolders((prev) =>\r\n      prev.map((f) => (f._id === folderId ? { ...f, ...res.folder } : f))\r\n    );\r\n    return res.folder;\r\n  };\r\n\r\n  // Update file (rename) and update cache\r\n  const handleUpdateFile = async (folderId, fileId, data) => {\r\n    const res = await updateMediaFile(folderId, fileId, data);\r\n    setFilesByFolder((prev) => ({\r\n      ...prev,\r\n      [folderId]: prev[folderId]?.map((f) =>\r\n        f._id === fileId ? { ...f, ...res.file } : f\r\n      ),\r\n    }));\r\n    return res.file;\r\n  };\r\n\r\n  // Helper function to get folder hierarchy\r\n  const getFolderHierarchy = useCallback(() => {\r\n    const folderMap = new Map();\r\n    const rootFolders = [];\r\n\r\n    // Create folder map\r\n    folders.forEach((folder) => {\r\n      folderMap.set(folder._id, {\r\n        ...folder,\r\n        children: [],\r\n        depth: folder.depth || 0,\r\n      });\r\n    });\r\n\r\n    // Build parent-child relationships\r\n    folders.forEach((folder) => {\r\n      const folderData = folderMap.get(folder._id);\r\n      if (folder.parentId && folderMap.has(folder.parentId)) {\r\n        const parent = folderMap.get(folder.parentId);\r\n        parent.children.push(folderData);\r\n      } else {\r\n        rootFolders.push(folderData);\r\n      }\r\n    });\r\n\r\n    return { folderMap, rootFolders };\r\n  }, [folders]);\r\n\r\n  // Helper function to check if folder can have subfolders\r\n  const canCreateSubfolder = useCallback(\r\n    (folderId) => {\r\n      const folder = folders.find((f) => f._id === folderId);\r\n      return folder ? (folder.depth || 0) < 2 : false;\r\n    },\r\n    [folders]\r\n  );\r\n\r\n  // Helper function to get folder depth\r\n  const getFolderDepth = useCallback(\r\n    (folderId) => {\r\n      if (folderId === \"root\") return -1;\r\n      const folder = folders.find((f) => f._id === folderId);\r\n      return folder ? folder.depth || 0 : 0;\r\n    },\r\n    [folders]\r\n  );\r\n\r\n  // Helper function to validate folder name uniqueness\r\n  const isNameUniqueInFolder = useCallback(\r\n    (name, parentId, excludeId = null) => {\r\n      const siblings = folders.filter(\r\n        (f) => f.parentId === parentId && f._id !== excludeId\r\n      );\r\n      return !siblings.some((f) => f.name === name);\r\n    },\r\n    [folders]\r\n  );\r\n\r\n  // IMPROVED moveMediaFile function with better error handling and logging\r\n  const moveMediaFile = useCallback(\r\n    async (fileId, oldFolderId, newFolderId) => {\r\n      console.log(\r\n        `Starting move operation: ${fileId} from ${oldFolderId} to ${newFolderId}`\r\n      );\r\n\r\n      try {\r\n        const token = localStorage.getItem(\"jwtToken\");\r\n        if (!token) {\r\n          throw new Error(\"No authentication token found\");\r\n        }\r\n\r\n        console.log(\"Making API request to move file...\");\r\n\r\n        try {\r\n          const data = await moveMediaFileS(fileId, oldFolderId, newFolderId);\r\n          console.log(\"Move operation successful:\", data);\r\n          // Update the local state to reflect the move\r\n          setFilesByFolder((prev) => {\r\n            const updated = { ...prev };\r\n\r\n            // Remove file from old folder\r\n            if (updated[oldFolderId]) {\r\n              updated[oldFolderId] = updated[oldFolderId].filter(\r\n                (file) => file._id !== fileId\r\n              );\r\n              console.log(`Removed file from folder ${oldFolderId}`);\r\n            }\r\n\r\n            // Add file to new folder (if it's already loaded)\r\n            if (updated[newFolderId]) {\r\n              // Update the file with new folderId and mediaType\r\n              const movedFile = {\r\n                ...data.file,\r\n                folderId: newFolderId,\r\n              };\r\n              updated[newFolderId] = [...updated[newFolderId], movedFile];\r\n              console.log(`Added file to folder ${newFolderId}`);\r\n            }\r\n\r\n            return updated;\r\n          });\r\n\r\n          console.log(\"Local state updated successfully\");\r\n          return data;\r\n        } catch (error) {\r\n          console.error(\"Error during API request:\", error);\r\n          throw new Error(error.message || \"Failed to move file\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error moving file:\", error);\r\n        openNotificationWithIcon(\r\n          \"error\",\r\n          \"Move Failed\",\r\n          error.message || \"Failed to move file\"\r\n        );\r\n        throw error;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    <MediaManagerContext.Provider\r\n      value={{\r\n        folders,\r\n        filesByFolder,\r\n        loadingFolders,\r\n        loadingFiles,\r\n        fetchFolders,\r\n        fetchFiles,\r\n        uploadMediaFile: handleUploadFile,\r\n        deleteMediaFile: handleDeleteFile,\r\n        createMediaFolder: handleCreateFolder,\r\n        deleteMediaFolder: handleDeleteFolder,\r\n        updateMediaFolder: handleUpdateFolder,\r\n        updateMediaFile: handleUpdateFile, // Add this new method\r\n\r\n        // Helper functions for hierarchy management\r\n        getFolderHierarchy,\r\n        canCreateSubfolder,\r\n        getFolderDepth,\r\n        isNameUniqueInFolder,\r\n        moveMediaFile,\r\n      }}\r\n    >\r\n      {children}\r\n    </MediaManagerContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for easy usage\r\nexport const useMediaManager = () => useContext(MediaManagerContext);\r\n",{"ruleId":"1138","severity":1,"message":"1139","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":21},{"ruleId":"1142","replacedBy":"1143"},{"ruleId":"1144","replacedBy":"1145"},{"ruleId":"1138","severity":1,"message":"1146","line":53,"column":8,"nodeType":"1140","messageId":"1141","endLine":53,"endColumn":15},{"ruleId":"1147","severity":1,"message":"1148","line":63,"column":6,"nodeType":"1149","endLine":63,"endColumn":8,"suggestions":"1150"},{"ruleId":"1147","severity":1,"message":"1151","line":31,"column":6,"nodeType":"1149","endLine":31,"endColumn":16,"suggestions":"1152"},{"ruleId":"1138","severity":1,"message":"1153","line":15,"column":10,"nodeType":"1140","messageId":"1141","endLine":15,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1154","line":16,"column":10,"nodeType":"1140","messageId":"1141","endLine":16,"endColumn":16},{"ruleId":"1155","severity":1,"message":"1156","line":22,"column":3,"nodeType":"1157","messageId":"1158","endLine":22,"endColumn":10},{"ruleId":"1138","severity":1,"message":"1159","line":27,"column":10,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1160","line":27,"column":16,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":23},{"ruleId":"1147","severity":1,"message":"1161","line":43,"column":6,"nodeType":"1149","endLine":43,"endColumn":20,"suggestions":"1162"},{"ruleId":"1147","severity":1,"message":"1151","line":34,"column":6,"nodeType":"1149","endLine":34,"endColumn":16,"suggestions":"1163"},{"ruleId":"1138","severity":1,"message":"1164","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":25},{"ruleId":"1147","severity":1,"message":"1165","line":32,"column":6,"nodeType":"1149","endLine":32,"endColumn":8,"suggestions":"1166"},{"ruleId":"1138","severity":1,"message":"1167","line":39,"column":9,"nodeType":"1140","messageId":"1141","endLine":39,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1168","line":58,"column":13,"nodeType":"1140","messageId":"1141","endLine":58,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1168","line":88,"column":13,"nodeType":"1140","messageId":"1141","endLine":88,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1168","line":120,"column":13,"nodeType":"1140","messageId":"1141","endLine":120,"endColumn":14},{"ruleId":"1147","severity":1,"message":"1169","line":31,"column":6,"nodeType":"1149","endLine":31,"endColumn":16,"suggestions":"1170"},{"ruleId":"1138","severity":1,"message":"1171","line":16,"column":8,"nodeType":"1140","messageId":"1141","endLine":16,"endColumn":12},{"ruleId":"1155","severity":1,"message":"1156","line":28,"column":3,"nodeType":"1157","messageId":"1158","endLine":28,"endColumn":10},{"ruleId":"1155","severity":1,"message":"1172","line":30,"column":3,"nodeType":"1157","messageId":"1158","endLine":30,"endColumn":9},{"ruleId":"1147","severity":1,"message":"1151","line":51,"column":6,"nodeType":"1149","endLine":51,"endColumn":16,"suggestions":"1173"},{"ruleId":"1147","severity":1,"message":"1174","line":106,"column":6,"nodeType":"1149","endLine":106,"endColumn":78,"suggestions":"1175"},{"ruleId":"1138","severity":1,"message":"1176","line":25,"column":10,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1177","line":25,"column":20,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1178","line":26,"column":10,"nodeType":"1140","messageId":"1141","endLine":26,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1179","line":26,"column":20,"nodeType":"1140","messageId":"1141","endLine":26,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1165","line":33,"column":6,"nodeType":"1149","endLine":33,"endColumn":8,"suggestions":"1180"},{"ruleId":"1138","severity":1,"message":"1167","line":35,"column":9,"nodeType":"1140","messageId":"1141","endLine":35,"endColumn":25},{"ruleId":"1181","severity":1,"message":"1182","line":84,"column":5,"nodeType":"1183","messageId":"1184","endLine":115,"endColumn":6},{"ruleId":"1138","severity":1,"message":"1185","line":12,"column":10,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1186","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1187","line":9,"column":3,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1188","line":12,"column":3,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1189","line":18,"column":25,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1190","line":27,"column":8,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":28},{"ruleId":"1191","severity":1,"message":"1192","line":34,"column":1,"nodeType":"1193","messageId":"1194","endLine":36,"endColumn":2},{"ruleId":"1138","severity":1,"message":"1195","line":44,"column":20,"nodeType":"1140","messageId":"1141","endLine":44,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1151","line":53,"column":6,"nodeType":"1149","endLine":53,"endColumn":16,"suggestions":"1196"},{"ruleId":"1138","severity":1,"message":"1197","line":23,"column":10,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":14},{"ruleId":"1147","severity":1,"message":"1151","line":57,"column":6,"nodeType":"1149","endLine":57,"endColumn":8,"suggestions":"1198"},{"ruleId":"1199","severity":1,"message":"1200","line":182,"column":17,"nodeType":"1201","endLine":185,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1202","line":25,"column":10,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1203","line":36,"column":10,"nodeType":"1140","messageId":"1141","endLine":36,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1197","line":48,"column":10,"nodeType":"1140","messageId":"1141","endLine":48,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1204","line":54,"column":20,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1205","line":56,"column":10,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":27},{"ruleId":"1147","severity":1,"message":"1151","line":134,"column":6,"nodeType":"1149","endLine":134,"endColumn":26,"suggestions":"1206"},{"ruleId":"1191","severity":1,"message":"1192","line":28,"column":1,"nodeType":"1193","messageId":"1194","endLine":30,"endColumn":2},{"ruleId":"1138","severity":1,"message":"1197","line":38,"column":10,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":14},{"ruleId":"1147","severity":1,"message":"1207","line":46,"column":6,"nodeType":"1149","endLine":46,"endColumn":16,"suggestions":"1208"},{"ruleId":"1138","severity":1,"message":"1209","line":56,"column":10,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1210","line":59,"column":11,"nodeType":"1140","messageId":"1141","endLine":59,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1211","line":69,"column":6,"nodeType":"1149","endLine":69,"endColumn":8,"suggestions":"1212"},{"ruleId":"1213","severity":1,"message":"1214","line":399,"column":15,"nodeType":"1201","messageId":"1215","endLine":399,"endColumn":72,"fix":"1216"},{"ruleId":"1138","severity":1,"message":"1217","line":9,"column":10,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":18},{"ruleId":"1147","severity":1,"message":"1151","line":23,"column":6,"nodeType":"1149","endLine":23,"endColumn":16,"suggestions":"1218"},{"ruleId":"1138","severity":1,"message":"1219","line":5,"column":22,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":26},{"ruleId":"1147","severity":1,"message":"1220","line":25,"column":6,"nodeType":"1149","endLine":25,"endColumn":8,"suggestions":"1221"},{"ruleId":"1138","severity":1,"message":"1187","line":6,"column":10,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1222","line":6,"column":24,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":39},{"ruleId":"1138","severity":1,"message":"1223","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":29,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":38},{"ruleId":"1138","severity":1,"message":"1225","line":6,"column":8,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1226","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1227","line":21,"column":7,"nodeType":"1140","messageId":"1141","endLine":21,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1228","line":23,"column":7,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":14},{"ruleId":"1147","severity":1,"message":"1229","line":13,"column":6,"nodeType":"1149","endLine":13,"endColumn":8,"suggestions":"1230"},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":29,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":38},{"ruleId":"1138","severity":1,"message":"1225","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1226","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1227","line":23,"column":7,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1228","line":25,"column":7,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":29,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":38},{"ruleId":"1138","severity":1,"message":"1225","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1226","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1227","line":23,"column":7,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1228","line":25,"column":7,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1185","line":13,"column":10,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1231","line":22,"column":11,"nodeType":"1140","messageId":"1141","endLine":22,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1232","line":10,"column":3,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1233","line":18,"column":3,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":28},{"ruleId":"1138","severity":1,"message":"1234","line":32,"column":8,"nodeType":"1140","messageId":"1141","endLine":32,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1235","line":33,"column":8,"nodeType":"1140","messageId":"1141","endLine":33,"endColumn":15},{"ruleId":"1147","severity":1,"message":"1236","line":124,"column":6,"nodeType":"1149","endLine":124,"endColumn":8,"suggestions":"1237"},{"ruleId":"1138","severity":1,"message":"1204","line":40,"column":20,"nodeType":"1140","messageId":"1141","endLine":40,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1210","line":45,"column":11,"nodeType":"1140","messageId":"1141","endLine":45,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1238","line":84,"column":6,"nodeType":"1149","endLine":84,"endColumn":15,"suggestions":"1239"},{"ruleId":"1138","severity":1,"message":"1240","line":23,"column":10,"nodeType":"1140","messageId":"1141","endLine":23,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1154","line":29,"column":10,"nodeType":"1140","messageId":"1141","endLine":29,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1204","line":30,"column":20,"nodeType":"1140","messageId":"1141","endLine":30,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1241","line":31,"column":20,"nodeType":"1140","messageId":"1141","endLine":31,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1153","line":32,"column":10,"nodeType":"1140","messageId":"1141","endLine":32,"endColumn":14},{"ruleId":"1147","severity":1,"message":"1242","line":43,"column":6,"nodeType":"1149","endLine":43,"endColumn":8,"suggestions":"1243"},{"ruleId":"1138","severity":1,"message":"1244","line":9,"column":23,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1245","line":9,"column":32,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":39},{"ruleId":"1138","severity":1,"message":"1246","line":4,"column":23,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1247","line":4,"column":31,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1248","line":4,"column":39,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":47},{"ruleId":"1138","severity":1,"message":"1249","line":18,"column":10,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1204","line":42,"column":20,"nodeType":"1140","messageId":"1141","endLine":42,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1250","line":47,"column":10,"nodeType":"1140","messageId":"1141","endLine":47,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1251","line":58,"column":19,"nodeType":"1140","messageId":"1141","endLine":58,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1252","line":59,"column":10,"nodeType":"1140","messageId":"1141","endLine":59,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1253","line":62,"column":9,"nodeType":"1140","messageId":"1141","endLine":62,"endColumn":33},{"ruleId":"1147","severity":1,"message":"1254","line":110,"column":6,"nodeType":"1149","endLine":110,"endColumn":8,"suggestions":"1255"},{"ruleId":"1138","severity":1,"message":"1256","line":112,"column":9,"nodeType":"1140","messageId":"1141","endLine":112,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1257","line":121,"column":9,"nodeType":"1140","messageId":"1141","endLine":121,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1258","line":132,"column":9,"nodeType":"1140","messageId":"1141","endLine":132,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1259","line":7,"column":10,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1219","line":8,"column":10,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1260","line":11,"column":8,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1261","line":13,"column":3,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1262","line":17,"column":3,"nodeType":"1140","messageId":"1141","endLine":17,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1263","line":21,"column":10,"nodeType":"1140","messageId":"1141","endLine":21,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1264","line":21,"column":26,"nodeType":"1140","messageId":"1141","endLine":21,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1265","line":37,"column":3,"nodeType":"1140","messageId":"1141","endLine":37,"endColumn":23},{"ruleId":"1138","severity":1,"message":"1197","line":45,"column":10,"nodeType":"1140","messageId":"1141","endLine":45,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1266","line":46,"column":21,"nodeType":"1140","messageId":"1141","endLine":46,"endColumn":33},{"ruleId":"1138","severity":1,"message":"1267","line":49,"column":28,"nodeType":"1140","messageId":"1141","endLine":49,"endColumn":47},{"ruleId":"1147","severity":1,"message":"1268","line":90,"column":6,"nodeType":"1149","endLine":90,"endColumn":16,"suggestions":"1269"},{"ruleId":"1199","severity":1,"message":"1200","line":239,"column":17,"nodeType":"1201","endLine":242,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1270","line":7,"column":3,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1271","line":26,"column":7,"nodeType":"1140","messageId":"1141","endLine":26,"endColumn":24},{"ruleId":"1147","severity":1,"message":"1151","line":107,"column":6,"nodeType":"1149","endLine":107,"endColumn":16,"suggestions":"1272"},{"ruleId":"1147","severity":1,"message":"1273","line":12,"column":6,"nodeType":"1149","endLine":12,"endColumn":8,"suggestions":"1274"},{"ruleId":"1138","severity":1,"message":"1275","line":414,"column":10,"nodeType":"1140","messageId":"1141","endLine":414,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1276","line":414,"column":20,"nodeType":"1140","messageId":"1141","endLine":414,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1204","line":416,"column":20,"nodeType":"1140","messageId":"1141","endLine":416,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1277","line":551,"column":6,"nodeType":"1149","endLine":551,"endColumn":8,"suggestions":"1278"},{"ruleId":"1138","severity":1,"message":"1219","line":3,"column":22,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1279","line":9,"column":10,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1204","line":9,"column":20,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1165","line":15,"column":6,"nodeType":"1149","endLine":15,"endColumn":8,"suggestions":"1280"},{"ruleId":"1138","severity":1,"message":"1281","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":28},{"ruleId":"1138","severity":1,"message":"1247","line":4,"column":17,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":23},{"ruleId":"1138","severity":1,"message":"1282","line":4,"column":25,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":30},{"ruleId":"1199","severity":1,"message":"1200","line":244,"column":21,"nodeType":"1201","endLine":244,"endColumn":40},{"ruleId":"1138","severity":1,"message":"1283","line":9,"column":34,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":41},{"ruleId":"1199","severity":1,"message":"1200","line":120,"column":17,"nodeType":"1201","endLine":120,"endColumn":36},{"ruleId":"1147","severity":1,"message":"1284","line":20,"column":3,"nodeType":"1140","endLine":20,"endColumn":12,"suggestions":"1285"},{"ruleId":"1138","severity":1,"message":"1286","line":4,"column":3,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1287","line":5,"column":3,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1288","line":7,"column":3,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1289","line":8,"column":3,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":13},{"ruleId":"1138","severity":1,"message":"1189","line":12,"column":18,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":23},{"ruleId":"1147","severity":1,"message":"1151","line":48,"column":6,"nodeType":"1149","endLine":48,"endColumn":28,"suggestions":"1290"},{"ruleId":"1291","severity":1,"message":"1292","line":79,"column":9,"nodeType":"1201","endLine":79,"endColumn":70},{"ruleId":"1291","severity":1,"message":"1292","line":86,"column":9,"nodeType":"1201","endLine":86,"endColumn":69},{"ruleId":"1138","severity":1,"message":"1189","line":5,"column":18,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":23},{"ruleId":"1147","severity":1,"message":"1151","line":40,"column":6,"nodeType":"1149","endLine":40,"endColumn":28,"suggestions":"1293"},{"ruleId":"1291","severity":1,"message":"1292","line":71,"column":9,"nodeType":"1201","endLine":71,"endColumn":70},{"ruleId":"1291","severity":1,"message":"1292","line":78,"column":9,"nodeType":"1201","endLine":78,"endColumn":69},{"ruleId":"1138","severity":1,"message":"1294","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1295","line":20,"column":8,"nodeType":"1140","messageId":"1141","endLine":20,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1210","line":53,"column":11,"nodeType":"1140","messageId":"1141","endLine":53,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1296","line":63,"column":10,"nodeType":"1140","messageId":"1141","endLine":63,"endColumn":27},{"ruleId":"1147","severity":1,"message":"1297","line":100,"column":6,"nodeType":"1149","endLine":100,"endColumn":19,"suggestions":"1298"},{"ruleId":"1138","severity":1,"message":"1299","line":54,"column":7,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1204","line":90,"column":20,"nodeType":"1140","messageId":"1141","endLine":90,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1210","line":91,"column":11,"nodeType":"1140","messageId":"1141","endLine":91,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1300","line":182,"column":6,"nodeType":"1149","endLine":182,"endColumn":8,"suggestions":"1301"},{"ruleId":"1302","severity":1,"message":"1303","line":227,"column":16,"nodeType":"1304","messageId":"1305","endLine":227,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1306","line":7,"column":11,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1307","line":1,"column":50,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":61},{"ruleId":"1138","severity":1,"message":"1219","line":12,"column":22,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1308","line":26,"column":10,"nodeType":"1140","messageId":"1141","endLine":26,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1309","line":41,"column":10,"nodeType":"1140","messageId":"1141","endLine":41,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1310","line":48,"column":10,"nodeType":"1140","messageId":"1141","endLine":48,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1311","line":56,"column":3,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1312","line":58,"column":3,"nodeType":"1140","messageId":"1141","endLine":58,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1313","line":77,"column":10,"nodeType":"1140","messageId":"1141","endLine":77,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1314","line":89,"column":21,"nodeType":"1140","messageId":"1141","endLine":89,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1204","line":90,"column":20,"nodeType":"1140","messageId":"1141","endLine":90,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1315","line":93,"column":5,"nodeType":"1140","messageId":"1141","endLine":93,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1316","line":138,"column":5,"nodeType":"1140","messageId":"1141","endLine":138,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1317","line":142,"column":5,"nodeType":"1140","messageId":"1141","endLine":142,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1318","line":143,"column":5,"nodeType":"1140","messageId":"1141","endLine":143,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1319","line":145,"column":5,"nodeType":"1140","messageId":"1141","endLine":145,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1320","line":236,"column":6,"nodeType":"1149","endLine":236,"endColumn":60,"suggestions":"1321"},{"ruleId":"1147","severity":1,"message":"1322","line":242,"column":6,"nodeType":"1149","endLine":242,"endColumn":26,"suggestions":"1323"},{"ruleId":"1138","severity":1,"message":"1324","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1325","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":20},{"ruleId":"1147","severity":1,"message":"1151","line":42,"column":6,"nodeType":"1149","endLine":42,"endColumn":16,"suggestions":"1326"},{"ruleId":"1138","severity":1,"message":"1282","line":2,"column":25,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1264","line":2,"column":32,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1327","line":2,"column":47,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":53},{"ruleId":"1138","severity":1,"message":"1328","line":5,"column":9,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1329","line":19,"column":3,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1330","line":20,"column":3,"nodeType":"1140","messageId":"1141","endLine":20,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1331","line":88,"column":10,"nodeType":"1140","messageId":"1141","endLine":88,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1279","line":141,"column":10,"nodeType":"1140","messageId":"1141","endLine":141,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1204","line":141,"column":20,"nodeType":"1140","messageId":"1141","endLine":141,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1332","line":150,"column":6,"nodeType":"1149","endLine":150,"endColumn":8,"suggestions":"1333"},{"ruleId":"1147","severity":1,"message":"1334","line":154,"column":6,"nodeType":"1149","endLine":154,"endColumn":8,"suggestions":"1335"},{"ruleId":"1302","severity":1,"message":"1336","line":333,"column":21,"nodeType":"1304","messageId":"1337","endLine":333,"endColumn":23},{"ruleId":"1138","severity":1,"message":"1338","line":13,"column":10,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1246","line":2,"column":31,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1339","line":2,"column":60,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":64},{"ruleId":"1138","severity":1,"message":"1328","line":3,"column":9,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1340","line":2,"column":18,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1341","line":2,"column":39,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":45},{"ruleId":"1147","severity":1,"message":"1151","line":22,"column":6,"nodeType":"1149","endLine":22,"endColumn":16,"suggestions":"1342"},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1240","line":9,"column":3,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1204","line":28,"column":20,"nodeType":"1140","messageId":"1141","endLine":28,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1343","line":70,"column":18,"nodeType":"1140","messageId":"1141","endLine":70,"endColumn":40},{"ruleId":"1138","severity":1,"message":"1344","line":4,"column":3,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":16},{"ruleId":"1147","severity":1,"message":"1151","line":34,"column":6,"nodeType":"1149","endLine":34,"endColumn":16,"suggestions":"1345"},{"ruleId":"1138","severity":1,"message":"1346","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":10},{"ruleId":"1138","severity":1,"message":"1347","line":13,"column":10,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1344","line":29,"column":3,"nodeType":"1140","messageId":"1141","endLine":29,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1204","line":46,"column":20,"nodeType":"1140","messageId":"1141","endLine":46,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1338","line":56,"column":10,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1251","line":56,"column":19,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1348","line":57,"column":10,"nodeType":"1140","messageId":"1141","endLine":57,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1349","line":57,"column":27,"nodeType":"1140","messageId":"1141","endLine":57,"endColumn":45},{"ruleId":"1147","severity":1,"message":"1350","line":136,"column":6,"nodeType":"1149","endLine":136,"endColumn":16,"suggestions":"1351"},{"ruleId":"1147","severity":1,"message":"1352","line":26,"column":13,"nodeType":"1304","endLine":28,"endColumn":4},{"ruleId":"1138","severity":1,"message":"1353","line":4,"column":3,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1354","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1355","line":9,"column":3,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1356","line":10,"column":3,"nodeType":"1140","messageId":"1141","endLine":10,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1357","line":42,"column":10,"nodeType":"1140","messageId":"1141","endLine":42,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1358","line":49,"column":10,"nodeType":"1140","messageId":"1141","endLine":49,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1359","line":49,"column":17,"nodeType":"1140","messageId":"1141","endLine":49,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1338","line":51,"column":10,"nodeType":"1140","messageId":"1141","endLine":51,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1360","line":54,"column":10,"nodeType":"1140","messageId":"1141","endLine":54,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1361","line":56,"column":31,"nodeType":"1140","messageId":"1141","endLine":56,"endColumn":53},{"ruleId":"1147","severity":1,"message":"1151","line":81,"column":6,"nodeType":"1149","endLine":81,"endColumn":8,"suggestions":"1362"},{"ruleId":"1147","severity":1,"message":"1363","line":29,"column":6,"nodeType":"1149","endLine":29,"endColumn":8,"suggestions":"1364"},{"ruleId":"1138","severity":1,"message":"1204","line":25,"column":20,"nodeType":"1140","messageId":"1141","endLine":25,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1365","line":30,"column":6,"nodeType":"1149","endLine":30,"endColumn":8,"suggestions":"1366"},{"ruleId":"1138","severity":1,"message":"1189","line":2,"column":16,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1247","line":2,"column":23,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1331","line":87,"column":10,"nodeType":"1140","messageId":"1141","endLine":87,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1204","line":138,"column":20,"nodeType":"1140","messageId":"1141","endLine":138,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1334","line":167,"column":6,"nodeType":"1149","endLine":167,"endColumn":16,"suggestions":"1367"},{"ruleId":"1138","severity":1,"message":"1368","line":9,"column":8,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":23},{"ruleId":"1147","severity":1,"message":"1369","line":38,"column":6,"nodeType":"1149","endLine":38,"endColumn":16,"suggestions":"1370"},{"ruleId":"1147","severity":1,"message":"1371","line":54,"column":6,"nodeType":"1149","endLine":54,"endColumn":8,"suggestions":"1372"},{"ruleId":"1147","severity":1,"message":"1373","line":497,"column":5,"nodeType":"1149","endLine":508,"endColumn":6,"suggestions":"1374"},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1375","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1376","line":7,"column":3,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1210","line":37,"column":11,"nodeType":"1140","messageId":"1141","endLine":37,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1377","line":37,"column":19,"nodeType":"1140","messageId":"1141","endLine":37,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1378","line":49,"column":9,"nodeType":"1140","messageId":"1141","endLine":49,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1223","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1379","line":1,"column":29,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":37,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":46},{"ruleId":"1138","severity":1,"message":"1380","line":5,"column":5,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":10},{"ruleId":"1138","severity":1,"message":"1209","line":52,"column":10,"nodeType":"1140","messageId":"1141","endLine":52,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1381","line":6,"column":10,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1382","line":6,"column":13,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1383","line":7,"column":10,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":11},{"ruleId":"1138","severity":1,"message":"1384","line":7,"column":13,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1325","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":20},{"ruleId":"1147","severity":1,"message":"1385","line":23,"column":6,"nodeType":"1149","endLine":23,"endColumn":8,"suggestions":"1386"},{"ruleId":"1147","severity":1,"message":"1387","line":70,"column":6,"nodeType":"1149","endLine":70,"endColumn":16,"suggestions":"1388"},{"ruleId":"1138","severity":1,"message":"1338","line":13,"column":10,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1389","line":35,"column":6,"nodeType":"1149","endLine":35,"endColumn":22,"suggestions":"1390"},{"ruleId":"1138","severity":1,"message":"1347","line":12,"column":10,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1338","line":47,"column":10,"nodeType":"1140","messageId":"1141","endLine":47,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1251","line":47,"column":19,"nodeType":"1140","messageId":"1141","endLine":47,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1348","line":48,"column":10,"nodeType":"1140","messageId":"1141","endLine":48,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1349","line":48,"column":27,"nodeType":"1140","messageId":"1141","endLine":48,"endColumn":45},{"ruleId":"1147","severity":1,"message":"1391","line":183,"column":6,"nodeType":"1149","endLine":183,"endColumn":8,"suggestions":"1392"},{"ruleId":"1138","severity":1,"message":"1246","line":2,"column":43,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":49},{"ruleId":"1138","severity":1,"message":"1346","line":2,"column":57,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":64},{"ruleId":"1138","severity":1,"message":"1347","line":4,"column":26,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":38},{"ruleId":"1138","severity":1,"message":"1338","line":38,"column":10,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1251","line":38,"column":19,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1393","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":28},{"ruleId":"1147","severity":1,"message":"1394","line":42,"column":6,"nodeType":"1149","endLine":42,"endColumn":8,"suggestions":"1395"},{"ruleId":"1138","severity":1,"message":"1246","line":2,"column":40,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":46},{"ruleId":"1138","severity":1,"message":"1346","line":2,"column":48,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":55},{"ruleId":"1138","severity":1,"message":"1324","line":19,"column":3,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1396","line":31,"column":3,"nodeType":"1140","messageId":"1141","endLine":31,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1397","line":38,"column":38,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":47},{"ruleId":"1147","severity":1,"message":"1365","line":134,"column":6,"nodeType":"1149","endLine":134,"endColumn":16,"suggestions":"1398"},{"ruleId":"1138","severity":1,"message":"1399","line":173,"column":9,"nodeType":"1140","messageId":"1141","endLine":173,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1400","line":1,"column":17,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1401","line":3,"column":25,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":45},{"ruleId":"1138","severity":1,"message":"1353","line":12,"column":10,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1338","line":112,"column":10,"nodeType":"1140","messageId":"1141","endLine":112,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1251","line":112,"column":19,"nodeType":"1140","messageId":"1141","endLine":112,"endColumn":29},{"ruleId":"1147","severity":1,"message":"1334","line":123,"column":6,"nodeType":"1149","endLine":123,"endColumn":16,"suggestions":"1402"},{"ruleId":"1138","severity":1,"message":"1403","line":168,"column":9,"nodeType":"1140","messageId":"1141","endLine":168,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1353","line":4,"column":3,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1354","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1355","line":8,"column":10,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1179","line":35,"column":20,"nodeType":"1140","messageId":"1141","endLine":35,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1357","line":38,"column":10,"nodeType":"1140","messageId":"1141","endLine":38,"endColumn":20},{"ruleId":"1138","severity":1,"message":"1338","line":47,"column":10,"nodeType":"1140","messageId":"1141","endLine":47,"endColumn":17},{"ruleId":"1147","severity":1,"message":"1404","line":91,"column":6,"nodeType":"1149","endLine":91,"endColumn":8,"suggestions":"1405"},{"ruleId":"1138","severity":1,"message":"1406","line":2,"column":39,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":47},{"ruleId":"1138","severity":1,"message":"1339","line":2,"column":49,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":53},{"ruleId":"1138","severity":1,"message":"1407","line":21,"column":10,"nodeType":"1140","messageId":"1141","endLine":21,"endColumn":18},{"ruleId":"1147","severity":1,"message":"1408","line":54,"column":6,"nodeType":"1149","endLine":54,"endColumn":29,"suggestions":"1409"},{"ruleId":"1138","severity":1,"message":"1410","line":39,"column":10,"nodeType":"1140","messageId":"1141","endLine":39,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1411","line":39,"column":24,"nodeType":"1140","messageId":"1141","endLine":39,"endColumn":39},{"ruleId":"1138","severity":1,"message":"1209","line":40,"column":10,"nodeType":"1140","messageId":"1141","endLine":40,"endColumn":34},{"ruleId":"1147","severity":1,"message":"1412","line":63,"column":6,"nodeType":"1149","endLine":63,"endColumn":15,"suggestions":"1413"},{"ruleId":"1147","severity":1,"message":"1414","line":96,"column":6,"nodeType":"1149","endLine":96,"endColumn":23,"suggestions":"1415"},{"ruleId":"1138","severity":1,"message":"1324","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1325","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":20},{"ruleId":"1147","severity":1,"message":"1416","line":50,"column":6,"nodeType":"1149","endLine":50,"endColumn":8,"suggestions":"1417"},{"ruleId":"1138","severity":1,"message":"1224","line":1,"column":27,"nodeType":"1140","messageId":"1141","endLine":1,"endColumn":36},{"ruleId":"1138","severity":1,"message":"1418","line":3,"column":8,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1419","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":25},{"ruleId":"1138","severity":1,"message":"1375","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1376","line":7,"column":3,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1420","line":11,"column":8,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1421","line":13,"column":8,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1422","line":14,"column":8,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1423","line":18,"column":7,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1424","line":34,"column":9,"nodeType":"1140","messageId":"1141","endLine":34,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1425","line":35,"column":10,"nodeType":"1140","messageId":"1141","endLine":35,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1426","line":35,"column":20,"nodeType":"1140","messageId":"1141","endLine":35,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1247","line":6,"column":10,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":16},{"ruleId":"1147","severity":1,"message":"1427","line":40,"column":6,"nodeType":"1149","endLine":40,"endColumn":8,"suggestions":"1428"},{"ruleId":"1138","severity":1,"message":"1376","line":6,"column":10,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":23},{"ruleId":"1138","severity":1,"message":"1429","line":14,"column":8,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1430","line":81,"column":36,"nodeType":"1140","messageId":"1141","endLine":81,"endColumn":63},{"ruleId":"1138","severity":1,"message":"1431","line":407,"column":29,"nodeType":"1140","messageId":"1141","endLine":407,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1189","line":2,"column":10,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":15},{"ruleId":"1138","severity":1,"message":"1432","line":11,"column":8,"nodeType":"1140","messageId":"1141","endLine":11,"endColumn":19},{"ruleId":"1138","severity":1,"message":"1433","line":17,"column":23,"nodeType":"1140","messageId":"1141","endLine":17,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1411","line":18,"column":24,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":39},{"ruleId":"1138","severity":1,"message":"1210","line":19,"column":11,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1377","line":19,"column":19,"nodeType":"1140","messageId":"1141","endLine":19,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1434","line":27,"column":10,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1435","line":27,"column":19,"nodeType":"1140","messageId":"1141","endLine":27,"endColumn":29},{"ruleId":"1138","severity":1,"message":"1436","line":18,"column":22,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1410","line":12,"column":10,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1437","line":13,"column":10,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1438","line":14,"column":10,"nodeType":"1140","messageId":"1141","endLine":14,"endColumn":22},{"ruleId":"1147","severity":1,"message":"1439","line":26,"column":6,"nodeType":"1149","endLine":26,"endColumn":8,"suggestions":"1440"},{"ruleId":"1138","severity":1,"message":"1441","line":2,"column":25,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":37},{"ruleId":"1138","severity":1,"message":"1442","line":9,"column":8,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1443","line":13,"column":8,"nodeType":"1140","messageId":"1141","endLine":13,"endColumn":21},{"ruleId":"1444","severity":1,"message":"1445","line":44,"column":13,"nodeType":"1140","messageId":"1446","endLine":44,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1442","line":8,"column":8,"nodeType":"1140","messageId":"1141","endLine":8,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1447","line":12,"column":8,"nodeType":"1140","messageId":"1141","endLine":12,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1204","line":18,"column":20,"nodeType":"1140","messageId":"1141","endLine":18,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1448","line":20,"column":10,"nodeType":"1140","messageId":"1141","endLine":20,"endColumn":20},{"ruleId":"1147","severity":1,"message":"1449","line":44,"column":6,"nodeType":"1149","endLine":44,"endColumn":12,"suggestions":"1450"},{"ruleId":"1138","severity":1,"message":"1247","line":2,"column":17,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":23},{"ruleId":"1138","severity":1,"message":"1327","line":2,"column":38,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":44},{"ruleId":"1138","severity":1,"message":"1451","line":6,"column":3,"nodeType":"1140","messageId":"1141","endLine":6,"endColumn":16},{"ruleId":"1147","severity":1,"message":"1452","line":52,"column":6,"nodeType":"1149","endLine":52,"endColumn":8,"suggestions":"1453"},{"ruleId":"1138","severity":1,"message":"1454","line":7,"column":8,"nodeType":"1140","messageId":"1141","endLine":7,"endColumn":9},{"ruleId":"1138","severity":1,"message":"1219","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":14},{"ruleId":"1138","severity":1,"message":"1455","line":3,"column":16,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":26},{"ruleId":"1138","severity":1,"message":"1247","line":4,"column":10,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1456","line":4,"column":18,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1340","line":4,"column":24,"nodeType":"1140","messageId":"1141","endLine":4,"endColumn":27},{"ruleId":"1138","severity":1,"message":"1457","line":22,"column":10,"nodeType":"1140","messageId":"1141","endLine":22,"endColumn":12},{"ruleId":"1138","severity":1,"message":"1209","line":66,"column":10,"nodeType":"1140","messageId":"1141","endLine":66,"endColumn":34},{"ruleId":"1147","severity":1,"message":"1458","line":100,"column":6,"nodeType":"1149","endLine":100,"endColumn":41,"suggestions":"1459"},{"ruleId":"1147","severity":1,"message":"1460","line":110,"column":6,"nodeType":"1149","endLine":110,"endColumn":8,"suggestions":"1461"},{"ruleId":"1147","severity":1,"message":"1462","line":127,"column":6,"nodeType":"1149","endLine":127,"endColumn":22,"suggestions":"1463"},{"ruleId":"1147","severity":1,"message":"1464","line":136,"column":6,"nodeType":"1149","endLine":136,"endColumn":16,"suggestions":"1465"},{"ruleId":"1138","severity":1,"message":"1466","line":3,"column":8,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":16},{"ruleId":"1138","severity":1,"message":"1467","line":24,"column":7,"nodeType":"1140","messageId":"1141","endLine":24,"endColumn":17},{"ruleId":"1138","severity":1,"message":"1436","line":69,"column":22,"nodeType":"1140","messageId":"1141","endLine":69,"endColumn":35},{"ruleId":"1138","severity":1,"message":"1209","line":70,"column":10,"nodeType":"1140","messageId":"1141","endLine":70,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1468","line":558,"column":7,"nodeType":"1140","messageId":"1141","endLine":558,"endColumn":31},{"ruleId":"1138","severity":1,"message":"1469","line":559,"column":7,"nodeType":"1140","messageId":"1141","endLine":559,"endColumn":34},{"ruleId":"1138","severity":1,"message":"1470","line":5,"column":10,"nodeType":"1140","messageId":"1141","endLine":5,"endColumn":18},{"ruleId":"1138","severity":1,"message":"1204","line":15,"column":20,"nodeType":"1140","messageId":"1141","endLine":15,"endColumn":31},{"ruleId":"1147","severity":1,"message":"1471","line":39,"column":6,"nodeType":"1149","endLine":39,"endColumn":34,"suggestions":"1472"},{"ruleId":"1138","severity":1,"message":"1473","line":2,"column":10,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":21},{"ruleId":"1138","severity":1,"message":"1474","line":3,"column":10,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1341","line":2,"column":24,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1475","line":17,"column":21,"nodeType":"1140","messageId":"1141","endLine":17,"endColumn":33},{"ruleId":"1138","severity":1,"message":"1264","line":2,"column":17,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":22},{"ruleId":"1138","severity":1,"message":"1341","line":2,"column":24,"nodeType":"1140","messageId":"1141","endLine":2,"endColumn":30},{"ruleId":"1147","severity":1,"message":"1476","line":60,"column":6,"nodeType":"1149","endLine":60,"endColumn":12,"suggestions":"1477"},{"ruleId":"1138","severity":1,"message":"1478","line":3,"column":8,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":24},{"ruleId":"1138","severity":1,"message":"1244","line":9,"column":23,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":30},{"ruleId":"1138","severity":1,"message":"1245","line":9,"column":32,"nodeType":"1140","messageId":"1141","endLine":9,"endColumn":39},{"ruleId":"1147","severity":1,"message":"1479","line":20,"column":6,"nodeType":"1149","endLine":20,"endColumn":8,"suggestions":"1480"},{"ruleId":"1138","severity":1,"message":"1481","line":3,"column":3,"nodeType":"1140","messageId":"1141","endLine":3,"endColumn":21},"no-unused-vars","'LanguageStore' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1482"],"no-negated-in-lhs",["1483"],"'Workout' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["1484"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["1485"],"'link' is assigned a value but never used.","'isOpen' is assigned a value but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allTrainers'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterTrainers' needs the current value of 'allTrainers'.",["1486"],["1487"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["1488"],"'responseFacebook' is assigned a value but never used.","'r' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchBlogs'. Either include it or remove the dependency array.",["1489"],"'slug' is defined but never used.","Duplicate key 'margin'.",["1490"],"React Hook useEffect has a missing dependency: 'challanges'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterChallenges' needs the current value of 'challanges'.",["1491"],"'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.",["1492"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'form' is assigned a value but never used.","'Footer' is defined but never used.","'StarOutlined' is defined but never used.","'LikeOutlined' is defined but never used.","'Modal' is defined but never used.","'ChallengeReviewModal' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'serUserInfo' is assigned a value but never used.",["1493"],"'open' is assigned a value but never used.",["1494"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'checkUser' is defined but never used.","'set' is defined but never used.","'setUserInfo' is assigned a value but never used.","'selectedChallenge' is assigned a value but never used.",["1495"],"React Hook useEffect has a missing dependency: 'fetchInfo'. Either include it or remove the dependency array.",["1496"],"'exerciseWorkoutTimeTrack' is assigned a value but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'props.history', 'setUserInfo', and 'userInfo'. Either include them or remove the dependency array.",["1497"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"1498","text":"1499"},"'includes' is defined but never used.",["1500"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'props.history' and 'props.onPricingPage'. Either include them or remove the dependency array.",["1501"],"'ForwardOutlined' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'PrivacyPolicyDocument' is defined but never used.","'PrivacyPolicyDocumentDutch' is defined but never used.","'type' is assigned a value but never used.","'onError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verifyEmailSendToken'. Either include it or remove the dependency array.",["1502"],"'res' is assigned a value but never used.","'AuditOutlined' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'AllBlogs' is defined but never used.","'NewBlog' is defined but never used.","React Hook useEffect has a missing dependency: 'props.location.search'. Either include it or remove the dependency array.",["1503"],"React Hook useEffect has a missing dependency: 'getUserDetails'. Either include it or remove the dependency array.",["1504"],"'getAllBlogs' is defined but never used.","'setAllBlogs' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.history', 'userInfo.authenticated', and 'userInfo.role'. Either include them or remove the dependency array.",["1505"],"'useDrag' is defined but never used.","'useDrop' is defined but never used.","'Upload' is defined but never used.","'Button' is defined but never used.","'Progress' is defined but never used.","'createCustomerDetails' is defined but never used.","'weightArray' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'fetchLoading' is assigned a value but never used.","'openNotificationWithIcon' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fechUserInfo'. Either include it or remove the dependency array.",["1506"],"'dummyRequest' is assigned a value but never used.","'dummyAfterPicRequest' is assigned a value but never used.","'onChange' is assigned a value but never used.","'EditFilled' is defined but never used.","'ChallengeCard' is defined but never used.","'addCommentToTrainer' is defined but never used.","'getTrainerById' is defined but never used.","'Avatar' is defined but never used.","'Input' is defined but never used.","'getAllUserChallenges' is defined but never used.","'setAdminInfo' is assigned a value but never used.","'setCalculatedRating' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'adminInfo.id' and 'fetchData'. Either include them or remove the dependency array.",["1507"],"'LockOutlined' is defined but never used.","'passwordIconStyle' is assigned a value but never used.",["1508"],"React Hook useEffect has a missing dependency: 'createSub'. Either include it or remove the dependency array.",["1509"],"'newPrice' is assigned a value but never used.","'setNewPrice' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedChallenge.price'. Either include it or remove the dependency array.",["1510"],"'userInfo' is assigned a value but never used.",["1511"],"'getUserProfileInfo' is defined but never used.","'Space' is defined but never used.","'Divider' is defined but never used.","React Hook useEffect contains a call to 'setShowModal'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["1512"],"'CommentOutlined' is defined but never used.","'FireOutlined' is defined but never used.","'ClockCircleOutlined' is defined but never used.","'FlagFilled' is defined but never used.",["1513"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",["1514"],"'FlagOutlined' is defined but never used.","'WhiteClock' is defined but never used.","'challengeProgress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'gender', 'months', and 'recommandedChal'. Either include them or remove the dependency array. If 'setMybody' needs the current value of 'gender', you can also switch to useReducer instead of useState and read 'gender' in the reducer.",["1515"],"'iconsListStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'eatingBehave', 'fetchData', 'recommandedWeekDiet', 'selectedrRecipes', 'setMealsForTheWeek', and 'userProfile'. Either include them or remove the dependency array. You can also do a functional update 'setEatingBehave(e => ...)' if you only need 'eatingBehave' in the 'setEatingBehave' call.",["1516"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'reloadWithoutConfirmation' is assigned a value but never used.","'useCallback' is defined but never used.","'selectedChallengeContext' is defined but never used.","'getAllChallengeGoals' is defined but never used.","'getAllChallengeTags' is defined but never used.","'createWorkout' is defined but never used.","'getAllUserExercises' is defined but never used.","'debounce' is defined but never used.","'updateLanguage' is assigned a value but never used.","'showVideoCreator' is assigned a value but never used.","'setAllGoals' is assigned a value but never used.","'setMusics' is assigned a value but never used.","'selectedWorkoutForStudioId' is assigned a value but never used.","'allExercises' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isFirstRender', 'populateChallengeInfo', 'setIsFirstRender', and 'setLoading'. Either include them or remove the dependency array.",["1517"],"React Hook useEffect has a missing dependency: 'fetchDataV2'. Either include it or remove the dependency array.",["1518"],"'CloseSquareOutlined' is defined but never used.","'createPost' is defined but never used.",["1519"],"'Switch' is defined but never used.","'Option' is assigned a value but never used.","'createChallenge' is defined but never used.","'getAllChallenges' is defined but never used.","'products' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addStuffToMainTabForm'. Either include it or remove the dependency array.",["1520"],"React Hook useEffect has a missing dependency: 'fethData'. Either include it or remove the dependency array.",["1521"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'loading' is assigned a value but never used.","'List' is defined but never used.","'Tag' is defined but never used.","'Select' is defined but never used.",["1522"],"'getAllBlogsFromBackend' is defined but never used.","'getAllRecipes' is defined but never used.",["1523"],"'message' is defined but never used.","'PlusOutlined' is defined but never used.","'thumbnailBase64' is assigned a value but never used.","'setThumbnailBase64' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchAllRecipes' and 'fetchData'. Either include them or remove the dependency array.",["1524"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","'LoadingOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'registerUser' is defined but never used.","'sendEmailVerification' is defined but never used.","'membership' is assigned a value but never used.","'goals' is assigned a value but never used.","'setGoals' is assigned a value but never used.","'allChallengeGoals' is assigned a value but never used.","'setSelectedTrainerGoal' is assigned a value but never used.",["1525"],"React Hook useEffect has missing dependencies: 'userInfo.id' and 'userInfo.role'. Either include them or remove the dependency array.",["1526"],"React Hook useEffect has a missing dependency: 'fetchExercises'. Either include it or remove the dependency array.",["1527"],["1528"],"'UpdateChallenge' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchChallenges'. Either include it or remove the dependency array.",["1529"],"React Hook useEffect has missing dependencies: 'currentFolderId' and 'fetchFolders'. Either include them or remove the dependency array.",["1530"],"React Hook useCallback has missing dependencies: 'checkForType', 'handlePreviewFile', 'setOpenCreateFolderModal', 'setOpenRenameModal', 'setOpenUploadModal', and 'setRenameTarget'. Either include them or remove the dependency array. If 'checkForType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1531"],"'CaretRightOutlined' is defined but never used.","'PauseOutlined' is defined but never used.","'width' is assigned a value but never used.","'totalDuration' is assigned a value but never used.","'useRef' is defined but never used.","'count' is assigned a value but never used.","'a' is assigned a value but never used.","'setA' is assigned a value but never used.","'t' is assigned a value but never used.","'setT' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form', 'postInfo.image', 'postInfo.text', 'postInfo.title', and 'postInfo.type'. Either include them or remove the dependency array. If 'setType' needs the current value of 'postInfo.type', you can also switch to useReducer instead of useState and read 'postInfo.type' in the reducer.",["1532"],"React Hook useEffect has missing dependencies: 'fethData', 'form', and 'getAllBlogsFromBackend'. Either include them or remove the dependency array.",["1533"],"React Hook useEffect has missing dependencies: 'challengesApplicableOn' and 'form'. Either include them or remove the dependency array. You can also do a functional update 'setChallengesApplicableOn(c => ...)' if you only need 'challengesApplicableOn' in the 'setChallengesApplicableOn' call.",["1534"],"React Hook useEffect has missing dependencies: 'fetchAllRecipes', 'fetchData', 'form', and 'props.selectedProduct'. Either include them or remove the dependency array.",["1535"],"'updateBlogCategory' is defined but never used.","React Hook useEffect has missing dependencies: 'exerciseValues' and 'form'. Either include them or remove the dependency array.",["1536"],"'createProducts' is defined but never used.","'Draggable' is defined but never used.",["1537"],"'rmProduct' is assigned a value but never used.","'ReactElement' is defined but never used.","'ChonkyFileActionData' is defined but never used.",["1538"],"'selectBefore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form' and 'userInfo'. Either include them or remove the dependency array.",["1539"],"'Checkbox' is defined but never used.","'category' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["1540"],"'currentBreak' is assigned a value but never used.","'setCurrentBreak' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setExerciseWorkoutTimeTrack'. Either include it or remove the dependency array.",["1541"],"React Hook useEffect has missing dependencies: 'currentExercise.index', 'inCreation', 'moveToNextExercise', 'setPlayerState', 'setTimerVisible', and 'workout.exercises'. Either include them or remove the dependency array. If 'moveToNextExercise' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1542"],"React Hook useEffect has missing dependencies: 'form', 'selectedFaq.answer', 'selectedFaq.category', 'selectedFaq.isPublic', and 'selectedFaq.question'. Either include them or remove the dependency array. If 'setIsPublic' needs the current value of 'selectedFaq.isPublic', you can also switch to useReducer instead of useState and read 'selectedFaq.isPublic' in the reducer.",["1543"],"'useWindowDimensions' is defined but never used.","'VideoSeekSlider' is defined but never used.","'SquarePT' is defined but never used.","'PopupPlayIcon' is defined but never used.","'PopupPauseIcon' is defined but never used.","'formatTime' is assigned a value but never used.","'playerRef' is assigned a value but never used.","'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getNextChallenges' and 'userInfo.id'. Either include them or remove the dependency array.",["1544"],"'SmPlayerChromeIcon' is defined but never used.","'setExerciseWorkoutTimeTrack' is assigned a value but never used.","'s' is assigned a value but never used.","'PlayerState' is defined but never used.","'setPlayerState' is assigned a value but never used.","'playing' is assigned a value but never used.","'setPlaying' is assigned a value but never used.","'setFullscreen' is assigned a value but never used.","'playerState' is assigned a value but never used.","'timerVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'exercise?.break', 'moveToNextExercise', 'setCurrentBreak', and 'setTimerVisible'. Either include them or remove the dependency array. If 'moveToNextExercise' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1545"],"'UserOutlined' is defined but never used.","'moment' is defined but never used.","'NoCommentBack' is defined but never used.","no-redeclare","'n' is already defined.","redeclared","'BackIcon' is defined but never used.","'allReviews' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userInfo.id'. Either include it or remove the dependency array.",["1546"],"'RightOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllFitnessInterests'. Either include it or remove the dependency array.",["1547"],"'_' is defined but never used.","'withRouter' is defined but never used.","'Spin' is defined but never used.","'v4' is defined but never used.","React Hook useEffect has a missing dependency: 'getWorkoutInfo'. Either include it or remove the dependency array.",["1548"],"React Hook useEffect has missing dependencies: 'fetchData', 'selectedExercise', and 'workoutInfo'. Either include them or remove the dependency array. You can also do a functional update 'setSelectedExercise(s => ...)' if you only need 'selectedExercise' in the 'setSelectedExercise' call.",["1549"],"React Hook useEffect has missing dependencies: 'selectedExercise.id' and 'workoutInfo'. Either include them or remove the dependency array. You can also do a functional update 'setWorkoutInfo(w => ...)' if you only need 'workoutInfo' in the 'setWorkoutInfo' call.",["1550"],"React Hook useEffect has a missing dependency: 'workoutInfo'. Either include it or remove the dependency array. You can also do a functional update 'setWorkoutInfo(w => ...)' if you only need 'workoutInfo' in the 'setWorkoutInfo' call.",["1551"],"'Carousel' is defined but never used.","'responsive' is assigned a value but never used.","'exercisesWithDragAndDrop' is assigned a value but never used.","'exercisesWithoutDragAndDrop' is assigned a value but never used.","'duration' is defined but never used.","React Hook React.useEffect has a missing dependency: 'userInfo'. Either include it or remove the dependency array.",["1552"],"'DndProvider' is defined but never used.","'HTML5Backend' is defined but never used.","'setSearchKey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedExerciseForEdit'. Either include it or remove the dependency array.",["1553"],"'BasicInformation' is defined but never used.","React Hook useEffect has a missing dependency: 'showVideoCreator'. Either include it or remove the dependency array.",["1554"],"'getAllMediaFolders' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1555","fix":"1556"},{"desc":"1557","fix":"1558"},{"desc":"1559","fix":"1560"},{"desc":"1557","fix":"1561"},{"desc":"1562","fix":"1563"},{"desc":"1564","fix":"1565"},{"desc":"1557","fix":"1566"},{"desc":"1567","fix":"1568"},{"desc":"1562","fix":"1569"},{"desc":"1557","fix":"1570"},{"desc":"1571","fix":"1572"},{"desc":"1573","fix":"1574"},{"desc":"1575","fix":"1576"},{"desc":"1577","fix":"1578"},[13712,13712]," rel=\"noreferrer\"",{"desc":"1557","fix":"1579"},{"desc":"1580","fix":"1581"},{"desc":"1582","fix":"1583"},{"desc":"1584","fix":"1585"},{"desc":"1586","fix":"1587"},{"desc":"1588","fix":"1589"},{"desc":"1590","fix":"1591"},{"desc":"1592","fix":"1593"},{"desc":"1594","fix":"1595"},{"desc":"1596","fix":"1597"},{"desc":"1598","fix":"1599"},{"desc":"1562","fix":"1600"},{"desc":"1601","fix":"1602"},{"desc":"1603","fix":"1604"},{"desc":"1603","fix":"1605"},{"desc":"1606","fix":"1607"},{"desc":"1608","fix":"1609"},{"desc":"1610","fix":"1611"},{"desc":"1612","fix":"1613"},{"desc":"1557","fix":"1614"},{"desc":"1615","fix":"1616"},{"desc":"1617","fix":"1618"},{"desc":"1557","fix":"1619"},{"desc":"1557","fix":"1620"},{"desc":"1621","fix":"1622"},{"desc":"1571","fix":"1623"},{"desc":"1624","fix":"1625"},{"desc":"1626","fix":"1627"},{"desc":"1628","fix":"1629"},{"desc":"1630","fix":"1631"},{"desc":"1632","fix":"1633"},{"desc":"1634","fix":"1635"},{"desc":"1636","fix":"1637"},{"desc":"1638","fix":"1639"},{"desc":"1640","fix":"1641"},{"desc":"1642","fix":"1643"},{"desc":"1644","fix":"1645"},{"desc":"1646","fix":"1647"},{"desc":"1628","fix":"1648"},{"desc":"1649","fix":"1650"},{"desc":"1651","fix":"1652"},{"desc":"1653","fix":"1654"},{"desc":"1655","fix":"1656"},{"desc":"1657","fix":"1658"},{"desc":"1659","fix":"1660"},{"desc":"1661","fix":"1662"},{"desc":"1663","fix":"1664"},{"desc":"1665","fix":"1666"},{"desc":"1667","fix":"1668"},{"desc":"1669","fix":"1670"},{"desc":"1671","fix":"1672"},{"desc":"1673","fix":"1674"},{"desc":"1675","fix":"1676"},{"desc":"1677","fix":"1678"},{"desc":"1679","fix":"1680"},"Update the dependencies array to be: [checkUserInfo]",{"range":"1681","text":"1682"},"Update the dependencies array to be: [fetchData, language]",{"range":"1683","text":"1684"},"Update the dependencies array to be: [allTrainers, filterGender]",{"range":"1685","text":"1686"},{"range":"1687","text":"1684"},"Update the dependencies array to be: [props.history]",{"range":"1688","text":"1689"},"Update the dependencies array to be: [fetchBlogs, language]",{"range":"1690","text":"1691"},{"range":"1692","text":"1684"},"Update the dependencies array to be: [challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",{"range":"1693","text":"1694"},{"range":"1695","text":"1689"},{"range":"1696","text":"1684"},"Update the dependencies array to be: [fetchData]",{"range":"1697","text":"1698"},"Update the dependencies array to be: [userInfo, language, fetchData]",{"range":"1699","text":"1700"},"Update the dependencies array to be: [fetchInfo, language]",{"range":"1701","text":"1702"},"Update the dependencies array to be: [fetchData, props.history, setUserInfo, userInfo]",{"range":"1703","text":"1704"},{"range":"1705","text":"1684"},"Update the dependencies array to be: [props.history, props.onPricingPage]",{"range":"1706","text":"1707"},"Update the dependencies array to be: [verifyEmailSendToken]",{"range":"1708","text":"1709"},"Update the dependencies array to be: [props.location.search]",{"range":"1710","text":"1711"},"Update the dependencies array to be: [current, getUserDetails]",{"range":"1712","text":"1713"},"Update the dependencies array to be: [props.history, userInfo.authenticated, userInfo.role]",{"range":"1714","text":"1715"},"Update the dependencies array to be: [fechUserInfo]",{"range":"1716","text":"1717"},"Update the dependencies array to be: [adminInfo.id, fetchData, language]",{"range":"1718","text":"1719"},"Update the dependencies array to be: [fetchData, userInfo]",{"range":"1720","text":"1721"},"Update the dependencies array to be: [createSub]",{"range":"1722","text":"1723"},"Update the dependencies array to be: [selectedChallenge.price]",{"range":"1724","text":"1725"},{"range":"1726","text":"1689"},"Add dependencies array: []",{"range":"1727","text":"1728"},"Update the dependencies array to be: [pageNumber, language, fetchData]",{"range":"1729","text":"1730"},{"range":"1731","text":"1730"},"Update the dependencies array to be: [gender, months, recommandedChal, userProfile]",{"range":"1732","text":"1733"},"Update the dependencies array to be: [eatingBehave, fetchData, recommandedWeekDiet, selectedrRecipes, setMealsForTheWeek, userProfile]",{"range":"1734","text":"1735"},"Update the dependencies array to be: [dataLoaded, props.match.params.challengeId, language, isFirstRender, setLoading, populateChallengeInfo, setIsFirstRender]",{"range":"1736","text":"1737"},"Update the dependencies array to be: [userInfo, language, fetchDataV2]",{"range":"1738","text":"1739"},{"range":"1740","text":"1684"},"Update the dependencies array to be: [addStuffToMainTabForm]",{"range":"1741","text":"1742"},"Update the dependencies array to be: [fethData]",{"range":"1743","text":"1744"},{"range":"1745","text":"1684"},{"range":"1746","text":"1684"},"Update the dependencies array to be: [fetchAllRecipes, fetchData, language]",{"range":"1747","text":"1748"},{"range":"1749","text":"1698"},"Update the dependencies array to be: [userInfo.id, userInfo.role]",{"range":"1750","text":"1751"},"Update the dependencies array to be: [fetchExercises]",{"range":"1752","text":"1753"},"Update the dependencies array to be: [fethData, language]",{"range":"1754","text":"1755"},"Update the dependencies array to be: [fetchChallenges, language]",{"range":"1756","text":"1757"},"Update the dependencies array to be: [currentFolderId, fetchFolders]",{"range":"1758","text":"1759"},"Update the dependencies array to be: [mediaActions, checkForType, mediaType, setCurrentFolderId, setCurrentFolderName, setRemoteMediaManagerVisible, handleDrop, confirmDelete, deleteMediaFile, deleteMediaFolder, setOpenUploadModal, setOpenCreateFolderModal, setRenameTarget, setOpenRenameModal, handlePreviewFile]",{"range":"1760","text":"1761"},"Update the dependencies array to be: [form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",{"range":"1762","text":"1763"},"Update the dependencies array to be: [blogInfo, fethData, form, getAllBlogsFromBackend]",{"range":"1764","text":"1765"},"Update the dependencies array to be: [challengesApplicableOn, form, selectedCoupon]",{"range":"1766","text":"1767"},"Update the dependencies array to be: [fetchAllRecipes, fetchData, form, props.selectedProduct]",{"range":"1768","text":"1769"},"Update the dependencies array to be: [exerciseValues, form]",{"range":"1770","text":"1771"},"Update the dependencies array to be: [fetchExercises, trainers]",{"range":"1772","text":"1773"},{"range":"1774","text":"1755"},"Update the dependencies array to be: [form, userInfo]",{"range":"1775","text":"1776"},"Update the dependencies array to be: [form, props.selectedProduct]",{"range":"1777","text":"1778"},"Update the dependencies array to be: [setExerciseWorkoutTimeTrack, workout]",{"range":"1779","text":"1780"},"Update the dependencies array to be: [currentExercise.index, exerciseSeconds, inCreation, moveToNextExercise, setPlayerState, setTimerVisible, workout.exercises]",{"range":"1781","text":"1782"},"Update the dependencies array to be: [form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",{"range":"1783","text":"1784"},"Update the dependencies array to be: [getNextChallenges, userInfo.id]",{"range":"1785","text":"1786"},"Update the dependencies array to be: [exercise?.break, moveToNextExercise, setCurrentBreak, setTimerVisible]",{"range":"1787","text":"1788"},"Update the dependencies array to be: [item, userInfo.id]",{"range":"1789","text":"1790"},"Update the dependencies array to be: [getAllFitnessInterests]",{"range":"1791","text":"1792"},"Update the dependencies array to be: [getWorkoutInfo, selectedWorkoutForStudioId, weeks]",{"range":"1793","text":"1794"},"Update the dependencies array to be: [fetchData, selectedExercise, workoutInfo]",{"range":"1795","text":"1796"},"Update the dependencies array to be: [introVideoFile, selectedExercise.id, workoutInfo]",{"range":"1797","text":"1798"},"Update the dependencies array to be: [infoFile, workoutInfo]",{"range":"1799","text":"1800"},"Update the dependencies array to be: [exercises, seletedTrainers, userInfo]",{"range":"1801","text":"1802"},"Update the dependencies array to be: [open, selectedExerciseForEdit]",{"range":"1803","text":"1804"},"Update the dependencies array to be: [showVideoCreator]",{"range":"1805","text":"1806"},[2511,2513],"[checkUserInfo]",[1058,1068],"[fetchData, language]",[1283,1297],"[allTrainers, filterGender]",[1055,1065],[1204,1206],"[props.history]",[1025,1035],"[fetchBlogs, language]",[1938,1948],[3832,3904],"[challanges, filterByBodyFocus, filterByEquipments, filterByGoal, filterByIntensity]",[1234,1236],[1753,1763],[2153,2155],"[fetchData]",[5369,5389],"[userInfo, language, fetchData]",[1542,1552],"[fetchInfo, language]",[2570,2572],"[fetchData, props.history, setUserInfo, userInfo]",[826,836],[962,964],"[props.history, props.onPricingPage]",[571,573],"[verifyEmailSendToken]",[4559,4561],"[props.location.search]",[3111,3120],"[current, getUserDetails]",[1495,1497],"[props.history, userInfo.authenticated, userInfo.role]",[3623,3625],"[fechUserInfo]",[3665,3675],"[adminInfo.id, fetchData, language]",[3316,3326],"[fetchData, userInfo]",[380,382],"[createSub]",[19904,19906],"[selectedChallenge.price]",[461,463],[814,814],", []",[1516,1538],"[pageNumber, language, fetchData]",[1424,1446],[3028,3041],"[gender, months, recommandedChal, userProfile]",[5598,5600],"[eatingBehave, fetchData, recommandedWeekDiet, selectedrRecipes, setMealsForTheWeek, userProfile]",[7719,7773],"[dataLoaded, props.match.params.challengeId, language, isFirstRender, setLoading, populateChallengeInfo, setIsFirstRender]",[7849,7869],"[userInfo, language, fetchDataV2]",[1449,1459],[6542,6544],"[addStuffToMainTabForm]",[6589,6591],"[fethData]",[710,720],[1018,1028],[5066,5076],"[fetchAllRecipes, fetchData, language]",[3068,3070],[1337,1339],"[userInfo.id, userInfo.role]",[1094,1096],"[fetchExercises]",[7129,7139],"[fethData, language]",[1379,1389],"[fetchChallenges, language]",[1602,1604],"[currentFolderId, fetchFolders]",[15303,15547],"[mediaActions, checkForType, mediaType, setCurrentFolderId, setCurrentFolderName, setRemoteMediaManagerVisible, handleDrop, confirmDelete, deleteMediaFile, deleteMediaFolder, setOpenUploadModal, setOpenCreateFolderModal, setRenameTarget, setOpenRenameModal, handlePreviewFile]",[900,902],"[form, postInfo.image, postInfo.text, postInfo.title, postInfo.type]",[2782,2792],"[blogInfo, fethData, form, getAllBlogsFromBackend]",[1206,1222],"[challengesApplicableOn, form, selectedCoupon]",[7212,7214],"[fetchAllRecipes, fetchData, form, props.selectedProduct]",[1458,1460],"[exerciseValues, form]",[3473,3483],"[fetchExercises, trainers]",[2974,2984],[3306,3308],"[form, userInfo]",[2086,2109],"[form, props.selectedProduct]",[1890,1899],"[setExerciseWorkoutTimeTrack, workout]",[2825,2842],"[currentExercise.index, exerciseSeconds, inCreation, moveToNextExercise, setPlayerState, setTimerVisible, workout.exercises]",[1577,1579],"[form, selectedFaq.answer, selectedFaq.category, selectedFaq.isPublic, selectedFaq.question]",[1870,1872],"[getNextChallenges, userInfo.id]",[903,905],"[exercise?.break, moveToNextExercise, setCurrentBreak, setTimerVisible]",[1693,1699],"[item, userInfo.id]",[1745,1747],"[getAllFitnessInterests]",[3950,3985],"[getWorkoutInfo, selectedWorkoutForStudioId, weeks]",[4264,4266],"[fetchData, selectedExercise, workoutInfo]",[4676,4692],"[introVideoFile, selectedExercise.id, workoutInfo]",[4841,4851],"[infoFile, workoutInfo]",[1398,1426],"[exercises, seletedTrainers, userInfo]",[2338,2344],"[open, selectedExerciseForEdit]",[721,723],"[showVideoCreator]"]